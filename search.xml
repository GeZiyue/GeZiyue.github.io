<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【讲课笔记】FFT</title>
      <link href="/2023/FFT/"/>
      <url>/2023/FFT/</url>
      
        <content type="html"><![CDATA[<p>没啥用的东西。</p><span id="more"></span><p>最近要给学弟讲课，稍微打点草稿，防止自己身败名裂。</p><h2 id="discrete-fourier-transform">discrete Fourier transform</h2><p><span class="math display">\[\begin{aligned}h_k = \sum_{i + j \equiv k \pmod N} f_i \cdot g_j\end{aligned}\]</span></p><p><span class="math inline">\(\operatorname{DFT}(g)_k = \sum_{t = 0}^{N - 1} g_t \cdot \omega_N^{tk}\)</span></p><h2 id="convolution-theorem">convolution theorem</h2><p><span class="math display">\[\begin{aligned}\operatorname{DFT}[g * h] = \operatorname{DFT}[g] \cdot \operatorname{DFT}[h]\end{aligned}\]</span></p><h2 id="vandermonde-matrix">Vandermonde matrix</h2><p><span class="math display">\[\mathbf{F}=\begin{bmatrix}\omega_N^{0 \times 0} &amp; \omega_N^{0 \times 1} &amp; \cdots &amp; \omega_N^{0 \times (N - 1)}\\\omega_N^{1 \times 0} &amp; \omega_N^{1 \times 1} &amp; \cdots &amp; \omega_N^{1 \times (N - 1)}\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\\omega_N^{(N - 1) \times 0} &amp; \omega_N^{(N - 1) \times 1} &amp; \cdots &amp; \omega_N^{(N - 1) \times (N - 1)}\\\end{bmatrix}\]</span></p><h2 id="fft">FFT</h2><p>欲求 <span class="math inline">\(\sum_{i = 0}^{N - 1}\frac{g_i}{1 - \omega_N^ix}\)</span>。</p><p><span class="math inline">\(\sum_{i = 0}^{N - 1}(1 - \omega_N^ix) = 1 - x^N\)</span>。</p><p><span class="math inline">\(\frac{F(x)}{1 - x^N} = \frac{F(x\omega_{2N})}{1 + x^N}\)</span>。分治 FFT。</p><h2 id="dif-dit">DIF DIT</h2><p><a href="../../2021/yhx-12243-NTT/">我之前的博客</a></p><h2 id="fwt">FWT</h2><p>$$</p>]]></content>
      
      
      <categories>
          
          <category> 讲课笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11 月 08 日闲话</title>
      <link href="/2022/flower-11-08/"/>
      <url>/2022/flower-11-08/</url>
      
        <content type="html"><![CDATA[<p>有人关于我的性取向有疑问，我在此统一澄清一下：我<strong>不知道</strong>，而且这并不重要。</p><p>我只喜欢我觉得可爱的东西，至于它的标签是什么不重要，正如我的标签是什么不重要。</p><p>我告诉自己要尽量不成为标签的奴隶，它应当只是认识事物的工具而非事物的全部。</p><p>虽然我也很难做到。</p><p>S12 总决赛正好撞了胡策，但我是先看完比赛再打胡策的。</p><p>励志吗？很励志。从几乎要失去世界赛资格，再从入围赛一步步打到冠军，无数次在危险的边缘，又一次次逆境翻盘。每一场 BO5 前都不被看好，但最终用胜利证明了自己。</p><p>老将 Deft 打了 10 年职业，辗转 5 个俱乐部，2 个赛区，终于拿到了那个属于他的冠军。</p><p>他说「人这一生，是不太需要别人建议的，不经历过是不会明白的」。</p><p>是的，他也做到了。没有人像他一样历经磨砺、失败仍然抱有赤诚和初心。他饱受健康问题的困扰，别人劝他退役，但他却一路坚持下来。在最后的最后他十年如一日的热爱、坚持与努力，终于化作了这位老将最美丽的绽放与最完美的谢幕。</p><p>只能说，这可能是奥林匹克精神的一种完美的诠释。</p><p>只能说我等凡夫俗子，仅可仰望。</p><p>人生在世，总得有点自己的东西。得有点属于自己的磨砺与道路。</p><p>我今晚在天台上看了快一个小时的月亮。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 闲话 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11 月 04 日闲话</title>
      <link href="/2022/flower-11-04/"/>
      <url>/2022/flower-11-04/</url>
      
        <content type="html"><![CDATA[<p>这几天回顾了一下我的 OI 历程，然后我发现一件事：我从头至尾都不知道在干啥，我都学了些啥？很奇怪的感受，但是我发现我好像真的不知道这两年我都干了什么有意义的事，甚至连没有意义的事都想不起来多少，如梦初醒。本来打算写写 OI 回忆录，却无从下笔。</p><p>最近看完了少女歌剧，心中总是有一种奇怪的感受，像是有火在燃烧，尤其是看完剧场版之后。我是真的很喜欢这种大脑被编剧和监督疯狂鸿儒的感受，甚至恨不得能在我的大脑上画上“正”字沟壑——这种比喻可能很奇怪，但这种“意识流”和大量象征的手法的确很对我的电波。我现在想来，我可能也必须面对舞台的崩塌，或者说离开的不是舞台，而是我。因为可能舞台永远在那，但我必须要走<strong>出去</strong>——这种体验无疑与“列車は必ず次の駅へ。では舞台は？私たちは？”的主题很接近。</p><p>今天早上鲜花群里讨论了很多关于 OI 现状的事情。但是今天早上我恰好在上英语，所以没有参与讨论，回家后草草看了一下早上的讨论内容。不过我还是有话可说的，就在这儿说了。由于我省比较特殊的缘故，我在高一和高二分别经历了没有 1/3 的一年和有 1/3 的一年。高二一年似乎机房的确活跃得多（但是似乎还有一个原因是高一时机房只有 8 个人，但高二时翻了一番），这看似是一种竞争压力的改变，但于我而言并没有感受到太多的变化。而且高二这一年似乎“更加良性的竞争”也并没有提升效率。</p><p>这两年的经历，让我对我校 OI 的前景持悲观态度。我认为我校 OI 学习体系的问题其实很大。靠着 OI 狂野年代的人脉资源组织联考，大量堆砌时间但是缺乏效率。事实上我并不认同一周 6.5 天，每天 07:40 - 21:30 的工作制（这无疑是痛苦的）。当然事实上完全让大家自由只会落入更差的深渊，我认为需要一个有效的指导，但这的确很难实现。所以怎么学这个问题，我只是有一点点方向的雏形但是完全不知道答案。的确也有一些前辈在试图研究这一问题。同时，OI 选手的心理问题是亟需关注的话题，在当下的社群和现实中，我认为这一问题尤其突出。</p><p>一方面我认为 OI 中有相当程度的畸形文化。甚至我想说的是 OI 这个舞台当然是为了 <em>audition</em> 而产生的。尽管作为一个侥幸获得了在大多数人的意义下相当成功的成绩，但我仍然想说的是，据我的了解，相当一部分的人（包括我和一些其他集训队）都对它产生了不同程度的厌倦或是厌恶。而我的看法是：在一定程度上人反而被舞台所控制，我认为我的主体性反而被 OI 所剥夺了。我能体现出来的只是 NOI 的分数，CF 的 rating，能做出几道蜜蜂题这类东西供人以观察，甚至是崇拜。我也只能体会到符号而非存在。这让我感受到在做一种西西弗斯式的无用功，我不知道我究竟做了什么，因为我自己的形象也无疑变得灰暗与模糊了。我暂且认为它是由不够完备的体系决定的，是教育体现出的“局限性”。但是我认为主观能动性能够发挥作用，给予我们在这种迷惘中的一点光亮。正如小 T 在多哥网站的序言中所说：“如今的竞赛选手们似乎越来越迷恋符号游戏，一声声大佬太强了我太菜了正在使我们远离自身所处的现实”。我们应当抵抗这种符号化的过程，让我们回归一个鲜活的存在。这也就是为什么我前几日说多哥在我眼中是一位非常有人文关怀的人。</p><p>同样值得考虑的事情就是目的。事实上排除功利几乎是不可能的，大多数人的心中都是以功利性的目标为主。所谓的热爱也好，兴趣也罢，大抵早就在这几年的不断磨难中消磨干净了。这其实也就只留给大多数人一个冷酷的结局。我之前常说 OI 比赛很大程度上也要有良好的心态。其实心态这东西很玄乎，我也说不清。与我自己而言，我最后是一种接受命运的态度上考场的：如果失败了呢——那也不过是在另一座高山上开始推动命运的巨石。事实上我最终意识到 OI 和文化课可能也不过是本质相同的两项工作，最终我其实也有些期待能看到不一样的风景——其实无论如何，你都能看到新的风景，正如你不能两次踏入同一条河流。所以我的一种尝试就是去接受和拥抱。不是消极的顺从，而是以最踏实的脚步走在每一处。前几日尝试去读 EI 的艾兰童话，其中有一句“祂既不是想让我为了证明什么而赴死，也不是为了让我证明什么尚未证明的东西而苟活。他太残酷了，但同时祂也太温柔了。因为他要我提供的不是一个点，而是一条完整的线”，尽管多哥锐评很迷语，但我在看到这句话时有一种强烈的震撼。<strong>认识到留下轨迹比最终在哪里更加重要，我认为这是我的一种解决方案。</strong>当然我其实也只是说着玩玩，并非是好为人师。仅供参考，仅供参考。</p><p>上面这些可能都显得有些浅显，但很惭愧的是我近半年来才逐渐意识到这些（尤其是经历了省选的大起大落和后来初识了一些存在主义相关内容后）。关于 OI 的这么多问题，我最近有了一个很幼稚的想法，就是希望所有的 OIer 都能多读读书，多认识自己和世界，我相信这会让你受益匪浅。用全面的知识充实自己的内心，这样才不至于进了集训队还在 QQ 群里逆天发言。</p><p>一家之言，写得缭乱，不成体系。如有错误，或有补充，欢迎评论。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 闲话 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10 月 27 日闲话</title>
      <link href="/2022/flower-10-27/"/>
      <url>/2022/flower-10-27/</url>
      
        <content type="html"><![CDATA[<p>今天学习多头把闲话移植到 GitHub 上来了，虽然这其实也是我一直的计划。</p><p>最近在循环一个和正式的音乐相比不是那么严肃和正规的<a href="https://www.bilibili.com/video/BV1Kd4y1A7YD">音 mad 作品</a>。</p><p>第一次听只觉得音效和调音做的很好，是音 mad 佳作。后来看到了一篇关于<a href="https://www.bilibili.com/read/cv18513836">这个作品的文章</a>才逐渐了解这些素材的来源以及背后蕴藏的意义。尽管我很久没有去过电影院，但这部作品给我一种去看老电影的冲动。或许之后有时间我会补一补这里面的所有电影。</p><p>应该说这部作品用一种很现代的形式做出了现实、历史与梦境不断轮回的梦幻与史诗感，勾起了中国人刻在骨子里的一些东西。显然很多现代流行音乐都做不出这种感受，为什么用素材的拼接来表现旋律能做到呢。</p><p>当然这种形式做出来的“无聊”之作也是很多的，比如 B 站排行榜上的大多数无聊与同质化的“鬼畜”作品，那些或许只是一种商业娱乐品，并没有多少作者的思考。但这部作品能够勾起中国人独有的感动与思考，我觉得很大程度上是所用素材内在的联系决定的，也和作者自身截取片段的精巧有很大的关系。在很大程度上，这也给我们揭示了编排和剪贴艺术的巨大可能性。这是一种富有主题与思考的方式，作者用看似无关的素材拼贴出了一部关于这片土地的希望与梦想的史诗。从某种程度上，也给我一种思考，现代音乐的创作能否由编曲参与到主题的创作上来呢。这貌似是一个很新的问题，我也对音乐不甚了解，故不再展开。</p><p>关于希望与未来，我相信每个人都有自己的思考。事实上我最近也在大量地思考这一问题，但我也并不指望我能给出一个相对具体的答案。但我仍然坚信：道路是曲折的，前途是光明的，就像太阳总会照常升起。</p><p>所以，快点站起来吧，<strong>活着就有希望，一切都是治疗</strong>。</p><p>总之我还是以一种诚挚的热情向大家安利这部作品，如果对这些素材不甚了解也推荐大家看看那篇解读，如果有时间希望你能细细欣赏这部作品，相信它一定能引起你的思考。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 闲话 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闲话目录</title>
      <link href="/2022/flower-catalogue/"/>
      <url>/2022/flower-catalogue/</url>
      
        <content type="html"><![CDATA[<p>也许鲜花和人生一样会逐渐褪色，但我们在上面倾注的心血可能并不是为了保存他们的颜色，而是为了保存自己的热爱。</p><span id="more"></span><p>感觉鲜花的开创者多头是一位很能享受生活，很浪漫，很有生活艺术的人。正如我在群里讲的那样是一种“白月光”的存在。相比之下我写的东西实在是比较垃圾，没有新颖的想法，没有趣味的文字，显得过于单调与笨重，但还是觉得有些写点东西的必要。总之坚持写点什么也许已经是一件足够美好的事情。</p><p>原先在洛谷博客上写的东西，也不再搬运到这里了，就当是黑历史。这个博客里的东西也不会在洛谷同步，我只想在这个相对自由的平台说些我想说的话。如果你查看 GitHub Pages 很困难，很抱歉爱莫能助。</p><p>就这样吧，祝我们都能享受生活。</p><ul><li><a href="/2022/flower-11-04">11 月 04 日闲话</a></li><li><a href="/2022/flower-10-27">10 月 27 日闲话</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 闲话 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI 2022 游记</title>
      <link href="/2022/NOI-2022/"/>
      <url>/2022/NOI-2022/</url>
      
        <content type="html"><![CDATA[<p>AFO 了 /ll。</p><p><strong>这次运气真的很好！！！</strong></p><span id="more"></span><h2 id="day--2">Day -2</h2><p>来的很早，校园很大气漂亮！不愧是贵族学校！</p><p>因为来的很早，而且 ASDFZ 校队人不少，一路上都有志愿者拿着相机对着我拍。（后来知道我在宣传片里出现了不少次，我真的有那么上镜吗？？？）</p><p>先去了宿舍，发现床的条件没有想象中的那么好。至少我更喜欢软一点的床。</p><p>然后听说有签名，跑下去签了个 Seniorious（然后又被放进宣传片了）。</p><p>明明字又丑，人又挫，怎么整天把我放进宣传片啊。</p><p>和我同宿舍的是 mwr xst rsy。</p><p>感觉要打 Ag 了，开摆！</p><p>于是先开了个 MC 服务器，一开始 wd xst rsy wc 都在，后来我头晕不想玩辣，再后来大家一个个都不想玩辣！</p><p>BJ 老哥还有带象棋的，于是 AH 又去团建了，集体帮助弱势方下棋。</p><p>食堂的确很高端！菜也很好！</p><p>然后发现自己谁都不认识，很自闭很社恐。</p><p>晚上拉了可爱 Cirno_9，在宿舍逛了一圈，聊了会天。然后去看文艺汇演！</p><p>来的时间刚刚好，所以有椅子坐，于是就和 C9 一起坐在最后自闭。</p><p>唱歌很有趣，staff 的伪音很震撼。第一时间以为是女声。</p><p>谁是卧底也很搞，具体可以见别人博客。</p><p>dottle 的演讲很有趣。</p><p><span class="citation" data-cites="1kri">@1kri</span> bot。</p><p>最后的开心往前飞气氛很好！</p><h2 id="day--1">Day -1</h2><p>AH 是第一个去拿物资的。我是 AH 第一个去的。</p><p>然后 CCF 那边的人迟到了，我们在交学籍的地方等了一会。</p><p>拿到了 koishi 徽章。koishi 可爱/tyt。</p><p>然后回宿舍，mwr 说他的没了，还有几个人少了一点。</p><p>我的 15 个也就换了一半，感觉自己好自闭啊。</p><p>linshey 非常社牛！来换了个 AH 校队。</p><p>MoRansky 来了一趟 3F，然后我也去换了一个。</p><p>还有 yspm 和一个 NM 老哥来了一趟。</p><p>中途 ntf 在发徽章，我也去换了一个。</p><p>晚上又去找了趟 C9。</p><p>结果就换了这些，自闭。</p><h2 id="day-0">Day 0</h2><p>继续摆。</p><p>下午试机写 NTT 没调出来，我现在还不知道为什么挂了！</p><p>笔试还是那些题，凭借依稀的记忆，想起来不能碰鼠标键盘。</p><p>于是就 100 了。当场不出成绩差评。</p><p>左边是 IrisT，左边的左边是 dottle。但是我谁都不认识。</p><p>摆。</p><h2 id="day-1">Day 1</h2><p>晚上睡得还行。</p><p>听说有人两点多还睡不着。</p><p>上考场！</p><p>看到题目有点自闭。</p><p>T1 应该是摩尔投票+数据结构。T2 T3 好像很恐怖。</p><p>发现监考没有 lxl，但是有抽象数据结构题。</p><p>发现 T1 不要多少数据结构，离线建树就行，发现很好写，很快就码完了。</p><p>然后就是自闭，看了很久 T2。</p><p>感觉可能今年偏难，T2 应该不会切多少。</p><p>先写 T3 25 的猫树+换根。</p><p>继续盯着 T2 的判定想了一万年。</p><p>最后写 15 暴力跑路。</p><p>出来一问大家分都不高，只有 mwr 和 wc 会判定，感觉还行。</p><p>查分发现没挂 <span class="math inline">\(100 + 15 + 25\)</span>。wd yxy T1 挂了/ll。</p><p>两个高一老哥因为 deque 挂了 100，很惨。</p><p>幸亏是高一，要是高二就寄了。</p><p>晚上讲题大受震撼。</p><h2 id="day-1.5">Day 1.5</h2><p>解密没玩。上午无聊，开始 florr.io。</p><p>中午 ygp 来讲话，大概说队线不高，都有希望。</p><p>下午开幕式感觉还行。朗诵挺阴间，无人机表演很有意思。</p><p>晚上继续摆。晚上我妈说昆山有疫情了（flag）。</p><h2 id="day-2">Day 2</h2><p>有点头疼，幸好带了风油精。左边是 srz，很强大。</p><p>开考发现 T1 题面明示树 Hash，想了一下感觉暴力复杂度不高。</p><p>T2 挺神秘的，一个包一个包的想，感觉已经猜出正解了。</p><p>T3 也很神秘，只会 <span class="math inline">\(k = 3\)</span>。</p><p>先写了 T1 样例不是很大，但感觉树 Hash 没问题。</p><p>然后写 T3 <span class="math inline">\(k = 3\)</span> 的贪心+暴搜，在翻纸质题面的时候发现了 <span class="math inline">\(p_i=q_i\)</span> 的问题，以为能过就没管（flag）。</p><p>先写 T2 的 Subtask A。很快过了样例，也过了拍。</p><p>Subtask B 发现填的数是单调的，简单证明了一下。然后写了个线段树上去。</p><p>Subtask C 大胆猜想就是左端点放上然后类似 B 查线段树后缀。结果写挂了以为是做法假了。</p><p>然后就晕了一会，想不出 C，跑路。</p><p>出考场很晕。zjf 说不会 T1 很震撼，差点以为自己做法假了，吃不下饭。wd 说他 200+，T1 做法和我一样，他说是对的，感觉还行。</p><p>回宿舍才知道 NOI 结束了，疫情/fn。</p><p>查分提前了 30min，去了发现 T1 只挂了 4pts 应该是树 Hash 的问题，T2 64 拿满了。T3 暴搜写挂了？？？至少 <span class="math inline">\(k = 3\)</span> 的 10pts 还在。</p><p><span class="math inline">\(96 + 64 + 10 = 170\)</span>，问了一圈听说 300+ 挺稳的。感觉还行，在场馆里晃了几圈。</p><p>回宿舍发现 RSY 非常稳！zjf 和 FJ-yc 有点危。又晃了一会我妈打电话问我是去 P 还是 T，震撼。</p><p>加了集训队群结果发现 yyl 得到的分数是错的，又要重新统计。</p><p>然后就收拾东西回家了。路上饿得要死，在阳澄湖服务区买了汉堡和冰淇淋。路上 zjf 一直很慌。据不完全统计 zjf 在金牌线上面 1 分。</p><h2 id="day-3">Day 3</h2><p>早上 7 点就被 T 的电话搞醒了，然后就睡不着了。听说 T 现在先进叉院大二再分班。但是 P 的老师很急加上今年去 P 的人不少，最后还是去 P 了。</p><p>中午出榜，发现 ygp 消息很灵通，zjf 确实比队线高 1 分。</p><h2 id="总结">总结</h2><p>感觉今年 NOI 就是比拼心态、稳健和策略。如果很会猜，过某个 T2 就大概率进队。不挂大分，多打点暴力也能进。</p><p>最后还是靠着暴力进队了，感觉自己水平并不是很配得上集训队。</p><p>总之高三一年有大把的自由时间了，希望能学点东西，提高一下科技水平。</p>]]></content>
      
      
      <categories>
          
          <category> 游记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>「FZOJ 4987」普通高中生 题解</title>
      <link href="/2022/FZOJ-4987/"/>
      <url>/2022/FZOJ-4987/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7acff604297de3490d672705cdd35505bec4bd015d4f6a9633ec078abaf7a50a">20cdaaa87119678bbce07275f7924a6e4d191c057c8e5170e66ce41a0eb35b3c2e7083b240d02f553c910b984b8e428392bf0f6a3825de5efb38b21d9d24757c9bb760437bcc9a712a6c81c3bb787db0eef9c6419e665ec3c341fb7978af7500fe835fc3921f562c5fce4ead51f4f0b8ce4df72c649f31cd40f9398ed4e9d87eda0b3ddc95f16547e80fa818646d19feac2c1329bbb6d1d6db766b73b9103dc150177a3a76c7e7527b466e35d489b4ff3356b38bd1a1589045d91e7cec73453511dfa8e7d5bbe5b9f281b24d699e7a0cb096d0084f61a4f6444480e52c888c16d7063cc5af9643d6177d81d6288328359a94cf9cdaba89dfed651ec4cd40d36cf18ff654e2fa463ef45c568085e193557625565dc618273d3c3786237576f2e32e6eb8881d697fd5cd9f8789bb2c6a33f47b6f495ba72c9d216a585ab129ca1c3c2a6ddaa5145e5c0588b7c34cbd416071ef90fa837b52808a795321e68c1034119e376b4f1f6db9b839c03b18d233bc7b730a6bb112802b43ed70cc5255c08a7656caf40eebb9162c11225fef686b01bbd448161357e3bd1477a8cc6e9b081e15d090cef42eeffa9b66465041d9d169eaf472da8bc496d7013cdaa5127a175f116c22f291691d0c0668496a17d95bf012b7d103181f6a3698cc6401d8ac810eb14d8c9af9829ab169387ae5d7b403e119ac57cf8a3ea94b6cb3346aa161398945a75a518306b34745665a059ee8c2ebf4695aad1de4a8d9b7f5e603ffedaec1252714bde1cf8d779c4ba3509cccd3c766afd0ea783cb5489b289c6291ffc9e6f8d214bc131e509bd7a2611a54847af130cf9f1d2a464e242dbc53d39cd02b4af44b251ed019cbca2b453ddd0314291b91b81982b6f0090537382c78b77013d926787e3db4bebe25f41bd28f7e7eca3a49ce93d43417ad7b8c3f83edb96a1c35af32c4d968c505cd9eead0164c7858b8930fb5328511b03d8d4be2d7eabf9158447b2f929ac641c814a52e8d0585c94aea2f299dbf7d7c6e3fc98a2dd441c32a33ecce7d4cdc3dad6b13723f153605da6f38f5ac58567d99d89cda2a46bd460bafbb2b69c42fbd13a5b67c4a00fd8dc88ac7c359abc9b6fdddb296054f8702d09ee4a62fcdd43b7301ff110cc6d1bcd13620fcc607ff1277c9f66f17d098312c7e17a68486401678a3f266ab4e4fbbc615faa06d9a5e40b19c51b3025f9744196b3b9cb96461ceb5644405484328ca22e831935b981dd27ae232aba6a9a2a3171e0a9ac7216f89fb88fb75c07b5c7bc4a913e1ba387b4e8d0d8d9feac84c2bf205bfb9e2336b8fb310a00824966c5f96178acfc4841782f2f93643e0d68ea557c3e04c4d89889495438f700eecd267f77e4e65a9ebeac3a5183193eb631426478caae62ec4c3750c33763376c43809664a20b9bdfd755cf582c4ba8ab2dc0c218345f9d01dcc7dc4761f99852204ae2281a3af8346654b9fceb2ae2ee96794036d46e2e11f6b902b0e9d64281fe21aff9974001b8a61cf1f5ad84bfbd1ce7ac771d3d7b045124182738049c7c483c2fb4e10a7e24d13c9abe1693106b0df51c9794be3841155eb33d7ddad5419fc7e8b881c94a3696d0241c7372f3b34a56460294d1fff147d25b6a2e324600cfa9b2e18e988cae625a214c3df26fb2266ad942094f8057c758e06584d5d3bb04176286a0b3546ede470fe99ad1ccee79cbdb5cc3e8652bb90478dddf0c0a8a63be3cb6c00a762dfad4125b7daea0df0801966b3cd37436bd7404839dd08e48a73291c45728816e6c9a7dd4aa303be12b8895d8968bea426090e4548457ed3b2b5d1d5ce1e0c2b494b033033fc43a393014f64a09bfc917f3f3ed4eae67e4b34079f0d6425e62c02497eb4d9fc2ae071bd68848e3f4dc168a5d8c342ba7726314f6bb67b6cbb32b9df61e3adab8633e4ad25de4df0821be8d6ec74a275187203a7d49e77c173c2429b87ed7dde97cf3c85cd292d6ef933faf7eee7b9823c3ba846a24414a2381641655d8b3a30e8e910c8091d45e4e199b3ba342b9d6649187e439190160d9e8d2fd10b583331e2d665afb2b129b4b3143bd41ecada816ce931efda26c82995240eb8f7958d522aa15cab66ec94aec5087f3cc9a6339c2ec17ff08240eca4a43693c7cac862feb4eed6afb3a5c5f54b4949cc5a00dca86f0d27cac3160c086c50327949a0e8e240ef38dd20f4b03152d174234ab12656025759acf644ad31236994df7e20c02f519716fbcaaf0bbc760004a82d5abc713dfc8e8e06c263fabe683452b630b03611da4f2fa90e3c3be6f0c5a4712e6ea0d5219e1dc516dcc7223667d52d996482a8bc1a19b2685d0a2faf0e576327e615921e97f4067e3c14794a925b987c4a07edf943b1833abc64cde0d33df2705d27694048b144af575c3a459ce9110f009a0d7619656bff353e98b028e3be6c36963db02aa3cf4dd678ed97282c6dfcbe95730f82bf65d91d3b9463e83829714a1298b94023b31a01fbc3d89ef6991c12b2961df748e980ff98f195eb73fe5eac660a5f3b5519c064447aa624d4e4bab16e54ad3453df1a3360179a0089ebb81ab4f72e35db9fec063b905ca7c76e6b984312c0662eddfb2fe723c6fbe74ef0729f7a5ec5bf1e8a5a40ca282f1aedd489bdf31eb51a89514b7acc02683b6716d78223e24af681ba59ef4f321b3da491daeed92cdbd00db1a178809245c7cc39beffe1ca27458b3d44e6eae7b110f7aad348fde3cd09aed782574076f53f204aab2b8da8c3d6ca4a861db056f21d5676fd3d63147a2a2f1afcc30cd26a78d8ff6d35b15213ec2be6ab8e68642c92484bfa709b31e2f17cb5312d1db60f29c1fffea6288e5b41205b6bed7b237e4579ed32d8a044c51a744b236749f295c7512ebd9f857347c865f738a842efc6634da090d7966ca845b0b59773e99a30efa01103bec0f4fa1ede71396d250907d2c8470fa38bdafec60bebe3d7aa18ac8848f35bfdfa2936a6f11cfd2dcd53f621c251a65e9dbdc09750077443e7292ac44db3be69953a6c76b9a6fe641bd0021e4d456f0cfc83ae6a234bc2c29c2d129c224e4fc0c7c712cf9b7848f6da8248ee6aeac6de026645b5d045d241e09ad755170ed73885087f5bbf35d67750d1c7b5465930f329c66dd2eb475f9eff7f3f861e70e7a7104a5fc09f94d0b85913919e80f18f4d4d80806707820ad71bc6dbd1009f5cfab7035b7441745ffdd835dc61125f4eefbeb58be34b87bf050e5d26d3baa2a307d44ad61f2cf14bfae8ca68dc9c6e301e4f8973dc604bbeae3ba6d3836a87f560ed1832439403d174377c026e937338fca49e3fe57468c77c41bf4e10c2c68aeffcf6c4667c23</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-up">      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-up">密码是我的 FZOJ 注册日期</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 多项式 </tag>
            
            <tag> 下降幂多项式 </tag>
            
            <tag> FZOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP 2021 游记</title>
      <link href="/2021/NOIP-2021/"/>
      <url>/2021/NOIP-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="noip-2021-游记">NOIP 2021 游记</h1><p>AFO 了 /ll。</p><span id="more"></span><h2 id="day">Day ?</h2><p>得知还在芜湖一中，好评。</p><h2 id="day-0">Day 0</h2><p>联考摆大烂。</p><h2 id="day-1">Day 1</h2><p>先看一眼 T1 发现傻逼题，看一眼 T2 一点思路都没有，看一眼 T3 一点思路都没有，看一眼 T4 感觉很吃屎。</p><p>切完 T1 发现前面 wc 已经切到 T3 了，感觉很慌，于是看了两眼 T3 发现可以变成差分交换，然后又自闭了很久，还是没盯出来，滚回去看 T2。</p><p>又看了两眼发现 T2 傻逼 DP，10 min 写完过样例。</p><p>这个时候已经 1.5h 了，决定先写个 T3 暴力，写完之后发现 T3 一定是单谷的，后悔没早打暴力。然后推了一下式子，发现 DP 只用记录 <span class="math inline">\(\sum a\)</span>，从小到大决策就行。因为人傻逼，所以只会 <span class="math inline">\(\operatorname{O}(n^2V)\)</span>。由于人很傻逼，写了 1h 左右，中途手算答案范围少乘一个 <span class="math inline">\(n\)</span> 以为不用开 <code>long long</code>（伏笔）。以为最后一个包是拼包，想了一个奇怪的 <span class="math inline">\(\operatorname{O}(nV^3)\)</span> 做法，写的时候发现爆 <code>int</code> 了于是把改掉了，最后都和暴力拍上了，感觉很稳（伏笔）。</p><p>最后只有 1h 感觉很危，前三题好像难度都不高，我可能要被大码农题区分了（悲）。于是码码码，40 min 写了个 <span class="math inline">\(32\)</span>，但是把所有部分分都写在同一个 <code>while</code> 循环里（伏笔）。</p><p>出来发现 T3 没有切穿，感觉还行。</p><p>晚上民间测试数据测一发，发现 T3 有个地方初始化成 <span class="math inline">\(10^9\)</span> 于是挂成 <span class="math inline">\(84\)</span> 力（悲）。发现 T4 就算 “不存在直行道路与互通道路” 我也每次开了 <span class="math inline">\(\operatorname{O}(nm)\)</span> 的 <code>vector</code>，于是就全 完 了（绝望）。</p><p>估分：<span class="math inline">\(100+100+84+24=308\)</span>。疯狂挂 <span class="math inline">\(24\)</span> 分（悲）。</p><h2 id="day-2">Day ?</h2><p>出分了，发现 T3 数据相当水，有两个老哥直接爆搜过了。只能看省选了（悲）。</p><h2 id="day-3">Day ?</h2><p>没有 1/3，爽了。</p>]]></content>
      
      
      <categories>
          
          <category> 游记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>「Codeforces gym 102268K」Knowledge 题解</title>
      <link href="/2021/cfgym-102268-K/"/>
      <url>/2021/cfgym-102268-K/</url>
      
        <content type="html"><![CDATA[<p>奥妙重重的结论题。</p><span id="more"></span><p><a href="https://codeforces.com/gym/102268/problem/K">题目链接</a></p><p>顺着官方题解去找，能在 wiki 上找到<a href="https://en.wikipedia.org/wiki/Tetrahedral_symmetry">一个</a>叫「四面体空间对称群」的东西。发现有一堆意味不明的申必记号，但还是有一张人能看懂的图。</p><p style="text-align: center;"><img src="/2021/cfgym-102268-K/Tetrahedral_group.svg" title="fig:" alt="A cycle graph of the alternating group A4, which describes the rotations of the tetrahedron."></p><p style="text-align: center;"><a href="https://commons.wikimedia.org/w/index.php?curid=1188487">By Debivort, CC BY-SA 3.0</a></p><p>如果你立体几何好的话，你就会发现把其中一个旋转 <span class="math inline">\(180^\circ\)</span> 的操作当作本题的 <span class="math inline">\(\texttt{a}\)</span>，把其中一个旋转 <span class="math inline">\(120^\circ\)</span> 的操作当作本题的 <span class="math inline">\(\texttt{b}\)</span>，就是本题在干的事：（以下叙述以左上角的 <span class="math inline">\(180^\circ\)</span> 旋转为 <span class="math inline">\(\texttt{a}\)</span>，以绕 <span class="math inline">\(z\)</span> 轴旋转 <span class="math inline">\(120^\circ\)</span> 为 <span class="math inline">\(\texttt{b}\)</span>）</p><p><span class="math inline">\(\texttt{aa}\)</span> 和 <span class="math inline">\(\texttt{bbb}\)</span> 显然是转回去了，模拟一下 <span class="math inline">\(\texttt{ababab}\)</span> 也会转回去，也就是说同一个等价类可以任意加入/删除这三个字符串，这是和我们的要求等价的！</p><p>同时这两个操作是可以组合成任意一种图中的操作的，手动模拟一下就能发现（以右上角开始顺时针描述各个四面体的状态，分别为：<span class="math inline">\(\texttt{a},\texttt{babb},\texttt{bbab},\texttt{ab},\texttt{bb},\texttt{bab},\texttt{abb},\texttt{ba},\texttt{aba},\texttt{b},\texttt{bba}\)</span>，还有正中间的状态为 <span class="math inline">\(\varnothing\)</span>）。</p><p>然后就找一下每个等价类加上 <span class="math inline">\(\texttt{a}\)</span> 和 <span class="math inline">\(\texttt{b}\)</span> 会转移到哪个等价类，做一遍矩阵快速幂，就能得到长度为 <span class="math inline">\(n\)</span> 的字符串中每个等价类的大小。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">12</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> Mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-comment">// 0     1  2  3   4   5   6    7    8    9    10    11</span><br><span class="hljs-comment">// null  a  b  ab  ba  bb  aba  abb  bab  bba  babb  bbab</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> tran[N][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;,  &#123;<span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;,  &#123;<span class="hljs-number">2</span>, <span class="hljs-number">8</span>&#125;,  &#123;<span class="hljs-number">9</span>, <span class="hljs-number">0</span>&#125;,<br>                        &#123;<span class="hljs-number">3</span>, <span class="hljs-number">9</span>&#125;, &#123;<span class="hljs-number">8</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">7</span>, <span class="hljs-number">10</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">11</span>&#125;, &#123;<span class="hljs-number">11</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">10</span>, <span class="hljs-number">6</span>&#125;&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Matrix</span> &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-type">int</span> a[N][N];<br>  <span class="hljs-keyword">friend</span> Matrix <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Matrix &amp;a, <span class="hljs-type">const</span> Matrix &amp;b);<br>  <span class="hljs-keyword">friend</span> Matrix <span class="hljs-keyword">operator</span>^(Matrix a, <span class="hljs-type">int</span> b);<br>  <span class="hljs-built_in">Matrix</span>() &#123; <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(a)); &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> n;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>  <span class="hljs-type">int</span> now = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isalpha</span>(c))<br>      c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;a&#x27;</span>)<br>      now = tran[now][<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">else</span><br>      now = tran[now][<span class="hljs-number">1</span>];<br>  &#125;<br>  <span class="hljs-type">int</span> x;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>  Matrix a;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)<br>    ++a.a[i][tran[i][<span class="hljs-number">0</span>]], ++a.a[i][tran[i][<span class="hljs-number">1</span>]];<br>  Matrix ans;<br>  ans = a ^ x;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans.a[<span class="hljs-number">0</span>][now]);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>Matrix <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Matrix &amp;a, <span class="hljs-type">const</span> Matrix &amp;b) &#123;<br>  Matrix ans;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; N; ++k) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; N; ++j) &#123;<br>        ans.a[i][j] = (ans.a[i][j] + <span class="hljs-number">1ll</span> * a.a[i][k] * b.a[k][j]) % Mod;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br>Matrix <span class="hljs-keyword">operator</span>^(Matrix a, <span class="hljs-type">int</span> b) &#123;<br>  Matrix ans;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)<br>    ans.a[i][i] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (b) &#123;<br>    <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) ans = ans * a;<br>    a = a * a;<br>    b &gt;&gt;= <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 群论 </tag>
            
            <tag> 矩阵快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>咕咕咕</title>
      <link href="/2021/gugugu/"/>
      <url>/2021/gugugu/</url>
      
        <content type="html"><![CDATA[<p>在长时间的咕咕咕后，终于能稳定更新了（主要是机房终于装上 Ubuntu 了）！</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GDOI 2021 普及组 Day2 T2 序列 题解</title>
      <link href="/2021/gdoi2021-pj-d2t2/"/>
      <url>/2021/gdoi2021-pj-d2t2/</url>
      
        <content type="html"><![CDATA[<p>你管这叫普及？</p><span id="more"></span><p>设 <span class="math inline">\(f(n,i,j)\)</span> 为值取 <span class="math inline">\(0\sim n\)</span>，最小的两个数最高的不相同的位是 <span class="math inline">\(i\)</span>，最大的两个数最高的不相同的位是 <span class="math inline">\(j\)</span> 的方案数。</p><p>主要转移是考虑最大的 <span class="math inline">\(w:2^w&lt;n\)</span> 将其分为 <span class="math inline">\(f(2^w-1,i,k)\times f(n-2^w,l,j)\)</span> 容易证明 <span class="math inline">\(k\neq l\)</span> 时这样不可能异或出 <span class="math inline">\(0\)</span>，考虑 <span class="math inline">\(k=l\)</span> 时，可以证明对于一个状态，前两个数/后两个数的取值是等概率的，故这四个数异或为 <span class="math inline">\(0\)</span> 的概率是 <span class="math inline">\(\frac{1}{2^l}\)</span> 将其减掉即可。</p><p>考虑一些特殊情况：只有两个数一个最高位 <span class="math inline">\(0\)</span> 另一个 <span class="math inline">\(1\)</span>；最高位第一个是 <span class="math inline">\(0\)</span> 后面全是 <span class="math inline">\(1\)</span>；最高位最后一个是 <span class="math inline">\(1\)</span> 前面全是 <span class="math inline">\(0\)</span>；最高位全是 <span class="math inline">\(0\)</span>；最高位全是 <span class="math inline">\(1\)</span>，简单讨论即可。</p><p>考虑可能没有逆元，一种简单的方式是 <span class="math inline">\(g(n,i,j)=\frac{f(n,i,j)}{2^j}\)</span>，于是减掉的就是 <span class="math inline">\(g(2^w-1,i,j)\)</span>。<span class="math inline">\(g\)</span> 的转移和 <span class="math inline">\(f\)</span> 类似，注意到所有有用的 <span class="math inline">\(g\)</span> 的状态 <span class="math inline">\(n\)</span> 都是 <span class="math inline">\(2^w-1\)</span> 的形式，观察转移发现现在除以 <span class="math inline">\(2\)</span> 的幂时都在对一个更大的幂除上小的幂，可以直接做。</p><p>时间复杂度 <span class="math inline">\(\operatorname{O}(\log^4n)\)</span>。</p><p>参考实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">125</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lg2</span><span class="hljs-params">(ll n)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-number">63</span> - __builtin_clzll(n); &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(ll n, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> now)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">g</span><span class="hljs-params">(ll n, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> now)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inc</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a, <span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dec</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a, <span class="hljs-type">int</span> b)</span></span>;<br><br><span class="hljs-type">int</span> _f[N][<span class="hljs-number">60</span>][<span class="hljs-number">60</span>], _g[N][<span class="hljs-number">60</span>][<span class="hljs-number">60</span>];<br>std::map&lt;ll, <span class="hljs-type">int</span>&gt; mp;<br><span class="hljs-type">int</span> tot;<br><span class="hljs-type">int</span> pw2[<span class="hljs-number">120</span>];<br>ll n;<br><span class="hljs-type">int</span> Mod;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld %d&quot;</span>, &amp;n, &amp;Mod);<br>  pw2[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">120</span>; ++i)<br>    pw2[i] = (pw2[i - <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">1</span>) % Mod;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">120</span>; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">60</span>; ++j) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">60</span>; ++k) &#123;<br>        _f[i][j][k] = _g[i][j][k] = <span class="hljs-number">-1</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  mp[n] = tot = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> ans = (n + <span class="hljs-number">1</span>) % Mod;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">60</span>; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">60</span>; ++j) &#123;<br>      ans = (ans + <span class="hljs-built_in">f</span>(n, i, j, <span class="hljs-number">1</span>)) % Mod;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inc</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a, <span class="hljs-type">int</span> b)</span> </span>&#123; (a += b) &gt;= Mod ? a -= Mod : a; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dec</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a, <span class="hljs-type">int</span> b)</span> </span>&#123; (a -= b) &lt; <span class="hljs-number">0</span> ? a += Mod : a; &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(ll n, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> now)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ((<span class="hljs-number">1ll</span> &lt;&lt; std::<span class="hljs-built_in">max</span>(l, r)) &gt; n) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (_f[now][l][r] != <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> _f[now][l][r];<br>  <span class="hljs-type">int</span> w = <span class="hljs-built_in">lg2</span>(n);<br>  ll L = (<span class="hljs-number">1ll</span> &lt;&lt; w) - <span class="hljs-number">1</span>, R = n - (<span class="hljs-number">1ll</span> &lt;&lt; w);<br>  <span class="hljs-keyword">if</span> (!mp.<span class="hljs-built_in">count</span>(L)) mp[L] = ++tot;<br>  <span class="hljs-keyword">if</span> (!mp.<span class="hljs-built_in">count</span>(R)) mp[R] = ++tot;<br>  <span class="hljs-type">int</span> nL = mp[L], nR = mp[R];<br>  <span class="hljs-type">int</span> ans = (<span class="hljs-built_in">f</span>(L, l, r, nL) + <span class="hljs-built_in">f</span>(R, l, r, nR)) % Mod;<br>  <span class="hljs-keyword">if</span> (l == w &amp;&amp; r == w) <span class="hljs-built_in">inc</span>(ans, <span class="hljs-number">1ll</span> * pw2[w] * ((R + <span class="hljs-number">1</span>) % Mod) % Mod);<br>  <span class="hljs-keyword">if</span> (l == w) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> d = <span class="hljs-number">0</span>; d &lt; w; ++d)<br>      <span class="hljs-built_in">inc</span>(ans, <span class="hljs-number">1ll</span> * pw2[w] * <span class="hljs-built_in">f</span>(R, d, r, nR) % Mod);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (r == w) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> d = <span class="hljs-number">0</span>; d &lt; w; ++d)<br>      <span class="hljs-built_in">inc</span>(ans, <span class="hljs-number">1ll</span> * <span class="hljs-built_in">f</span>(L, l, d, nL) * ((R + <span class="hljs-number">1</span>) % Mod) % Mod);<br>  &#125;<br>  <span class="hljs-type">int</span> s1 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> d1 = <span class="hljs-number">0</span>; d1 &lt; w; ++d1)<br>    <span class="hljs-built_in">inc</span>(s1, <span class="hljs-built_in">f</span>(L, l, d1, nL));<br>  <span class="hljs-type">int</span> s2 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> d2 = <span class="hljs-number">0</span>; d2 &lt; w; ++d2)<br>    <span class="hljs-built_in">inc</span>(s2, <span class="hljs-built_in">f</span>(R, d2, r, nR));<br>  <span class="hljs-built_in">inc</span>(ans, <span class="hljs-number">1ll</span> * s1 * s2 % Mod);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> d = <span class="hljs-number">0</span>; d &lt; w; ++d) &#123;<br>    <span class="hljs-built_in">dec</span>(ans, <span class="hljs-number">1ll</span> * <span class="hljs-built_in">f</span>(L, l, d, nL) * <span class="hljs-built_in">f</span>(R, d, r, nR) % Mod);<br>    <span class="hljs-built_in">inc</span>(ans, <span class="hljs-number">1ll</span> * <span class="hljs-built_in">g</span>(L, l, d, nL) * <span class="hljs-built_in">f</span>(R, d, r, nR) % Mod * (pw2[d] - <span class="hljs-number">1</span>) % Mod);<br>  &#125;<br>  <span class="hljs-keyword">return</span> _f[now][l][r] = ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">g</span><span class="hljs-params">(ll n, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> now)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ((<span class="hljs-number">1ll</span> &lt;&lt; std::<span class="hljs-built_in">max</span>(l, r)) &gt; n) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (_g[now][l][r] != <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> _g[now][l][r];<br>  <span class="hljs-type">int</span> w = <span class="hljs-built_in">lg2</span>(n);<br>  ll L = (<span class="hljs-number">1ll</span> &lt;&lt; w) - <span class="hljs-number">1</span>, R = n - (<span class="hljs-number">1ll</span> &lt;&lt; w);<br>  <span class="hljs-keyword">if</span> (!mp.<span class="hljs-built_in">count</span>(L)) mp[L] = ++tot;<br>  <span class="hljs-keyword">if</span> (!mp.<span class="hljs-built_in">count</span>(R)) mp[R] = ++tot;<br>  <span class="hljs-type">int</span> nL = mp[L], nR = mp[R];<br>  <span class="hljs-type">int</span> ans = (<span class="hljs-built_in">g</span>(L, l, r, nL) + <span class="hljs-built_in">g</span>(R, l, r, nR)) % Mod;<br>  <span class="hljs-keyword">if</span> (l == w &amp;&amp; r == w) <span class="hljs-built_in">inc</span>(ans, pw2[w]);<br>  <span class="hljs-keyword">if</span> (l == w) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> d = <span class="hljs-number">0</span>; d &lt; w; ++d)<br>      <span class="hljs-built_in">inc</span>(ans, <span class="hljs-number">1ll</span> * pw2[w] * <span class="hljs-built_in">g</span>(R, d, r, nR) % Mod);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (r == w) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> d = <span class="hljs-number">0</span>; d &lt; w; ++d)<br>      <span class="hljs-built_in">inc</span>(ans, <span class="hljs-number">1ll</span> * <span class="hljs-built_in">f</span>(L, l, d, nL) * (((R + <span class="hljs-number">1</span>) &gt;&gt; w) % Mod) % Mod);<br>  &#125;<br>  <span class="hljs-type">int</span> s1 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> d1 = <span class="hljs-number">0</span>; d1 &lt; w; ++d1)<br>    <span class="hljs-built_in">inc</span>(s1, <span class="hljs-built_in">f</span>(L, l, d1, nL));<br>  <span class="hljs-type">int</span> s2 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> d2 = <span class="hljs-number">0</span>; d2 &lt; w; ++d2)<br>    <span class="hljs-built_in">inc</span>(s2, <span class="hljs-built_in">g</span>(R, d2, r, nR));<br>  <span class="hljs-built_in">inc</span>(ans, <span class="hljs-number">1ll</span> * s1 * s2 % Mod);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> d = <span class="hljs-number">0</span>; d &lt; w; ++d) &#123;<br>    <span class="hljs-built_in">dec</span>(ans, <span class="hljs-number">1ll</span> * <span class="hljs-built_in">f</span>(L, l, d, nL) * <span class="hljs-built_in">g</span>(R, d, r, nR) % Mod);<br>    <span class="hljs-built_in">inc</span>(ans, <span class="hljs-number">1ll</span> * <span class="hljs-built_in">g</span>(L, l, d, nL) * <span class="hljs-built_in">g</span>(R, d, r, nR) % Mod * (pw2[d] - <span class="hljs-number">1</span>) % Mod);<br>  &#125;<br>  <span class="hljs-keyword">return</span> _g[now][l][r] = ans;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数位DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PKUSC 2021 游记</title>
      <link href="/2021/pkusc-2021/"/>
      <url>/2021/pkusc-2021/</url>
      
        <content type="html"><![CDATA[<p>我这种模拟赛日常垫底的傻逼竟然能去 PKUSC！!1</p><span id="more"></span><h1 id="day-0">Day 0</h1><p>9:21 的火车，11:21 到余姚，由于余姚的同学正好从 asdfz 回余姚，余姚中学的教练安排了一辆车接我们，好评。</p><p>听说卷怪在宾馆卷疯了，只有我在摸鱼<img src="https://啧.tk/kk"></p><p>感觉一趟下来要胖三斤！</p><h1 id="day-1">Day 1</h1><p>报到不写了，试机一题不会，感觉要凉</p><p>下午开题，想了一下发现 T1 傻逼矩乘，T2 感觉是 nb 数据结构，T3 看完了题感觉是爆搜+大模拟。</p><p>13:00 左右过了 T1（题意有个地方不清楚卡了好久）</p><p>想了一下感觉 T2 不太可做，去想 sub2，完全没有想到楼房重建，感觉找到前面的第一个比它大的，后面第一个比它大的和目前全局修改次数就可以三维数点，然后对一维离线就是二维数点，空间是 <span class="math inline">\(\operatorname{O}(n\log^2n)\)</span> 的，但数据水动态开点线段树数组开小也过了。</p><p>然后是码码码，最后 17:20 过了 T3 的 sub1，sub2 来不及了，弃了。</p><p><span class="math inline">\(100+46+38=184\)</span>，出来感觉是大众分，很慌。</p><p>发现 yxy 切了 T2，wd T3 sub12，真的膜拜。</p><p>wc 和 mwr 好像是 146，zjf 切了 T2 但到最后都没调出来，只有 107，真的惨。</p><p>赛后发现坐我右边的老哥好像就是 Fee_cle6418，Orz</p><p>晚上听说大众分 146，感觉还行。</p><h1 id="day-2">Day 2</h1><p>上午参观了 NOI 考场，但这和根本进不了 NOI 的我有啥关系！<img src="https://啧.tk/kk"></p><p>下午开题，发现 T1 好像是简单化式子。</p><p>然后我就整了个枚举断边，统计 <span class="math inline">\(siz(n-siz)\)</span> 的所有变化的诡异东西。</p><p>要维护一车信息，包括子树 <span class="math inline">\(siz\)</span> 的和，平方和，立方和之类的毒瘤玩意，统计答案有一车细节，必须在草稿纸上搞清楚。</p><p>貌似 14:00 才过 T1 心态爆炸。</p><p>发现左边的老哥文件夹名是 <code>dblark</code>，感觉这名字水群时见过（</p><p>T2 感觉有 nb 贪心，先写了个假的 <span class="math inline">\(n^2\)</span> 贪心，发现前三个包数据水的怕人，直接过了，sub4 WA 了，想了一下感觉不会就溜了。貌似有 23 分？</p><p>T3 先手推积分算出了 <span class="math inline">\(n=3\)</span>，后面的时间一直在手推 <span class="math inline">\(n=4\)</span> 但是一直 WA 样例，非常自闭。最后只有 15（有一个测试点答案为 0）</p><p>感觉垫底了。</p><p>出来一问 zjf 和 wd 都秒了 T2，非常自闭。</p><p>后来发现 yxy wc mwr 都没过，感觉还行。</p><p><span class="math inline">\(100+23+15=138\)</span>，可能只是大众分滚粗了。</p><p>听说 wd 虐场了，听说我和 zjf 总分一个分。</p><p>后来发现填 <span class="math inline">\(a_i\bmod c\)</span> 是对的，但我根本没有想到最后一定是用完一个后缀，sb 型选手石锤了。</p><p>晚上听说真的是大众分滚粗。</p><p>晚上还在和 wd 打 Google Code Jam，发现 ABC 三个傻逼题，然后就 T-shirt 了，wd 竟然没切 C，痛失 T-shirt？</p><h1 id="day-3">Day 3</h1><p>一大早发现 wd 免面试，只有我没准备面试还在 Google Code Jam，小丑竟是我自己。</p><p>听说 wc 没进面试，惨。</p><p>听说有人两天都严格低于 wc 也进面试了，惨。</p><p>听教练说我和 zjf 都是没有免面试中比较高的，感觉还行。</p><p>发现我和 zjf 面试时间非常迟，是每一轮的倒数第二个。</p><p>我第一个面试是蒋婷婷教授，她好像前几天才来过我们学校。</p><p>先自我介绍，然后问了些正常问题，比如这次考的怎么样，文化课怎么样，为什么来 pku（还问了我前几天她来 asdfz 时我在不在）。</p><p>听 zjf 说我第二个面的问了些比较奇怪的问题。</p><p>等了非常久，中间面了 <span class="citation" data-cites="yijan">@yijan</span> 神仙。</p><p>最后问了我的优缺点，喜欢什么理工类的书，还问什么如何看待钻研一个问题不一定能获得和精力成正比的回报，将来如果高端 IT 人才饱和了你会怎么选择之类的问题。</p><p>感觉很凉。</p><p>下午 zyy 讲题。(题不全是我出的.jpg)</p><p>发约了，发现我校除了 wc 都一等约了。</p><p>签了张写着不平等条约的废纸.jpg</p><p>要么没学上要么去 pku 了/mgx</p>]]></content>
      
      
      <categories>
          
          <category> 游记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>yhx-12243 的 NTT 到底写了些什么（详细揭秘）</title>
      <link href="/2021/yhx-12243-NTT/"/>
      <url>/2021/yhx-12243-NTT/</url>
      
        <content type="html"><![CDATA[<p>这是 yhx-12243 的 NTT</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> &amp; <span class="hljs-title">reduce</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;x)</span> </span>&#123;<span class="hljs-keyword">return</span> x += x &gt;&gt; <span class="hljs-number">31</span> &amp; mod;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> &amp; <span class="hljs-title">neg</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;x)</span> </span>&#123;<span class="hljs-keyword">return</span> x = (!x - <span class="hljs-number">1</span>) &amp; (mod - x);&#125;<br><span class="hljs-function">u64 <span class="hljs-title">PowerMod</span><span class="hljs-params">(u64 a, <span class="hljs-type">int</span> n, u64 c = <span class="hljs-number">1</span>)</span> </span>&#123;<span class="hljs-keyword">for</span> (; n; n &gt;&gt;= <span class="hljs-number">1</span>, a = a * a % mod) <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>) c = c * a % mod; <span class="hljs-keyword">return</span> c;&#125;<br><span class="hljs-keyword">namespace</span> poly_base &#123;<br><span class="hljs-type">int</span> l, n; u64 iv; vec w2;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n = N, <span class="hljs-type">bool</span> dont_calc_factorials = <span class="hljs-literal">true</span>)</span> </span>&#123;<br><span class="hljs-type">int</span> i, t;<br><span class="hljs-keyword">for</span> (inv[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>, i = <span class="hljs-number">2</span>; i &lt; n; ++i) inv[i] = <span class="hljs-built_in">u64</span>(mod - mod / i) * inv[mod % i] % mod;<br><span class="hljs-keyword">if</span> (!dont_calc_factorials) <span class="hljs-keyword">for</span> (*finv = *fact = i = <span class="hljs-number">1</span>; i &lt; n; ++i) fact[i] = (u64)fact[i - <span class="hljs-number">1</span>] * i % mod, finv[i] = (u64)finv[i - <span class="hljs-number">1</span>] * inv[i] % mod;<br>t = <span class="hljs-built_in">min</span>(n &gt; <span class="hljs-number">1</span> ? <span class="hljs-built_in">lg2</span>(n - <span class="hljs-number">1</span>) : <span class="hljs-number">0</span>, <span class="hljs-number">21</span>),<br>*w2 = <span class="hljs-number">1</span>, w2[<span class="hljs-number">1</span> &lt;&lt; t] = <span class="hljs-built_in">PowerMod</span>(<span class="hljs-number">31</span>, <span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-number">21</span> - t));<br><span class="hljs-keyword">for</span> (i = t; i; --i) w2[<span class="hljs-number">1</span> &lt;&lt; (i - <span class="hljs-number">1</span>)] = (u64)w2[<span class="hljs-number">1</span> &lt;&lt; i] * w2[<span class="hljs-number">1</span> &lt;&lt; i] % mod;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; n; ++i) w2[i] = (u64)w2[i &amp; (i - <span class="hljs-number">1</span>)] * w2[i &amp; -i] % mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">NTT_init</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span> </span>&#123;n = <span class="hljs-number">1</span> &lt;&lt; (l = len), iv = mod - (mod - <span class="hljs-number">1</span>) / n;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DIF</span><span class="hljs-params">(<span class="hljs-type">int</span> *a)</span> </span>&#123;<br><span class="hljs-type">int</span> i, *j, *k, len = n &gt;&gt; <span class="hljs-number">1</span>, R, *o;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; l; ++i, len &gt;&gt;= <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> (j = a, o = w2; j != a + n; j += len &lt;&lt; <span class="hljs-number">1</span>, ++o)<br><span class="hljs-keyword">for</span> (k = j; k != j + len; ++k)<br>R = (u64)*o * k[len] % mod, <span class="hljs-built_in">reduce</span>(k[len] = *k - R), <span class="hljs-built_in">reduce</span>(*k += R - mod);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DIT</span><span class="hljs-params">(<span class="hljs-type">int</span> *a)</span> </span>&#123;<br><span class="hljs-type">int</span> i, *j, *k, len = <span class="hljs-number">1</span>, R, *o;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; l; ++i, len &lt;&lt;= <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> (j = a, o = w2; j != a + n; j += len &lt;&lt; <span class="hljs-number">1</span>, ++o)<br><span class="hljs-keyword">for</span> (k = j; k != j + len; ++k)<br><span class="hljs-built_in">reduce</span>(R = *k + k[len] - mod), k[len] = <span class="hljs-built_in">u64</span>(*k - k[len] + mod) * *o % mod, *k = R;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">DNTT</span><span class="hljs-params">(<span class="hljs-type">int</span> *a)</span> </span>&#123;<span class="hljs-built_in">DIF</span>(a);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">IDNTT</span><span class="hljs-params">(<span class="hljs-type">int</span> *a)</span> </span>&#123;<br><span class="hljs-built_in">DIT</span>(a), std::<span class="hljs-built_in">reverse</span>(a + <span class="hljs-number">1</span>, a + n);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) a[i] = a[i] * iv % mod;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>它为什么跑这么快？DIT 和 DIF 在干啥？预处理的原根为何和大多数人的不一样？这篇文章将为你解开这一奥秘（</p><p>先来看 init 函数 <code>w2[1 &lt;&lt; t] = PowerMod(31, 1 &lt;&lt; (21 - t));</code> 为什么是 <span class="math inline">\(31\)</span>？</p><p>我们发现 <span class="math inline">\(31^{2^{23}}=1\)</span> 同时它模 <span class="math inline">\(998244353\)</span> 的阶是 <span class="math inline">\(2^{23}\)</span> 的倍数，也就是说它在进行 NTT 时和 <span class="math inline">\(3^{119}\)</span> 具有相似的性质，事实上，这里的确可以换为 <span class="math inline">\(3^{119}\)</span>。</p><p>平时我的写法都要预处理 <span class="math inline">\(21\)</span> 种原根的次幂，为什么这里只用处理一种原根呢？我们将 <span class="math inline">\(31\)</span> 改为 <span class="math inline">\(3^{119}\)</span> 输出一下这段代码预处理的原根前 <span class="math inline">\(8\)</span> 项，发现结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">1 911660635 372528824 488723995 929031873 373294451 628914303 661054123<br></code></pre></td></tr></table></figure><p>再来看平常写法预处理的原根：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">1: 1<br>2: 1 911660635<br>4: 1 372528824 911660635 488723995<br>8: 1 929031873 372528824 628914303 911660635 373294451 488723995 661054123<br></code></pre></td></tr></table></figure><p>我们发现对这一结果蝴蝶变换（二进制翻转）可以得到如下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">1: 1<br>2: 1 911660635<br>4: 1 911660635 372528824 488723995<br>8: 1 911660635 372528824 488723995 929031873 373294451 628914303 661054123<br></code></pre></td></tr></table></figure><p>我们发现 <span class="math inline">\(1\)</span> 是 <span class="math inline">\(2\)</span> 的前缀，<span class="math inline">\(2\)</span> 是 <span class="math inline">\(4\)</span> 的前缀……</p><p>经过冷静思考，我们发现这是显然的，蝴蝶变换是 <span class="math inline">\(0\)</span> 不动，偶数放左边，奇数放右边，分别进行少一位的蝴蝶变换，而根据 <span class="math inline">\(\omega_{2n}^{2i}=\omega_n^i\)</span> 所以它前一半就是对 <span class="math inline">\(\frac{n}{2}\)</span> 范围的原根做蝴蝶变换的结果。</p><p>代码在做什么也很好懂了，预处理出 <span class="math inline">\(g^{2^k}\)</span> 放在 <span class="math inline">\(2^{21-k}\)</span> 处（即蝴蝶变换后的结果），再递推得到其他结果（<span class="math inline">\(g^{2^j+2^k}=g^{2^j}\times g^{2^k}\)</span>，二进制翻转后也可以这样找每个为 <span class="math inline">\(1\)</span> 的位乘上）。</p><p>这样预处理原根有什么用？等下就知道了。</p><p>我们还要知道它的基本原理：DIT/DIF。在 rushcheyo 学长《转置原理及其应用》中我们了解到 DIT（decimation in time，按时域抽取）-FFT 可以将蝴蝶变换后的系数向量转化为点值向量； DIF（decimation in frequency，按频域抽取）-FFT 可以将系数向量转化为蝴蝶变换后的点值向量，二者互为置换。</p><p>我们发现可以用 DIF 实现 DFT，用 DIT 实现 IDFT 于是我们就不用进行蝴蝶变换了。</p><p>这是我写的一份朴素的 DIT/DIF-NTT：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init_Poly</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>; l &lt; (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>); l &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br>    gw[l] = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> gn = <span class="hljs-built_in">pow</span>(g, (Mod - <span class="hljs-number">1</span>) / (l &lt;&lt; <span class="hljs-number">1</span>), Mod);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; l; ++j) &#123;<br>      gw[l | j] = <span class="hljs-number">1ll</span> * gw[l | (j - <span class="hljs-number">1</span>)] * gn % Mod;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DIT</span><span class="hljs-params">(<span class="hljs-type">int</span> *A, <span class="hljs-type">int</span> lim, <span class="hljs-type">bool</span> flag)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>; l &lt; lim; l &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-type">int</span> *k = A;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i += (l &lt;&lt; <span class="hljs-number">1</span>), k += (l &lt;&lt; <span class="hljs-number">1</span>)) &#123;<br>      <span class="hljs-type">int</span> *x = k;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>, *g = gw + l; j &lt; l; ++j, ++x, ++g) &#123;<br>        <span class="hljs-type">int</span> o = <span class="hljs-number">1ll</span> * x[l] * *g % Mod;<br>        x[l] = (*x + Mod - o) % Mod, *x = (*x + o) % Mod;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-type">int</span> iv = <span class="hljs-built_in">pow</span>(lim, Mod - <span class="hljs-number">2</span>, Mod);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) A[i] = <span class="hljs-number">1ll</span> * A[i] * iv % Mod;<br>  std::<span class="hljs-built_in">reverse</span>(A + <span class="hljs-number">1</span>, A + lim);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DIF</span><span class="hljs-params">(<span class="hljs-type">int</span> *A, <span class="hljs-type">int</span> lim, <span class="hljs-type">bool</span> flag)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = lim / <span class="hljs-number">2</span>; l &gt;= <span class="hljs-number">1</span>; l &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-type">int</span> *k = A;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i += (l &lt;&lt; <span class="hljs-number">1</span>), k += (l &lt;&lt; <span class="hljs-number">1</span>)) &#123;<br>      <span class="hljs-type">int</span> *x = k;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>, *g = gw + l; j &lt; l; ++j, ++x, ++g) &#123;<br>        <span class="hljs-type">int</span> o = x[l];<br>        x[l] = <span class="hljs-number">1ll</span> * (*x + Mod - o) * *g % Mod, *x = (*x + o) % Mod;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的原根是最朴素的处理方式，而在进行 DIT/DIF 的时候，我们需要移动 <span class="math inline">\(\operatorname{O}(n\log n)\)</span> 次原根，而 yhx-12243 的 DIT/DIF 只需要移动 <span class="math inline">\(\operatorname{O}(n)\)</span> 次。</p><p>我们还发现一件神奇的事：yhx-12243 的 DIT 除了最外层 <span class="math inline">\(len\)</span> 的枚举顺序，似乎都在做 DIF，而 DIF 除了最外层 <span class="math inline">\(len\)</span> 的枚举顺序，似乎都在做 DIT！</p><p>这是一张 DIT-FFT 和 DIF-FFT 的示意图：</p><figure><img src="/2021/yhx-12243-NTT/1.png" alt="DIT-FFT 和 DIF-FFT 的示意图"><figcaption aria-hidden="true">DIT-FFT 和 DIF-FFT 的示意图</figcaption></figure><p>我们观察到 DIT-FFT 时如果对系数向量进行了蝴蝶变换，对 <span class="math inline">\((0,4)\)</span> 操作变为了对 <span class="math inline">\((0,1)\)</span> 操作，对 <span class="math inline">\((4,6)\)</span> 操作变为了对 <span class="math inline">\((1,3)\)</span> 操作，如果不对系数向量做蝴蝶变换并保持原先的操作呢（即仍然是对 <span class="math inline">\((0,4)\)</span> 操作，对 <span class="math inline">\((4,6)\)</span> 操作）？好像这样仍然会得到一个点值数组，这个点值数组正是蝴蝶变换后的点值数组！</p><p>原因是简单的：观察到蝴蝶变换的置换 <span class="math inline">\(A\)</span> 有：<span class="math inline">\(A^{-1}=A\)</span> 对于输入的系数数组做这一置换，运算过程不变，那么答案也应当也被做了该置换，于是 <span class="math inline">\(A\circ A=I\)</span>（输入），<span class="math inline">\(I\circ A=A\)</span>（答案）。</p><p>而原先要找的原根，也要对应的蝴蝶变换一下，这时候预处理蝴蝶变换后的原根的作用就体现出来了！</p><p>更为重要的是，对于一个 <span class="math inline">\(len\)</span> 覆盖到的范围，所用的原根次幂是相同的（例如第一层变换中的 <span class="math inline">\((0,4),(1,5),(2,6),(3,7)\)</span>，第二层变换中的 <span class="math inline">\((0,2),(1,3)\)</span> 和 <span class="math inline">\((4,6),(5,7)\)</span>）</p><p>以上内容可以手画一下长为 <span class="math inline">\(16\)</span> 的 DIT-FFT 来加深理解。</p><p>于是按从大到小枚举 <span class="math inline">\(len\)</span> 的顺序做 DIT，干的就是 DIF 的事，同理我们也可以得到按从小到大枚举 <span class="math inline">\(len\)</span> 的顺序做 DIF，干的就是 DIT 的事，而这种做法因为只需要移动 <span class="math inline">\(T(n+\frac{n}{2}+\frac{n}{4}+\cdots)=\operatorname{O}(n)\)</span> 次原根所以会比原先快一些。</p><p>下面进行一些<del>可能并不靠谱的</del>效率差异比较（以下三份代码都使用 <code>unsigned long long</code> 优化，即用 ull 存储中间结果减少取模）：</p><ol type="1"><li><a href="https://duck.ac/submission/17229">朴素 FFT</a> 279.439 ms，代码 2.43 KB</li><li><a href="https://duck.ac/submission/17228">DIT-DIF FFT</a> 212.99 ms，代码 2.93 KB</li><li><a href="https://duck.ac/submission/17226">优化 DIT-DIF FFT</a> 192.85 ms，代码 2.94 KB</li></ol><p>可见 DIT-DIF FFT 相较于朴素 FFT 相比，有较大优化，而优化 DIT-DIF FFT 相较于 DIT-DIF FFT 有小幅度优化，且代码不长，实现难度不大，不失为一种较好的简单 NTT 实现方式。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JOI Final 2021 题解</title>
      <link href="/2021/JOI-Final-2021/"/>
      <url>/2021/JOI-Final-2021/</url>
      
        <content type="html"><![CDATA[<p>JOI Final 2021 C-E 题的题解</p><span id="more"></span><h2 id="集合写真-group-photo">集合写真 / Group Photo</h2><p>考察符合条件的序列的性质，一定可以被分割成为 <span class="math inline">\(m\)</span> 个降序连续段：<span class="math inline">\((r_1\sim l_1);(r_2\sim l_2);(r_3\sim l_3);\cdots;(r_m\sim l_m)\)</span> 其中 <span class="math inline">\(l_1=1,l_2=r_1+1,r_3=l_2+1,\cdots,r_m=l_{m-1}+1\)</span> 不难证明不满足以上结构的排列都是非法的。</p><p>考虑调整次数即前后相对顺序改变的无序对个数，于是就可以 dp 了。</p><p>设 <span class="math inline">\(f_i\)</span> 表示 <span class="math inline">\(1\sim i\)</span> 调整成若干连续段的最小代价，考虑若最后一段是 <span class="math inline">\((i\sim j),j\le i\)</span> 那么对于一个 <span class="math inline">\(j\le k\le i\)</span> 和它产生贡献的有：(1) <span class="math inline">\(1\sim j-1\)</span> 中位置在它后面的数，(2) <span class="math inline">\(j\sim k-1\)</span> 中位置在它前面的数，(3) <span class="math inline">\(k+1\sim i\)</span> 中位置在它后面的数。</p><ol type="1"><li>和 (3) 都可以用树状数组简单处理，考虑将 (2) 转化为找在 <span class="math inline">\(j\)</span> 后面的 <span class="math inline">\(k\)</span>，于是用一个树状数组维护 <span class="math inline">\(1\sim i\)</span> 的位置，对每个 <span class="math inline">\(k\)</span> 加上位置在它后面的数的个数，这样会算多 <span class="math inline">\(j\sim k-1\)</span> 中位置在它后面的数，可以在 <span class="math inline">\(j\)</span> 向左移动时减掉，于是再用一个树状数组维护即可。</li></ol><p>时间复杂度 <span class="math inline">\(\operatorname{O}(n^2\log n)\)</span>。</p><p><a href="https://loj.ac/s/1079250">code</a></p><h2 id="ロボット-robot">ロボット / Robot</h2><p>考虑从 <span class="math inline">\(u\)</span> 到 <span class="math inline">\(v\)</span> 的一条颜色为 <span class="math inline">\(c\)</span> 长度为 <span class="math inline">\(w\)</span> 的边，设 <span class="math inline">\(S_{u,c}\)</span> 为以 <span class="math inline">\(u\)</span> 为端点所有颜色为 <span class="math inline">\(c\)</span> 的边的长度之和，要经过该边有两种策略：</p><ol type="1"><li>将该边改为一种不冲突的颜色，费用 <span class="math inline">\(w\)</span>。</li><li>将所有相同颜色的其他边改掉，费用 <span class="math inline">\(S_{u,c}-w\)</span>。</li></ol><p>发现 <span class="math inline">\(u\)</span> 是菊花的中心且每条边的颜色两两不同的情况下 1 策略是不合法的，但是此时 2 策略费用为 <span class="math inline">\(0\)</span> 故可以不考虑。</p><p>发现若有 <span class="math inline">\(u\to v\)</span>，<span class="math inline">\(v\to x\)</span> 两条边颜色都为 <span class="math inline">\(c\)</span> 在 <span class="math inline">\(u\to v\)</span> 选择 1 策略，<span class="math inline">\(v\to x\)</span> 选择 2 策略那么改变 <span class="math inline">\(u\to v\)</span> 边的颜色的代价会计算两边，考虑减去。</p><p>考虑建立虚点 <span class="math inline">\(v_c\)</span> 由 <span class="math inline">\(u\)</span> 向 <span class="math inline">\(v_c\)</span> 连边权为 <span class="math inline">\(0\)</span> 的边，<span class="math inline">\(v_c\)</span> 向 <span class="math inline">\(x\)</span> 连边权为 <span class="math inline">\(S_{v,c}-w\)</span> 的边，发现这样 <span class="math inline">\(u\to v_c\to x\)</span> 就是先 <span class="math inline">\(1\)</span> 策略再 <span class="math inline">\(2\)</span> 策略的代价。</p><p>于是跑 Dijkstra 即可。</p><p>最多每条边都建一个虚点，故点数是 <span class="math inline">\(\operatorname{O}(n+m)\)</span> 的，边数还是 <span class="math inline">\(\operatorname{O}(m)\)</span> 的，时间复杂度 <span class="math inline">\(\operatorname{O}((n+m)\log m)\)</span>。</p><p>注意：以下参考代码大量使用 STL 和 C++17 特性，常数巨大且需要注意编译选项。</p><p><a href="https://loj.ac/s/1079854">code</a></p><h2 id="ダンジョン-3-dungeon-3">ダンジョン 3 / Dungeon 3</h2><p>JOI 总是有很多考思维的数据结构题</p><p>首先有显然的贪心：对于一个位置 <span class="math inline">\(i\)</span> 找到他后面第一个价格小于它的位置 <span class="math inline">\(j\)</span>，二者距离为 <span class="math inline">\(L\)</span>，如果 <span class="math inline">\(L\le U\)</span>，那就将能量填到 <span class="math inline">\(L\)</span>，否则填满。</p><p>考虑 Subtask3 (<span class="math inline">\(T=N+1\)</span>) 每次找后面小于它的位置可以联想到离线询问然后倒着扫用单调栈维护价格，每次退栈（当前的价格优于之前的价格）就考虑是否能在当前位置买能量，替代后面的，当前要购买的能量是已知的，考虑要删去多少：</p><p>设当前位置到栈顶的距离为 <span class="math inline">\(L\)</span>，到栈顶下一个元素的距离为 <span class="math inline">\(L^\prime\)</span>，如果 <span class="math inline">\(L^\prime\le U\)</span> 删去全部 <span class="math inline">\(L^\prime-L\)</span>，否则 <span class="math inline">\(L^\prime-U\)</span> 是必须的，只能删去 <span class="math inline">\(L^\prime-L-(L^\prime-U)=U-L\)</span> 于是即为 <span class="math inline">\(\min(L^\prime,U)-L\)</span>。</p><p>最后栈顶还要加上 <span class="math inline">\(\min(L,U)\)</span>。</p><p>考虑用数据结构维护所有 <span class="math inline">\(U\)</span> 的值，我们发现我们要加的都是一条折线（一条斜线段在加上一条平行与 <span class="math inline">\(x\)</span> 轴的线段），我们发现这是可以用树状数组简单维护的，具体来说，设 <span class="math inline">\(l\)</span> 到 <span class="math inline">\(r\)</span> 是斜线段，斜率为 <span class="math inline">\(k\)</span>，截距为 <span class="math inline">\(b\)</span>，平行段的 <span class="math inline">\(y\)</span> 为 <span class="math inline">\(c\)</span>，我们用一个树状数组维护斜率，另一个树状数组维护截距，用差分的思想给 <span class="math inline">\(l\)</span> 斜率加上 <span class="math inline">\(k\)</span>，<span class="math inline">\(r+1\)</span> 斜率减去 <span class="math inline">\(k\)</span>，<span class="math inline">\(l\)</span> 截距加上 <span class="math inline">\(b\)</span>，<span class="math inline">\(r+1\)</span> 截距加上 <span class="math inline">\((r+1-l)\times k\)</span>。</p><p>然后考虑满分做法：设 <span class="math inline">\(f(S,T)\)</span> 为 <span class="math inline">\(S\)</span> 到 <span class="math inline">\(T\)</span> 的答案，我们找到距离 <span class="math inline">\(T\)</span> 小于等于 <span class="math inline">\(U\)</span> 的最小价格处 <span class="math inline">\(m\)</span> 发现只要经过 <span class="math inline">\(m\)</span> 就一定会在 <span class="math inline">\(m\)</span> 处买能量的，于是 <span class="math inline">\(f(S,T)=f(S,N+1)-f(m,N+1)+dis(m,T)\times b_m\)</span> 不用担心在 <span class="math inline">\(m\)</span> 之前买的能量没有用完的问题，这笔钱在 <span class="math inline">\(f(m,N+1)\)</span> 被减去又在后面被加上，但 <span class="math inline">\(f(S,N+1)\)</span> 中在 <span class="math inline">\(m\)</span> 前买的能量是一直有贡献的，用 ST 表找一下 <span class="math inline">\(m\)</span> 即可。</p><p>时间复杂度 <span class="math inline">\(\operatorname{O}(n\log n)\)</span>。</p><p><a href="https://loj.ac/s/1080357">code</a></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOI2021 集训队自选题 Gem Island 2</title>
      <link href="/2020/gem-island-2/"/>
      <url>/2020/gem-island-2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://loj.ac/p/3405">题目链接</a> <span id="more"></span></p><p>默认读者已经会了 ICPC2018 World Final Gem Island</p><p>下文的 <span class="math inline">\(a_i\)</span> 均表示分裂次数而非宝石个数</p><p>考虑期望的线性性，不难发现恰好有 <span class="math inline">\(k\)</span> 个人的分裂次数大于 <span class="math inline">\(i\)</span> 时，对答案有 <span class="math inline">\(\min(k,r)\)</span> 的贡献，即答案为</p><p><span class="math display">\[\sum\limits_{i\ge0}\sum\limits_{k\ge0}\binom{n}{k}\left([x^d]\left(\frac{1-x^{i+1}}{1-x}\right)^{n-k}\left(\frac{x^{i+1}}{1-x}\right)^k\right)\min(k,r)\]</span></p><p>首先可以把 <span class="math inline">\(\frac{1}{1-x}\)</span> 都提出来并拆开 <span class="math inline">\(\min\)</span> 分为两种情况</p><p>考虑求出了 <span class="math inline">\(i=0\)</span> 时的多项式 <span class="math inline">\(F(x)\)</span> 答案即为 <span class="math inline">\([x^d]\frac{\sum_{i\ge0}F(x^{i+1})}{(1-x)^n}\)</span> 求出了 <span class="math inline">\(F(x)\)</span> 就可以用高维前缀和（狄利克雷前缀和）把每一次的系数贡献到它所有倍数的答案，就求出了分子，由于 <span class="math inline">\([x^i] (1+x+x^2+\cdots)^n=\binom{n+i-1}{n-1}\)</span> 不难直接求出答案，于是只考虑 <span class="math inline">\(F(x)\)</span></p><p><span class="math display">\[\begin{aligned}F(x)=&amp;r\sum\limits_{k\ge r}\binom{n}{k}(1-x)^{n-k}x^k+\sum\limits_{k\le r}k\binom{n}{k}(1-x)^{n-k}x^k\\=&amp;r\left(\sum\limits_{k\ge 0}\binom{n}{k}(1-x)^{n-k}x^k-\sum\limits_{k\le r}\binom{n}{k}(1-x)^{n-k}x^k\right)+nx\sum\limits_{k\le r}\binom{n-1}{k-1}(1-x)^{(n-1)-(k-1)}x^{k-1}\\=&amp;r-r\sum\limits_{k\le r}\binom{n}{k}(1-x)^{n-k}x^k+nx\sum\limits_{k\le r-1}\binom{n-1}{k}(1-x)^{n-1-k}x^k\end{aligned}\]</span></p><p>不难发现化为了同一种问题，另外，其中常数项 <span class="math inline">\(r\)</span> 可以直接去掉，因为常数项都是不贡献到答案的，于是答案为</p><p><span class="math display">\[-r\sum\limits_{k\le r}\binom{n}{k}(1-x)^{n-k}x^k+nx\sum\limits_{k\le r-1}\binom{n-1}{k}(1-x)^{n-1-k}x^k\tag{1}\label{1}\]</span></p><p>考虑重新定义 <span class="math inline">\(F(x)=\sum_{k\le r}\binom{n}{k}(1-x)^{n-k}x^k\)</span>，并定义 <span class="math inline">\(f(x)=\sum_{k\le r}\binom{n}{k}x^k\)</span></p><p>发现</p><p><span class="math display">\[\begin{aligned}f^\prime(x)=&amp;\sum\limits_{k\le r}k\binom{n}{k}x^{k-1}\\=&amp;n\sum\limits_{k\le r}\binom{n-1}{k-1}x^{k-1}\end{aligned}\]</span></p><p>这个形式看起来很能裂项相消，于是有：</p><p><span class="math display">\[\begin{aligned}nf(x)-xf^\prime(x)=&amp;n\sum_{k\le r}\binom{n}{k}x^k-n\sum_{k\le r}\binom{n-1}{k-1}x^k\\=&amp;n\sum_{k\le r}\binom{n-1}{k}x^k\\=&amp;f^\prime(x)+n\binom{n-1}{r}x^r\end{aligned}\]</span></p><p>得到：</p><p><span class="math display">\[(1+x)f^\prime(x)=n\left(f(x)-\binom{n-1}{r}x^r\right)\tag{2}\label{2}\]</span></p><p>将 <span class="math inline">\(f(x)\)</span> 带回 <span class="math inline">\(F(x)\)</span>：<span class="math inline">\(F(x)=(1-x)^nf\left(\frac{x}{1-x}\right)\)</span></p><p>对 <span class="math inline">\(F(x)\)</span> 求导得：</p><p><span class="math display">\[F^\prime(x)=-n(1-x)^{n-1}f\left(\frac{x}{1-x}\right)+(1-x)^{n-2}f^\prime\left(\frac{x}{1-x}\right)\]</span></p><p>考虑到 <span class="math inline">\(1+\frac{x}{1-x}=\frac{1}{1-x}\)</span> 带入 <span class="math inline">\(\eqref{2}\)</span> 式：</p><p><span class="math display">\[\frac{1}{1-x}f^\prime\left(\frac{x}{1-x}\right)=n\left(f\left(\frac{x}{1-x}\right)-\binom{n-1}{r}\left(\frac{x}{1-x}\right)^r\right)\]</span></p><p>乘上 <span class="math inline">\((1-x)^{n-1}\)</span> 得到：</p><p><span class="math display">\[(1-x)^{n-2}f^\prime\left(\frac{x}{1-x}\right)=n(1-x)^{n-1}\left(f\left(\frac{x}{1-x}\right)-\binom{n-1}{r}\left(\frac{x}{1-x}\right)^r\right)\]</span></p><p>再带回原式我们得到了 <span class="math inline">\(F^\prime(x)=-n\binom{n-1}{r}x^r(1-x)^{n-r-1}\)</span></p><p>最后再积分即可，注意这么做之后常数项会丢失，观察 <span class="math inline">\(\eqref{1}\)</span> 式发现，对于前面一部分，常数项不会贡献到答案，但后一部分因为乘上了 <span class="math inline">\(nx\)</span> 会贡献到答案到一次项，通过手算发现一次项系数为 <span class="math inline">\(n\)</span>，直接手动加上即可</p><p>时间复杂度 <span class="math inline">\(\Theta(n\log\log n)\)</span></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生成函数 </tag>
            
            <tag> 组合计数 </tag>
            
            <tag> 高维前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「学习笔记」浅谈自相关多项式</title>
      <link href="/2020/autocorrelation/"/>
      <url>/2020/autocorrelation/</url>
      
        <content type="html"><![CDATA[<p>貌似用处并不是很大的科技，可能可以解释一些题目的做法。</p><span id="more"></span><h2 id="一些定义">一些定义</h2><p>定义一个长度为 <span class="math inline">\(n\)</span> 的字符串 <span class="math inline">\(S\)</span> 的自相关多项式 (autocorrelation polynomial) <span class="math inline">\(c(x)=\sum\limits_{i=0}^{n-1}[i\ \text{is a period of}\ S]x^i\)</span>，其中 <span class="math inline">\(i\)</span> 是 <span class="math inline">\(S\)</span> 的 period 当且仅当 <span class="math inline">\(\forall 0\le j\lt n-i\)</span> 满足 <span class="math inline">\(S_j=S_{j+i}\)</span></p><p>设字符集大小为 <span class="math inline">\(m\)</span>，设 <span class="math inline">\(f_i\)</span> 表示长度为 <span class="math inline">\(i\)</span> 的所有字符串，正好在末尾出现第一次匹配串的方案数，<span class="math inline">\(F(x)\)</span> 为它的 OGF，<span class="math inline">\(g_i\)</span> 表示长度为 <span class="math inline">\(i\)</span> 的所有字符串，还没出现匹配串的方案数，<span class="math inline">\(G(x)\)</span> 为它的 OGF，<span class="math inline">\(h_i\)</span> 表示长度为 <span class="math inline">\(i\)</span> 的所有字符串，至少出现过一次匹配串的方案数，<span class="math inline">\(H(x)\)</span> 为它的 OGF</p><h2 id="一些公式推导">一些公式推导</h2><p><span class="math display">\[G(x)\cdot mx+1=F(x)+G(x)\tag{1}\]</span></p><p><span class="math inline">\((1)\)</span> 式的含义是，将任意一个未出现匹配串的字符串后加入任意字符，要么恰好出现第一次，要么还没有出现，<span class="math inline">\(1\)</span> 是补齐常数项</p><p><span class="math display">\[G(x)\cdot x^n=F(x)\cdot c(x)\tag{2}\]</span></p><p><span class="math inline">\((2)\)</span> 式的含义是，将任意一个未出现的字符串后直接加入匹配串，注意到它不一定是第一次出现，有可能加入了 <span class="math inline">\(i\)</span> 个字符后他就恰好在末尾第一次出现匹配串了，后面又钦定加入了剩余的 <span class="math inline">\(n-i\)</span> 位，注意到此时 <span class="math inline">\(i\)</span> 一定是匹配串的 border 即 <span class="math inline">\(n-i\)</span> 是匹配串的 period 那么此时的贡献正好为 <span class="math inline">\(i\)</span> 位后的 <span class="math inline">\(f\)</span> 值乘上 <span class="math inline">\(n-i\)</span> 位的固定串</p><p>将 <span class="math inline">\((1)\)</span> 式变形为 <span class="math inline">\(G(x)=\frac{F(x)-1}{mx-1}\)</span> 带入 <span class="math inline">\((2)\)</span> 式，可得 <span class="math inline">\(F(x)=\frac{x^n}{x^n+(1-mx)c(x)},G(x)=\frac{c(x)}{x^n+(1-mx)c(x)}\)</span></p><p>考虑求 <span class="math inline">\(H(x)\)</span> 注意到对于任意刚好在末尾出现一次的字符串 <span class="math inline">\(F(x)\)</span> 在其末尾继续加入任意串，可拓展为至少出现一次匹配串的方案数，注意到 <span class="math inline">\(F(x)\)</span> 所代表的串是不重的，不难证明这样可以不重不漏地拓展到所有串，于是有 <span class="math inline">\(H(x)=\sum\limits_{i=0}^\infty F(x)\cdot(mx)^i=\frac{x^n}{(1-mx)(x^n+(1-mx)c(x))}\)</span></p><p><del>好像这就是歌唱王国？</del></p><p>参考资料：<a href="https://en.wikipedia.org/wiki/Autocorrelation_%28words%29">https://en.wikipedia.org/wiki/Autocorrelation_(words)</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生成函数 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Dwango Programming Contest V E」Cyclic GCDs</title>
      <link href="/2020/AT-4498/"/>
      <url>/2020/AT-4498/</url>
      
        <content type="html"><![CDATA[<p><a href="https://atcoder.jp/contests/dwacon5th-prelims/tasks/dwacon5th_prelims_e">题面</a></p><span id="more"></span><h2 id="分析">分析</h2><p>首先看到分成圆排列不难联想到第一类斯特林数，观察其递推式：<span class="math inline">\(\left[\begin{matrix}i\\j\end{matrix}\right]=\left[\begin{matrix}i-1\\j-1\end{matrix}\right]+(i-1)\times\left[\begin{matrix}i-1\\j\end{matrix}\right]\)</span></p><p>发现若我们将新建一个圆排列的系数 <span class="math inline">\(1\)</span> 改为此圆排列的最小值即为本题所求，不难发现可以将 <span class="math inline">\(a\)</span> 数组升序排序，于是它的系数就是 <span class="math inline">\(a_i\)</span>，即 <span class="math inline">\(f_{i,j}=a_if_{i-1,j-1}+(i-1)f_{i-1,j}\)</span></p><p>于是不难写出 <span class="math inline">\(f_{n,i}\)</span> 的生成函数即为 <span class="math inline">\(\prod\limits_{i=1}^n(a_ix+i-1)\)</span></p><p>先给个结论：若有多项式 <span class="math inline">\(P,Q\)</span> 和函数 <span class="math inline">\(c(F)=\gcd\limits_{i}([x^i]F)\)</span> 则 <span class="math inline">\(c(PQ)=c(P)c(Q)\)</span> 于是答案即为 <span class="math inline">\(\prod\limits_{i=1}^n\gcd(a_i,i-1)\)</span></p><p>下面考虑证明这个结论：</p><p>不失一般性的，我们只需证明 <span class="math inline">\(c(P)=c(Q)=1\)</span> 时 <span class="math inline">\(c(PQ)=1\)</span>，我们采用归谬法证明，设 <span class="math inline">\(c(PQ)\)</span> 为某质数 <span class="math inline">\(p\)</span> 的倍数，则 <span class="math inline">\(PQ\)</span> 的最高项为 <span class="math inline">\(p\)</span> 的倍数，那么 <span class="math inline">\(P,Q\)</span> 中至少有一个最高项为 <span class="math inline">\(p\)</span> 的倍数，考虑到 <span class="math inline">\(p\)</span> 乘任何数都是 <span class="math inline">\(p\)</span> 的倍数，故 <span class="math inline">\(P\)</span> 的最高位不改变 <span class="math inline">\(PQ\)</span> 中任何一项是否整除 <span class="math inline">\(p\)</span> 设 <span class="math inline">\(P^\prime\)</span> 为 <span class="math inline">\(P\)</span> 去掉最高项的多项式，于是有 <span class="math inline">\(p\mid c(P^\prime Q)\)</span> …… 以此类推，不断规约，总能规约到 <span class="math inline">\(P,Q\)</span> 都只剩常数项，此时 <span class="math inline">\(P,Q\)</span> 的非常数项均为 <span class="math inline">\(p\)</span> 的倍数，而 <span class="math inline">\(c(P)=c(Q)=1\)</span> 故二者常数项均不整除 <span class="math inline">\(p\)</span> ，但这与 <span class="math inline">\(PQ\)</span> 的常数项为 <span class="math inline">\(p\)</span> 的倍数矛盾，故得证</p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> Mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100005</span>;<br><br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(n);<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    <span class="hljs-built_in">read</span>(a[i]);<br>  &#125;<br>  std::<span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + n + <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    ans = ans * <span class="hljs-number">1ll</span> * std::<span class="hljs-built_in">gcd</span>(a[i], i - <span class="hljs-number">1</span>) % Mod;<br>  &#125;<br>  <span class="hljs-built_in">write</span>(ans), EL;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生成函数 </tag>
            
            <tag> 结论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Dwango Programming Contest V D」Square Rotation</title>
      <link href="/2020/AT-4497/"/>
      <url>/2020/AT-4497/</url>
      
        <content type="html"><![CDATA[<p><a href="https://atcoder.jp/contests/dwacon5th-prelims/tasks/dwacon5th_prelims_d">题面</a></p><span id="more"></span><h2 id="分析">分析</h2><p>首先不难发现，按横纵坐标 <span class="math inline">\(\bmod D\)</span> 的值可分为 <span class="math inline">\(D^2\)</span> 个同余类，同余类中的数两两可达，设 <span class="math inline">\(A_{i,j}\)</span> 为 <span class="math inline">\(x\bmod D=i,y\bmod D=j\)</span> 的黑点个数</p><p>不难发现最终会把所有黑点放在一起然后用一个正方形包括所有的黑点，并尽量使正方形边长最小</p><p>不妨设正方形边长为 <span class="math inline">\(aD+b\)</span> 其中 <span class="math inline">\(1\le b\le D\)</span>，不难发现 <span class="math inline">\(a=\left(\max\limits_{0\le i,j\lt D}\lceil\sqrt{A_{i,j}}\rceil\right)-1\)</span> （考虑一个边长为 <span class="math inline">\(aD\)</span> 的正方形能包括每个同余类恰好 <span class="math inline">\(a^2\)</span> 次）</p><p>不难发现若正方形左下角在 <span class="math inline">\((0,0)\)</span> 处，则 <span class="math inline">\((0\sim b,0\sim b)\)</span> 被覆盖 <span class="math inline">\((a+1)^2\)</span> 次；<span class="math inline">\((0\sim b,b+1\sim D-1)\)</span> 和 <span class="math inline">\((b+1\sim D-1,0\sim b)\)</span> 被覆盖 <span class="math inline">\(a(a+1)\)</span> 次；<span class="math inline">\((b+1\sim D-1,b+1\sim D-1)\)</span> 被覆盖 <span class="math inline">\(a^2\)</span> 次</p><p>可以一开始就将 <span class="math inline">\(b\)</span> 设为 <span class="math inline">\(D\)</span> 然后枚举每一个点作为左下角，若此时 <span class="math inline">\(b\)</span> 合法，则计入答案并令 <span class="math inline">\(b\leftarrow b-1\)</span>，否则就枚举下一个左下角，于是问题转变为判断对于一个左下角 <span class="math inline">\(b\)</span> 是否合法</p><p>这个问题可以用二维前缀和解决：分别记录 <span class="math inline">\(a^2\lt A_{i,j}\le a(a+1)\)</span> 的个数和 <span class="math inline">\(a(a+1)\lt A_{i,j}\)</span> 的个数，每次询问即查询 <span class="math inline">\(a^2\)</span> 的区域是否有 <span class="math inline">\(\gt a^2\)</span> 的和 <span class="math inline">\(a(a+1)\)</span> 的区域是否有 <span class="math inline">\(\gt a(a+1)\)</span> 的，并注意处理 <span class="math inline">\(+b\)</span> 后超过 <span class="math inline">\(D-1\)</span> 的情况，具体见代码</p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1005</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum2</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum3</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2)</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check2</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check3</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> b)</span></span>;<br><br><span class="hljs-type">int</span> cnt2[N][N], cnt3[N][N];<br><span class="hljs-type">int</span> cnt[N][N];<br><span class="hljs-type">int</span> n, d;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(d);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-built_in">read</span>(x), <span class="hljs-built_in">read</span>(y);<br>    ++cnt[x % d][y % d];<br>  &#125;<br>  <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; d; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; d; ++j) &#123;<br>      <span class="hljs-keyword">if</span> (cnt[i][j]) &#123;<br>        <span class="hljs-type">int</span> tmp = std::<span class="hljs-built_in">sqrt</span>(cnt[i][j]);<br>        <span class="hljs-keyword">if</span> (tmp * tmp &lt; cnt[i][j]) &#123;<br>          ++tmp;<br>        &#125;<br>        a = <span class="hljs-built_in">max</span>(a, tmp - <span class="hljs-number">1</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; d; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; d; ++j) &#123;<br>      <span class="hljs-keyword">if</span> (cnt[i][j] &gt; a * a) &#123;<br>        <span class="hljs-keyword">if</span> (cnt[i][j] &gt; a * (a + <span class="hljs-number">1</span>)) &#123;<br>          ++cnt3[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          ++cnt2[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>];<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= d; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= d; ++j) &#123;<br>      cnt2[i][j] += cnt2[i - <span class="hljs-number">1</span>][j] + cnt2[i][j - <span class="hljs-number">1</span>] - cnt2[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>      cnt3[i][j] += cnt3[i - <span class="hljs-number">1</span>][j] + cnt3[i][j - <span class="hljs-number">1</span>] - cnt3[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>    &#125;<br>  &#125;<br>  <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (; b &lt; d; ++b) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check2</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, b) &amp;&amp; <span class="hljs-built_in">check3</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, b)) &#123;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; d; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; d; ++j) &#123;<br>      <span class="hljs-keyword">if</span> (!(i + j)) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-keyword">while</span> (b) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check2</span>(i, j, b - <span class="hljs-number">1</span>) &amp;&amp; <span class="hljs-built_in">check3</span>(i, j, b - <span class="hljs-number">1</span>)) &#123;<br>          --b;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">write</span>(a * d + b), EL;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum2</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (x1 &gt; x2 || y1 &gt; y2) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  ++x1, ++y1, ++x2, ++y2;<br>  <span class="hljs-keyword">return</span> cnt2[x2][y2] - cnt2[x2][y1 - <span class="hljs-number">1</span>] - cnt2[x1 - <span class="hljs-number">1</span>][y2] + cnt2[x1 - <span class="hljs-number">1</span>][y1 - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum3</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (x1 &gt; x2 || y1 &gt; y2) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  ++x1, ++y1, ++x2, ++y2;<br>  <span class="hljs-keyword">return</span> cnt3[x2][y2] - cnt3[x2][y1 - <span class="hljs-number">1</span>] - cnt3[x1 - <span class="hljs-number">1</span>][y2] + cnt3[x1 - <span class="hljs-number">1</span>][y1 - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check2</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>  <span class="hljs-type">int</span> t1 = <span class="hljs-built_in">sum2</span>(x + b + <span class="hljs-number">1</span>, y + b + <span class="hljs-number">1</span>, d - <span class="hljs-number">1</span>, d - <span class="hljs-number">1</span>);<br>  <span class="hljs-type">int</span> t2 = <span class="hljs-built_in">sum2</span>(<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, x + b + <span class="hljs-number">1</span> - d), <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, y + b + <span class="hljs-number">1</span> - d), x - <span class="hljs-number">1</span>, y - <span class="hljs-number">1</span>);<br>  <span class="hljs-type">int</span> t3 = <span class="hljs-built_in">sum2</span>(x + b + <span class="hljs-number">1</span>, <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, y + b + <span class="hljs-number">1</span> - d), d - <span class="hljs-number">1</span>, y - <span class="hljs-number">1</span>);<br>  <span class="hljs-type">int</span> t4 = <span class="hljs-built_in">sum2</span>(<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, x + b + <span class="hljs-number">1</span> - d), y + b + <span class="hljs-number">1</span>, x - <span class="hljs-number">1</span>, d - <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> !t1 &amp;&amp; !t2 &amp;&amp; !t3 &amp;&amp; !t4;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check3</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>  <span class="hljs-type">int</span> t1 = <span class="hljs-built_in">sum3</span>(x + b + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, d - <span class="hljs-number">1</span>, d - <span class="hljs-number">1</span>);<br>  <span class="hljs-type">int</span> t2 = <span class="hljs-built_in">sum3</span>(<span class="hljs-number">0</span>, y + b + <span class="hljs-number">1</span>, d - <span class="hljs-number">1</span>, d - <span class="hljs-number">1</span>);<br>  <span class="hljs-type">int</span> t3 = <span class="hljs-built_in">sum3</span>(<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, x + b + <span class="hljs-number">1</span> - d), <span class="hljs-number">0</span>, x - <span class="hljs-number">1</span>, d - <span class="hljs-number">1</span>);<br>  <span class="hljs-type">int</span> t4 = <span class="hljs-built_in">sum3</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, y + b + <span class="hljs-number">1</span> - d), d - <span class="hljs-number">1</span>, y - <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> !t1 &amp;&amp; !t2 &amp;&amp; !t3 &amp;&amp; !t4;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二维前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「洛谷P4547」[THUWC 2017] 随机二分图 题解</title>
      <link href="/2020/luogu-4547/"/>
      <url>/2020/luogu-4547/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4547">题目</a></p><span id="more"></span><h2 id="思路">思路</h2><p>首先考虑只有第 1 类边的情况，根据期望的线性性，不难得到一个朴素的搜索：搜索每一种完美匹配，并将这个匹配的所有边的概率之积累加到答案，考虑优化，可以将每个点是否被匹配了压缩进一个二进制数，每次只考虑最高的 1 连的边，结合上记忆化搜索，不难发现这是一种 <span class="math inline">\(O(2^nm)\)</span> 的算法</p><p>问题变成了如何将 2 和 3 类边转换为 1 类边或类似 1 类边的情况，发现如果一个 2 类组或 3 类中只选了一条边，概率是 <span class="math inline">\(50\%\)</span> 和 1 类相同，考虑这种情况下 2 类边两边全选了，那么概率为 <span class="math inline">\(50\%\times50\%=25\%\)</span> 但实际为 <span class="math inline">\(50\%\)</span> 于是可以增加一个两边的复合（即选这条边相当于选了两条边），概率为 <span class="math inline">\(25\%\)</span>，特别地，若这两条边有相同端点，则不加</p><p>同理处理 3 类边，由于同时选两条边的概率为 <span class="math inline">\(0\%\)</span> 故增加一条 <span class="math inline">\(-25\%\)</span> 的复合边</p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> N = <span class="hljs-number">500</span>;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> Mod = <span class="hljs-number">1000000007</span>, iv2 = (Mod + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>, iv4 = (Mod + <span class="hljs-number">1</span>) / <span class="hljs-number">4</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Edge</span> &#123;<br> <span class="hljs-keyword">public</span>:<br>  uint v;<br>  <span class="hljs-type">int</span> p;<br>  <span class="hljs-built_in">Edge</span>(uint v = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>) : <span class="hljs-built_in">v</span>(v), <span class="hljs-built_in">p</span>(p) &#123;&#125;<br>&#125; E[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(uint sta)</span></span>;<br><br>std::unordered_map&lt;uint, <span class="hljs-type">int</span>&gt; mp;<br><span class="hljs-type">int</span> eid;<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(m);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>    <span class="hljs-type">int</span> op, a, b;<br>    <span class="hljs-built_in">read</span>(op), <span class="hljs-built_in">read</span>(a), <span class="hljs-built_in">read</span>(b);<br>    --a, --b;<br>    <span class="hljs-type">int</span> id1 = (<span class="hljs-number">1u</span> &lt;&lt; a) | (<span class="hljs-number">1u</span> &lt;&lt; (b + n));<br>    E[++eid] = <span class="hljs-built_in">Edge</span>(id1, iv2);<br>    <span class="hljs-keyword">if</span> (op == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-built_in">read</span>(a), <span class="hljs-built_in">read</span>(b);<br>    --a, --b;<br>    <span class="hljs-type">int</span> id2 = (<span class="hljs-number">1u</span> &lt;&lt; a) | (<span class="hljs-number">1u</span> &lt;&lt; (b + n));<br>    E[++eid] = <span class="hljs-built_in">Edge</span>(id2, iv2);<br>    <span class="hljs-keyword">if</span> (id1 &amp; id2) &#123;<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    E[++eid] = <span class="hljs-built_in">Edge</span>(id1 | id2, op == <span class="hljs-number">1</span> ? iv4 : (Mod - iv4));<br>  &#125;<br>  <span class="hljs-built_in">write</span>(<span class="hljs-built_in">dp</span>((<span class="hljs-number">1u</span> &lt;&lt; (n &lt;&lt; <span class="hljs-number">1</span>)) - <span class="hljs-number">1</span>) * <span class="hljs-number">1ll</span> * (<span class="hljs-number">1</span> &lt;&lt; n) % Mod), EL;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(uint sta)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (!sta) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">auto</span> it = mp.<span class="hljs-built_in">find</span>(sta);<br>  <span class="hljs-keyword">if</span> (it != mp.<span class="hljs-built_in">end</span>()) &#123;<br>    <span class="hljs-keyword">return</span> it-&gt;second;<br>  &#125;<br>  <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= eid; ++i) &#123;<br>    uint id = E[i].v;<br>    <span class="hljs-keyword">if</span> ((id &amp; sta) == id &amp;&amp; (id &lt;&lt; <span class="hljs-number">1</span>) &gt; sta) &#123;<br>      res = (res + E[i].p * <span class="hljs-number">1ll</span> * <span class="hljs-built_in">dp</span>(sta ^ id)) % Mod;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> mp[sta] = res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSP-2020 游记</title>
      <link href="/2020/CSP-2020/"/>
      <url>/2020/CSP-2020/</url>
      
        <content type="html"><![CDATA[<h1 id="csp-2020退役记">CSP-2020退役记</h1><span id="more"></span><h2 id="day-0">Day 0</h2><p>就在本市考，但是在郊区的职高，比较远，所以学校组织了大巴</p><p>大巴车上和妹子坐一起，好耶！</p><p>考场环境不是很好，位子后面没有靠背，难受 <span class="math inline">\(\times1\)</span>，显示屏太矮，难受 <span class="math inline">\(\times2\)</span>，显示屏比例不对劲，难受 <span class="math inline">\(\times3\)</span></p><h2 id="day-1">Day 1</h2><p>早上看了眼 PJ 的题，没有 C++11 &amp; O2 真的差评</p><p>大巴车上和妹子坐一起，好耶！</p><p>考前大力奶，要 AC 自动机，nim 积（？），超现实数（？），模数 <span class="math inline">\(998244353\)</span>（唯一对的）</p><p>开场监考老师漏了密码前后的括号，差评，“它山之石可以攻玉？”</p><p>先看一眼题目名字，儒略历？？？一看就是大模拟，差评，于是没往下看题面直接开始写板子</p><p>10 min 写完板子，开题，T1 日历题？？？弃了弃了，开 T2 第一眼：内存不够，第二眼：可以对 <span class="math inline">\(q\)</span> 离散化，20 min 敲完，为了防止 ub 写了个快速幂算 <span class="math inline">\(2^k\)</span> 后来发现 <span class="math inline">\(n=m=0,k=64\)</span> 是超过 <code>unsigned long long</code> 范围的，果断特判，Linux 的计算器为啥是科学记数法啊/jk，于是果断 python <code>2**64</code></p><p>看 T3，第一眼：线段树合并？？？，后来发现是线段树2，可以将后面的乘法乘到前面的加法，但感觉不怎么会，先看 T4，博弈？？？</p><p>回去肝 T1 写了对年份二分，写了 1.5h，祝出题人身体健康，此时只剩 2h 时间了，我 T3 T4 都没动</p><p>发现 T3 可以先维护每个操作的乘法具体是多少，然后 topsort 后可以直接倒着做下传标记，和线段树2非常像，好题啊！写的时候手都在抖，幸好 30min 就过了大样例，顺便吐槽考场的 gedit 打不开样例三，最后用 vim 看了下强度</p><p>T4 发现可以从后往前看，果断写了个 <span class="math inline">\(\operatorname{O}(Tn^2)\)</span> 赶紧跑路对拍 T1</p><p>拍 T1 没啥问题，感觉海星，想了下 T4 好像可以 set 没时间了</p><p>出来发现 T4 好像还有单调性/kk，被大家吊着打</p><p>大巴车上和妹子坐一起，好耶！</p><p>回来发现 T4 写得好像有点假，不管了</p><h2 id="day-3">Day 3</h2><p>发程序了/kk</p><p>T4 竟然有 55</p><p>T1 二分的右边界应该是 <span class="math inline">\(10^9+4713\)</span>，然而我就写了个 <span class="math inline">\(10^9\)</span>，<span class="math inline">\(100\rightarrow 90\)</span>/kk</p>]]></content>
      
      
      <categories>
          
          <category> 游记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>「Codeforces 736D」Symmetric and Transitive 题解</title>
      <link href="/2020/CF-736D/"/>
      <url>/2020/CF-736D/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/736/D">题目</a></p><span id="more"></span><h2 id="题意">题意</h2><p>左右各 <span class="math inline">\(n\)</span> 个点，<span class="math inline">\(m\)</span> 条边的二分图，满足完美匹配数为奇数个，问分别去掉每一条边后，完美匹配数是否仍为奇数个</p><p><span class="math inline">\(n\le2000\)</span>，<span class="math inline">\(m\le5\times10^5\)</span></p><h2 id="分析">分析</h2><p>首先发现完美匹配数为 <span class="math inline">\(\sum\limits_{\sigma\in S_n}\prod\limits_{i=1}^n\left[M_{i,\sigma(i)}=1\right]\)</span>，其中 <span class="math inline">\(M\)</span> 为邻接矩阵，<span class="math inline">\(S_n\)</span> 为所有 <span class="math inline">\(1\sim n\)</span> 的置换构成的集合</p><p>由于是 <span class="math inline">\(\bmod2\)</span> 意义下的，且 <span class="math inline">\(-1\equiv1\pmod2\)</span> 故有 <span class="math inline">\(Ans\equiv\sum\limits_{\sigma\in S_n}\operatorname{sgn}(\sigma)\prod\limits_{i=1}^n\left[M_{i,\sigma(i)}=1\right]=\det(M)\pmod2\)</span></p><p>考虑容斥，去掉一条边的完美匹配数为奇数等价于包含一条边的完美匹配数为偶数，必须包含一条边即为删掉一行一列，于是等价于它的余子式为偶数，同样的，由于 <span class="math inline">\((-1)^{i+j}\)</span> 不影响答案直接求代数余子式即可，又有矩阵 <span class="math inline">\(M\)</span> 在 <span class="math inline">\(i\)</span> 行 <span class="math inline">\(j\)</span> 列的代数余子式等于伴随矩阵 <span class="math inline">\(M^{\*}\)</span> 的 <span class="math inline">\(j\)</span> 行 <span class="math inline">\(i\)</span> 列，于是可以求伴随矩阵 <span class="math inline">\(M^{\*}=\det(M)M^{-1}\)</span> 直接高斯消元就好了，<span class="math inline">\(\det(M)\)</span> 一定为奇数</p><p>注意到运算在 <span class="math inline">\(\bmod2\)</span> 意义下进行，加减和异或运算等价，直接使用 bitset 进行优化即可，复杂度 <span class="math inline">\(\operatorname{O}(\frac{n^3}{\omega})\)</span></p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2001</span>;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> S = <span class="hljs-number">4001</span>;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> M = <span class="hljs-number">500001</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Gauss</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>;<br><br>std::bitset&lt;S&gt; a[N];<br><span class="hljs-type">int</span> u[M], v[M];<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(m);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>    <span class="hljs-built_in">read</span>(u[i]), <span class="hljs-built_in">read</span>(v[i]);<br>    a[u[i]][v[i]] = <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    a[i][i + n] = <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-built_in">Gauss</span>(n);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (a[v[i]][u[i] + n]) &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Gauss</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    <span class="hljs-type">int</span> now = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= n; ++j) &#123;<br>      <span class="hljs-keyword">if</span> (a[j][i]) &#123;<br>        now = j;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (now != i) &#123;<br>      std::<span class="hljs-built_in">swap</span>(a[i], a[now]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123;<br>      <span class="hljs-keyword">if</span> (i != j &amp;&amp; a[j][i]) &#123;<br>        a[j] ^= a[i];<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> 计数 </tag>
            
            <tag> 高斯消元 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「AGC 032F」One Third 题解</title>
      <link href="/2020/AGC-032F/"/>
      <url>/2020/AGC-032F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://atcoder.jp/contests/agc032/tasks/agc032_f">题目</a></p><span id="more"></span><h2 id="分析">分析</h2><p>考虑转化，可以转化为在 <span class="math inline">\(\left[0,\frac{1}{3}\right]\)</span> 上等概率随机分成 <span class="math inline">\(n\)</span> 份，并从 <span class="math inline">\(1,2,3\)</span> 中等概率随机赋上一种颜色，<span class="math inline">\(0\)</span> 初始颜色已为 <span class="math inline">\(1\)</span>，<span class="math inline">\(\frac{1}{3}\)</span> 初始颜色已为 <span class="math inline">\(2\)</span>，求最短的两端点颜色不同的线段的期望长度</p><p>先从没有限制的长度为 <span class="math inline">\(1\)</span> 的线段开始考虑，不妨设其互补累积分布函数 <span class="math inline">\(F_{L_1}(x)=P(L&gt;x)=(1-nx)^{n-1}\)</span> 可得其期望：</p><p><span class="math display">\[\begin{aligned}\operatorname{E}[L_1] &amp; =\int_0^\frac{1}{n}x\times\left[-(F_{L_1}(x))^\prime\right]dx\\&amp; =\int_0^\frac{1}{n}F_{L_1}(x)dx \text{ (分部积分) }     \\&amp; =\int_0^\frac{1}{n}(1-nx)^{n-1}dx                       \\&amp; =\frac{1}{n}\int_0^1\left(\frac{n-nx}{n}\right)^{n-1}dx \\&amp; =\frac{1}{n}\int_0^1\left(1-x\right)^{n-1}dx            \\&amp; =\frac{1}{n}\int_0^1x^{n-1}dx \text{ (换元) }           \\&amp; =\frac{1}{n^2}\end{aligned}\]</span></p><p>考虑次小值，削除 <span class="math inline">\(n\)</span> 段最小值后的最小值再加上最小值：<span class="math inline">\(\operatorname{E}[L_2]=\frac{1-n\operatorname{E}[L_1]}{(n-1)^2}+\operatorname{E}[L_1]\)</span> 变形得 <span class="math inline">\(\operatorname{E}[L_2]-\operatorname{E}[L_1]=\frac{1}{n(n-1)}\)</span>，归纳得 <span class="math inline">\(\operatorname{E}[L_{k+1}]-\operatorname{E}[L_k]=\frac{1}{n(n-k)}\)</span> 考虑乘上至少前 <span class="math inline">\(i\)</span> 条线段都不满足条件的概率 <span class="math inline">\(\frac{1}{3^i}\)</span> 答案即为 <span class="math inline">\(\frac{1}{n}\sum\limits_{i=1}^n\frac{1}{3^i(n-i+1)}\)</span></p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000005</span>;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> Mod = <span class="hljs-number">1000000007</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pow</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> m)</span></span>;<br><br><span class="hljs-type">int</span> inv[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(n);<br>  inv[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br>    inv[i] = (Mod - Mod / i) * <span class="hljs-number">1ll</span> * inv[Mod % i] % Mod;<br>  &#125;<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> iv3 = <span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>, Mod - <span class="hljs-number">2</span>, Mod);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, p3 = inv[n]; i &lt;= n; ++i) &#123;<br>    p3 = p3 * <span class="hljs-number">1ll</span> * iv3 % Mod;<br>    ans = (ans + p3 * <span class="hljs-number">1ll</span> * inv[n - i + <span class="hljs-number">1</span>] % Mod) % Mod;<br>  &#125;<br>  <span class="hljs-built_in">write</span>(ans), EL;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pow</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> m)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>, now = a;<br>  <span class="hljs-keyword">while</span> (b) &#123;<br>    <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) &#123;<br>      ans = ans * <span class="hljs-number">1ll</span> * now % m;<br>    &#125;<br>    now = now * <span class="hljs-number">1ll</span> * now % m;<br>    b &gt;&gt;= <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 概率与期望 </tag>
            
            <tag> 微积分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「洛谷P3727」曼哈顿计划E 题解</title>
      <link href="/2020/luogu-3727/"/>
      <url>/2020/luogu-3727/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3727">题目</a></p><span id="more"></span><h2 id="分析">分析</h2><p>发现实质上是把树上一段链拉下来玩 Nim 游戏，若链上 <span class="math inline">\(sg\)</span> 函数的异或和为 <span class="math inline">\(0\)</span> 则先手必败，于是可以考虑点分治找出树上异或和为 <span class="math inline">\(0\)</span> 的链，用自己喜欢的 Hash 方式即可</p><h2 id="sg-函数">SG 函数</h2><ol type="1"><li><span class="math inline">\(k=1\)</span>：原始的 Nim 游戏 <span class="math inline">\(sg(x)=x\)</span></li><li><span class="math inline">\(k=2\)</span>：分两种情况，(1) <span class="math inline">\(s\)</span> 为奇数，显然 <span class="math inline">\(s^k\)</span> 均为奇数，故简单归纳可得 <span class="math inline">\(sg(x)=x\bmod 2\)</span>；(2) <span class="math inline">\(s\)</span> 为偶数，找规律得有长为 <span class="math inline">\((s+1)\)</span> 的循环节，大概长这样 <span class="math inline">\(\overbrace{0101\cdots01}^{s}2\)</span>，有 <span class="math inline">\(1=(s+1)\times0+1,s=(s+1)\times1-1,s^2=(s+1)\times(s-1)+1,s^3=(s+1)\times(s^2-s+1)-1\cdots\)</span> 于是对循环节施加归纳，每个点可看做前后两个点的 <span class="math inline">\(\operatorname{mex}\)</span> 即可得证</li><li><span class="math inline">\(k=3\)</span>：<span class="math inline">\(sg(x)=\lfloor\frac{x}{s}\rfloor\)</span> 证明大概是对循环节施加归纳，每个循环节可以到达所有之前的循环节，即可得证</li><li><span class="math inline">\(k=4\)</span>：<span class="math inline">\(sg(x)=\begin{cases}0&amp;(x=0)\\x&amp;(x\equiv1,2\pmod4)\\x+1&amp;(x\equiv3\pmod4)\\x-1&amp;(x\equiv4\pmod4)\end{cases}\)</span> 证明大概是先 <span class="math inline">\(4\)</span> 个分一块并对块施加归纳，再对每一种单独证明<br>首先对于一个完整的块 <span class="math inline">\(x=4k+1\sim 4k+4\)</span> 它的 <span class="math inline">\(sg(x)\)</span> 取遍了 <span class="math inline">\(4k+1\sim4k+4\)</span>，所以直接取的 <span class="math inline">\(sg\)</span> 值可以取遍 <span class="math inline">\(0\sim 4k\)</span> 以下 <span class="math inline">\(1,2,3,4\)</span> 均为 <span class="math inline">\(\bmod\ 4\)</span> 意义下的<br>考虑 <span class="math inline">\(1\)</span> 分成 <span class="math inline">\(1+0\)</span> 时异或值为 <span class="math inline">\(1\oplus3=2\neq1\)</span>，<span class="math inline">\(2+3\)</span> 时异或值为 <span class="math inline">\(2\oplus0=2\neq1\)</span> 故无法将 <span class="math inline">\(1\)</span> 分解得到自身，又因为能直接取到 <span class="math inline">\(0\sim4k\)</span> 故 <span class="math inline">\(sg(4k+1)=4k+1\)</span><br><span class="math inline">\(2\)</span> 也无法分解，证明是类似的，又因为能直接取到 <span class="math inline">\(0\sim4k+1\)</span> 故 <span class="math inline">\(sg(4k+2)=4k+2\)</span><br><span class="math inline">\(3\)</span> 可以直接取到 <span class="math inline">\(0\sim4k+2\)</span>，又可以分解为 <span class="math inline">\(4k+2\)</span> 和 <span class="math inline">\(1\)</span>，即 <span class="math inline">\((4k+2)\oplus1=4k+3\)</span>，故 <span class="math inline">\(sg(4k+3)=4k+4\)</span><br><span class="math inline">\(4\)</span> 可以直接取到 <span class="math inline">\(0\sim4k+2\)</span> 和 <span class="math inline">\(4k+4\)</span>，类似 <span class="math inline">\(1,2\)</span> 的情况 <span class="math inline">\(4\)</span> 无法分解为 <span class="math inline">\(4k+3\)</span> 故 <span class="math inline">\(sg(4k+4)=4k+3\)</span></li></ol><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> N = <span class="hljs-number">30005</span>;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> M = <span class="hljs-number">60005</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getsiz</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getrot</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getp</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa, <span class="hljs-type">int</span> len)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>;<br><br><span class="hljs-type">int</span> hed[N], nxt[M], to[M], id;<br><span class="hljs-type">int</span> siz[N];<br><span class="hljs-type">int</span> asz, nsz, rot;<br><span class="hljs-type">int</span> dis[N], tot;<br><span class="hljs-type">bool</span> vis[N];<br><span class="hljs-type">int</span> val[N], sg[N];<br><span class="hljs-type">bool</span> ans;<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> T;<br>  <span class="hljs-built_in">read</span>(T);<br>  <span class="hljs-keyword">while</span> (T--) &#123;<br>    <span class="hljs-built_in">memset</span>(hed, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(hed));<br>    id = <span class="hljs-number">0</span>;<br>    ans = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>    <span class="hljs-built_in">read</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>      <span class="hljs-type">int</span> u, v;<br>      <span class="hljs-built_in">read</span>(u), <span class="hljs-built_in">read</span>(v);<br>      <span class="hljs-built_in">add</span>(u, v), <span class="hljs-built_in">add</span>(v, u);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>      <span class="hljs-built_in">read</span>(val[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> k;<br>    <span class="hljs-built_in">read</span>(k);<br>    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        sg[i] = val[i];<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-type">int</span> s;<br>      <span class="hljs-built_in">read</span>(s);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (val[i] % (s + <span class="hljs-number">1</span>) == s) &#123;<br>          sg[i] = <span class="hljs-number">2</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          sg[i] = val[i] % (s + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">3</span>) &#123;<br>      <span class="hljs-type">int</span> s;<br>      <span class="hljs-built_in">read</span>(s);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        sg[i] = val[i] / s;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">4</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (!val[i]) &#123;<br>          sg[i] = <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">if</span> (val[i] % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) &#123;<br>            sg[i] = val[i] - <span class="hljs-number">1</span>;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (val[i] % <span class="hljs-number">4</span> == <span class="hljs-number">3</span>) &#123;<br>              sg[i] = val[i] + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              sg[i] = val[i];<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-built_in">getsiz</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    asz = siz[<span class="hljs-number">1</span>];<br>    nsz = iinf;<br>    rot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">getrot</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">dfs</span>(rot);<br>    <span class="hljs-keyword">if</span> (ans) &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Mutalisk ride face how to lose?&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;The commentary cannot go on!&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>  nxt[++id] = hed[u];<br>  hed[u] = id;<br>  to[id] = v;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getsiz</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa)</span> </span>&#123;<br>  siz[u] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = hed[u]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> v = to[i];<br>    <span class="hljs-keyword">if</span> (v != fa &amp;&amp; !vis[v]) &#123;<br>      <span class="hljs-built_in">getsiz</span>(v, u);<br>      siz[u] += siz[v];<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getrot</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa)</span> </span>&#123;<br>  <span class="hljs-type">int</span> maxi = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = hed[u]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> v = to[i];<br>    <span class="hljs-keyword">if</span> (v != fa &amp;&amp; !vis[v]) &#123;<br>      <span class="hljs-built_in">getrot</span>(v, u);<br>      maxi = <span class="hljs-built_in">max</span>(maxi, siz[v]);<br>    &#125;<br>  &#125;<br>  maxi = <span class="hljs-built_in">max</span>(maxi, asz - siz[u]);<br>  <span class="hljs-keyword">if</span> (maxi &lt; nsz) &#123;<br>    nsz = maxi;<br>    rot = u;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getp</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa, <span class="hljs-type">int</span> len)</span> </span>&#123;<br>  len ^= sg[u];<br>  dis[++tot] = len;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = hed[u]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> v = to[i];<br>    <span class="hljs-keyword">if</span> (v != fa &amp;&amp; !vis[v]) &#123;<br>      <span class="hljs-built_in">getp</span>(v, u, len);<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (!sg[u]) &#123;<br>    ans = <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (ans) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  std::unordered_set&lt;<span class="hljs-type">int</span>&gt; S;<br>  S.<span class="hljs-built_in">insert</span>(sg[u]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = hed[u]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> v = to[i];<br>    <span class="hljs-keyword">if</span> (!vis[v]) &#123;<br>      tot = <span class="hljs-number">0</span>;<br>      <span class="hljs-built_in">getp</span>(v, u, <span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= tot; ++j) &#123;<br>        <span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">count</span>(dis[j])) &#123;<br>          ans = <span class="hljs-literal">true</span>;<br>          <span class="hljs-keyword">return</span>;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= tot; ++j) &#123;<br>        S.<span class="hljs-built_in">insert</span>(dis[j] ^ sg[u]);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>  vis[u] = <span class="hljs-literal">true</span>;<br>  <span class="hljs-built_in">solve</span>(u);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = hed[u]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> v = to[i];<br>    <span class="hljs-keyword">if</span> (!vis[v]) &#123;<br>      <span class="hljs-built_in">getsiz</span>(v, u);<br>      asz = siz[v];<br>      nsz = iinf;<br>      rot = <span class="hljs-number">0</span>;<br>      <span class="hljs-built_in">getrot</span>(v, u);<br>      <span class="hljs-built_in">dfs</span>(rot);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 博弈论 </tag>
            
            <tag> sg函数与Nim游戏 </tag>
            
            <tag> 点分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个爆零小技巧</title>
      <link href="/2020/Common-Error/"/>
      <url>/2020/Common-Error/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e31089be7bf3b2c0ede1fe0b32ffdfb2ed717f2974fe8861453848e7bfef45a0">07f676e016dd10d4a858a27c6c465a02f674bc46763226b0b58b261424931af918f2ced93b60828ab82eea1ec074a872e120706e2bcbb54c6574b94fa13622f2d8da4806f0c0663c606233aa01dc5635f683282edefe0dd467fa6b2be1a4bc967a28cd4c47800b01cc864660d01b623df123df4a00aafff9d1d024bd641757ce7ac1d7d05220ffdab2ecd08a2cf4aedb39d9c04b54d1a2d92b00d5606ea8c66f7299855aa16feaed20432f6f252484a35ef2e7cbfdd38b335ca004ac4620240c496f7f1b8ae5b4be13ccff580f1dab4a7502661a03a904b2a3a6a043747f0c513857641161eafed732ec4ef89380207bc9294cf0c967b304d9e0483a18ed81d5247c31517b904520afc5c6d3959c964c87f36038ec1fd52fc859f48a5f88e485</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-up">      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-up">只有我自己知道的世界</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>「洛谷P6667」[清华集训2016]如何优雅地求和 题解</title>
      <link href="/2020/luogu-6667/"/>
      <url>/2020/luogu-6667/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P6667">题目</a></p><span id="more"></span><p>提供一种概率生成函数的做法</p><p>首先简单介绍一下概率生成函数：</p><p>概率生成函数是一类用于解决、分析在自然数域上的离散随机变量相关问题的普通生成函数，其形式为 <span class="math inline">\(F(x)=\sum\limits_{i=0}^\infty\operatorname{P}(X=i)x^i\)</span></p><p>有如下公式：</p><p><span class="math inline">\(\operatorname{E}(X)=F^\prime(1)\)</span></p><p><span class="math inline">\(\operatorname{E}(X^{\underline{n}})=F^{(n)}(1)\)</span></p><p>对于成功概率为 <span class="math inline">\(p\)</span>，重复试验 <span class="math inline">\(n\)</span> 次的二项分布，概率生成函数为 <span class="math inline">\((1-p+px)^n\)</span></p><p>下面是这题的做法</p><h2 id="思路">思路</h2><p>发现这个式子很像二项分布，事实上，这道题就是对于成功概率 <span class="math inline">\(p\)</span>，重复试验 <span class="math inline">\(n\)</span> 次的二项分布成功次数 <span class="math inline">\(X\)</span>，求 <span class="math inline">\(\operatorname{E}[f(X)]\)</span></p><p>根据期望的线性性，可以拆开，又有 <span class="math inline">\(\operatorname{E}(X^{\underline{k}})=F^{(k)}(1)=p^kn^{\underline{k}}\)</span>（手动求导可得），其中 <span class="math inline">\(F(x)\)</span> 是该二项分布的概率生成函数</p><p>考虑将 <span class="math inline">\(f(x)\)</span> 转为下降幂多项式 <span class="math inline">\(g(x)=\sum_{i=0}^mg_ix^{\underline{i}}\)</span>，答案即为 <span class="math inline">\(\sum_{i=0}^mg_ip^in^{\underline{i}}\)</span></p><p>由于已经给出了 <span class="math inline">\(0\sim m\)</span> 处的点值，直接将 <span class="math inline">\(\sum\frac{f(i)}{i!}\)</span> 和 <span class="math inline">\(\sum\frac{(-1)^i}{i!}\)</span> 卷积的 <span class="math inline">\(i\)</span> 次项即为 <span class="math inline">\(g_i\)</span>（不会的可以先看<a href="https://www.luogu.com.cn/problem/P5383">这道模板题</a>）</p><p>时间复杂度 <span class="math inline">\(\operatorname{O}(m\log m)\)</span></p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">20005</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">100005</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> Mod = <span class="hljs-number">998244353</span>, g = <span class="hljs-number">3</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Poly</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-type">int</span> *a;<br>  <span class="hljs-built_in">Poly</span>() &#123;<br>    a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[M];<br>    <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) * M);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">NTT</span><span class="hljs-params">(<span class="hljs-type">int</span> lim, <span class="hljs-type">bool</span> opt)</span></span>;<br>&#125;;<br><span class="hljs-type">int</span> r[M];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pow</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> m)</span></span>;<br><br><span class="hljs-type">int</span> pw[N], dw[N], fac[N], ifac[N];<br><span class="hljs-type">int</span> f[N];<br><span class="hljs-type">int</span> n, m, p;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(m), <span class="hljs-built_in">read</span>(p);<br>  <span class="hljs-type">int</span> lim = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (lim &lt;= (m &lt;&lt; <span class="hljs-number">1</span>)) &#123;<br>    lim &lt;&lt;= <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; lim; ++i) &#123;<br>    r[i] = (r[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) * (lim &gt;&gt; <span class="hljs-number">1</span>));<br>  &#125;<br>  pw[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  dw[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  fac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>    pw[i] = pw[i - <span class="hljs-number">1</span>] * <span class="hljs-number">1ll</span> * p % Mod;<br>    dw[i] = dw[i - <span class="hljs-number">1</span>] * <span class="hljs-number">1ll</span> * (n - i + <span class="hljs-number">1</span>) % Mod;<br>    fac[i] = fac[i - <span class="hljs-number">1</span>] * <span class="hljs-number">1ll</span> * i % Mod;<br>  &#125;<br>  ifac[m] = <span class="hljs-built_in">pow</span>(fac[m], Mod - <span class="hljs-number">2</span>, Mod);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = m - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>    ifac[i] = ifac[i + <span class="hljs-number">1</span>] * <span class="hljs-number">1ll</span> * (i + <span class="hljs-number">1</span>) % Mod;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; ++i) &#123;<br>    <span class="hljs-built_in">read</span>(f[i]);<br>  &#125;<br>  Poly F, G;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; ++i) &#123;<br>    F.a[i] = f[i] * <span class="hljs-number">1ll</span> * ifac[i] % Mod;<br>    G.a[i] = ((i &amp; <span class="hljs-number">1</span>) ? (Mod - ifac[i]) : ifac[i]);<br>  &#125;<br>  F.<span class="hljs-built_in">NTT</span>(lim, <span class="hljs-literal">false</span>), G.<span class="hljs-built_in">NTT</span>(lim, <span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) &#123;<br>    F.a[i] = F.a[i] * <span class="hljs-number">1ll</span> * G.a[i] % Mod;<br>  &#125;<br>  F.<span class="hljs-built_in">NTT</span>(lim, <span class="hljs-literal">true</span>);<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; ++i) &#123;<br>    ans = (ans + F.a[i] * <span class="hljs-number">1ll</span> * pw[i] % Mod * dw[i] % Mod) % Mod;<br>  &#125;<br>  <span class="hljs-built_in">write</span>(ans), EL;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pow</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> m)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>, now = a;<br>  <span class="hljs-keyword">while</span> (b) &#123;<br>    <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) &#123;<br>      ans = ans * <span class="hljs-number">1ll</span> * now % m;<br>    &#125;<br>    now = now * <span class="hljs-number">1ll</span> * now % m;<br>    b &gt;&gt;= <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Poly::NTT</span><span class="hljs-params">(<span class="hljs-type">int</span> lim, <span class="hljs-type">bool</span> opt)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (i &lt; r[i]) &#123;<br>      std::<span class="hljs-built_in">swap</span>(a[i], a[r[i]]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>; l &lt; lim; l &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-type">int</span> gn = <span class="hljs-built_in">pow</span>(g, (Mod - <span class="hljs-number">1</span>) / (l &lt;&lt; <span class="hljs-number">1</span>), Mod);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i += (l &lt;&lt; <span class="hljs-number">1</span>)) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>, gw = <span class="hljs-number">1</span>; j &lt; l; ++j, gw = gw * <span class="hljs-number">1ll</span> * gn % Mod) &#123;<br>        <span class="hljs-type">int</span> x = a[i + j], y = a[i + j + l] * <span class="hljs-number">1ll</span> * gw % Mod;<br>        a[i + j] = (x + y) % Mod;<br>        a[i + j + l] = (x - y + Mod) % Mod;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (opt) &#123;<br>    std::<span class="hljs-built_in">reverse</span>(a + <span class="hljs-number">1</span>, a + lim);<br>    <span class="hljs-type">int</span> iv = <span class="hljs-built_in">pow</span>(lim, Mod - <span class="hljs-number">2</span>, Mod);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) &#123;<br>      a[i] = a[i] * <span class="hljs-number">1ll</span> * iv % Mod;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率与期望 </tag>
            
            <tag> 生成函数 </tag>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Codeforces 1286D」LCC 题解</title>
      <link href="/2020/CF-1286D/"/>
      <url>/2020/CF-1286D/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1286/D">题目</a></p><span id="more"></span><h2 id="思路">思路</h2><p>容易证明，第一次碰撞的粒子初始位置是相邻的，考虑钦定一对粒子的运动方向，计算在它们相撞前，其他粒子都不相撞的概率</p><p>设 <span class="math inline">\(f_{i,j,0/1,0/1}\)</span> 为第 <span class="math inline">\(i\)</span> 到 <span class="math inline">\(j\)</span> 个粒子，第 <span class="math inline">\(i-1\)</span> 个向左/右，第 <span class="math inline">\(j\)</span> 个向左/右，满足在钦定粒子相撞前不相撞的概率（可以人为添加一个速度无穷大，向左运动的粒子 <span class="math inline">\(0\)</span>），于是答案为 <span class="math inline">\(f_{1,n,0,0}+f_{1,n,0,1}\)</span></p><p>发现转移是这样的：<span class="math inline">\(f_{i,j,s_1,s_2}=\sum_{s_3}f_{i,k,s_1,s_3}f_{k,j,s_3,s_2}\)</span>，其中 <span class="math inline">\(k\)</span> 可以任取，显然是个矩阵乘法的形式</p><p>设第 <span class="math inline">\(i\)</span> 个粒子的矩阵为 <span class="math inline">\(M_i\)</span>，若 <span class="math inline">\(i-1\)</span> 向左，<span class="math inline">\(i\)</span> 向左会在钦定前相撞，则 <span class="math inline">\(M_{i,0,0}=0\)</span>，否则 <span class="math inline">\(M_{i,0,0}=1-p_i\)</span>，其他情况类似</p><p>考虑将所有可能相撞的情形按相撞时间升序排序，处理时将 <span class="math inline">\(M_i\)</span> 只保留钦定的一种情况，其他的置为 <span class="math inline">\(0\)</span>，将所有矩阵相乘统计答案，再还原 <span class="math inline">\(M_i\)</span> 并将钦定的情况置为 <span class="math inline">\(0\)</span>（之后的情形中这种运动方向会先碰撞是不满足条件的）</p><p>单点修改，全局查询矩阵乘法用线段树维护即可</p><p>时间复杂度 <span class="math inline">\(\operatorname{O}(n\log n)\)</span></p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100005</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> Mod = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Matrix</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-type">int</span> a[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];<br>  <span class="hljs-built_in">Matrix</span>() &#123;<br>    a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  &#125;<br>  Matrix &amp; <span class="hljs-keyword">operator</span> =(Matrix i) &#123;<br>    a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = i.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>    a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = i.a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br>    a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = i.a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>    a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = i.a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>  &#125;<br>  Matrix <span class="hljs-keyword">operator</span> *(Matrix i) &#123;<br>    Matrix ans;<br>    ans.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = (a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] * <span class="hljs-number">1ll</span> * i.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] + a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] * <span class="hljs-number">1ll</span> * i.a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]) % Mod;<br>    ans.a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = (a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] * <span class="hljs-number">1ll</span> * i.a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] + a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] * <span class="hljs-number">1ll</span> * i.a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]) % Mod;<br>    ans.a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = (a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] * <span class="hljs-number">1ll</span> * i.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] + a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] * <span class="hljs-number">1ll</span> * i.a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]) % Mod;<br>    ans.a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = (a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] * <span class="hljs-number">1ll</span> * i.a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] + a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] * <span class="hljs-number">1ll</span> * i.a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]) % Mod;<br>    <span class="hljs-keyword">return</span> ans;<br>  &#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Query</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-type">int</span> s, v, x, a, b;<br>  <span class="hljs-built_in">Query</span>(<span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> v = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>) : <span class="hljs-built_in">s</span>(s), <span class="hljs-built_in">v</span>(v), <span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">a</span>(a), <span class="hljs-built_in">b</span>(b) &#123;&#125;<br>  <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(Query i) &#123;<br>    <span class="hljs-keyword">return</span> s * <span class="hljs-number">1ll</span> * i.v &lt; i.s * <span class="hljs-number">1ll</span> * v;<br>  &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pow</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> m)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> xl, <span class="hljs-type">int</span> xr)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> xl, <span class="hljs-type">int</span> xr, <span class="hljs-type">int</span> ux)</span></span>;<br><br>Matrix sum[N &lt;&lt; <span class="hljs-number">2</span>];<br>Matrix m[N];<br><span class="hljs-type">int</span> x[N], v[N], p[N];<br>Query q[N &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> cnt;<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(n);<br>  <span class="hljs-type">int</span> iv = <span class="hljs-built_in">pow</span>(<span class="hljs-number">100</span>, Mod - <span class="hljs-number">2</span>, Mod);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    <span class="hljs-built_in">read</span>(x[i]), <span class="hljs-built_in">read</span>(v[i]), <span class="hljs-built_in">read</span>(p[i]);<br>    p[i] = p[i] * <span class="hljs-number">1ll</span> * iv % Mod;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    m[i].a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = m[i].a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = (Mod + <span class="hljs-number">1</span> - p[i]) % Mod;<br>    m[i].a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = m[i].a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = p[i];<br>  &#125;<br>  <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br>    q[++cnt] = <span class="hljs-built_in">Query</span>(x[i] - x[i - <span class="hljs-number">1</span>], v[i] + v[i - <span class="hljs-number">1</span>], i, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (v[i] &gt; v[i - <span class="hljs-number">1</span>]) &#123;<br>      q[++cnt] = <span class="hljs-built_in">Query</span>(x[i] - x[i - <span class="hljs-number">1</span>], v[i] - v[i - <span class="hljs-number">1</span>], i, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (v[i] &lt; v[i - <span class="hljs-number">1</span>]) &#123;<br>      q[++cnt] = <span class="hljs-built_in">Query</span>(x[i] - x[i - <span class="hljs-number">1</span>], v[i - <span class="hljs-number">1</span>] - v[i], i, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>  std::<span class="hljs-built_in">sort</span>(q + <span class="hljs-number">1</span>, q + cnt + <span class="hljs-number">1</span>);<br>  <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; ++i) &#123;<br>    Matrix m1, m2;<br>    m1 = m[q[i].x];<br>    m2.a[q[i].a][q[i].b] = m1.a[q[i].a][q[i].b];<br>    m[q[i].x] = m2;<br>    <span class="hljs-built_in">update</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, q[i].x);<br>    <span class="hljs-type">int</span> tim = q[i].s * <span class="hljs-number">1ll</span> * <span class="hljs-built_in">pow</span>(q[i].v, Mod - <span class="hljs-number">2</span>, Mod) % Mod;<br>    res = (res + (sum[<span class="hljs-number">1</span>].a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] + sum[<span class="hljs-number">1</span>].a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]) * <span class="hljs-number">1ll</span> * tim % Mod) % Mod;<br>    m1.a[q[i].a][q[i].b] = <span class="hljs-number">0</span>;<br>    m[q[i].x] = m1;<br>    <span class="hljs-built_in">update</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, q[i].x);<br>  &#125;<br>  <span class="hljs-built_in">write</span>(res), EL;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pow</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> m)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>, now = a;<br>  <span class="hljs-keyword">while</span> (b) &#123;<br>    <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) &#123;<br>      ans = ans * <span class="hljs-number">1ll</span> * now % m;<br>    &#125;<br>    now = now * <span class="hljs-number">1ll</span> * now % m;<br>    b &gt;&gt;= <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  sum[x] = sum[x &lt;&lt; <span class="hljs-number">1</span>] * sum[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> xl, <span class="hljs-type">int</span> xr)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (xl == xr) &#123;<br>    sum[x] = m[xl];<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-type">int</span> xm = (xl + xr) &gt;&gt; <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">build</span>(x &lt;&lt; <span class="hljs-number">1</span>, xl, xm);<br>  <span class="hljs-built_in">build</span>(x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, xm + <span class="hljs-number">1</span>, xr);<br>  <span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> xl, <span class="hljs-type">int</span> xr, <span class="hljs-type">int</span> ux)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (xl == xr) &#123;<br>    sum[x] = m[xl];<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-type">int</span> xm = (xl + xr) &gt;&gt; <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (ux &lt;= xm) &#123;<br>    <span class="hljs-built_in">update</span>(x &lt;&lt; <span class="hljs-number">1</span>, xl, xm, ux);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">update</span>(x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, xm + <span class="hljs-number">1</span>, xr, ux);<br>  &#125;<br>  <span class="hljs-built_in">pushup</span>(x);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> 概率与期望 </tag>
            
            <tag> 矩阵乘法 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Codeforces 963E」Circles of Waiting 题解</title>
      <link href="/2020/CF-963E/"/>
      <url>/2020/CF-963E/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/963/E">题目</a></p><span id="more"></span><h2 id="思路">思路</h2><p>设 <span class="math inline">\(f_{i,j}\)</span> 为 <span class="math inline">\(\left(i,j\right)\)</span> 移动到外面的期望步数</p><p><span class="math inline">\(f_{i,j}=\begin{cases}  0 &amp; ,i^2+j^2&gt;R^2 \\  p_1f_{i-1,j}+p_2f_{i,j-1}+p_3f_{i+1,j}+p_4f_{i,j+1}+1 &amp; ,i^2+j^2\le R^2 \end{cases}\)</span></p><p>直接消元是 <span class="math inline">\(\operatorname{O}(R^6)\)</span> 的，不太行</p><p>考虑用每行第一个非零数这 <span class="math inline">\(2R+1\)</span> 个数表达出所有数，从左到右从上到下枚举 <span class="math inline">\(f_{i+1,j}=\frac{f_{i,j}-p_1f_{i-1,j}-p_2f_{i,j-1}-p_4f_{i,j+1}-1}{p_3}\)</span> 将每一个元的系数都按该式转移，对每行右侧第一个超出范围的有 <span class="math inline">\(f_{i+1,j}=0\)</span>，于是可以得到 <span class="math inline">\(2R+1\)</span> 个关于这 <span class="math inline">\(2R+1\)</span> 个主元的方程，直接消元即可</p><p>时间复杂度 <span class="math inline">\(\operatorname{O}(R^3)\)</span></p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">120</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">4005</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> Mod = <span class="hljs-number">1000000007</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123; a += b; <span class="hljs-keyword">if</span> (a &gt;= Mod) &#123; a -= Mod; &#125; <span class="hljs-keyword">return</span> a; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123; a -= b; <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">0</span>) &#123; a += Mod; &#125; <span class="hljs-keyword">return</span> a; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pow</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> m)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">work</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>;<br><br><span class="hljs-type">int</span> k[N][N][N];<br><span class="hljs-type">int</span> C[N][N];<br><span class="hljs-type">int</span> equ[N][N];<br><span class="hljs-type">int</span> lim[N];<br><span class="hljs-type">int</span> p1, p2, p3, p4;<br><span class="hljs-type">int</span> R, P;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(R);<br>  P = R + <span class="hljs-number">5</span>;<br>  &#123;<br>    <span class="hljs-built_in">read</span>(p1), <span class="hljs-built_in">read</span>(p2), <span class="hljs-built_in">read</span>(p3), <span class="hljs-built_in">read</span>(p4);<br>    <span class="hljs-type">int</span> s = (p1 * <span class="hljs-number">1ll</span> + p2 + p3 + p4) % Mod;<br>    s = <span class="hljs-built_in">pow</span>(s, Mod - <span class="hljs-number">2</span>, Mod);<br>    p1 = p1 * <span class="hljs-number">1ll</span> * s % Mod;<br>    p2 = p2 * <span class="hljs-number">1ll</span> * s % Mod;<br>    p3 = p3 * <span class="hljs-number">1ll</span> * s % Mod;<br>    p4 = p4 * <span class="hljs-number">1ll</span> * s % Mod;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = -R; i &lt;= R; ++i) &#123;<br>    lim[i + P] = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">sqrt</span>(R * R - <span class="hljs-built_in">abs</span>(i) * <span class="hljs-built_in">abs</span>(i)) + <span class="hljs-number">1</span>);<br>    k[P - lim[i + P] + <span class="hljs-number">1</span>][i + P][i + R] = <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-type">int</span> ip3 = <span class="hljs-built_in">pow</span>(p3, Mod - <span class="hljs-number">2</span>, Mod);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = -R + <span class="hljs-number">1</span>; i &lt;= R + <span class="hljs-number">1</span>; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = -R; j &lt;= R; ++j) &#123;<br>      <span class="hljs-keyword">if</span> (i &gt; -lim[j + P] + <span class="hljs-number">1</span> &amp;&amp; i &lt;= lim[j + P]) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>; l &lt;= <span class="hljs-number">2</span> * R; ++l) &#123;<br>          k[i + P][j + P][l] = <span class="hljs-built_in">sub</span>(k[i - <span class="hljs-number">1</span> + P][j + P][l], <span class="hljs-built_in">add</span>(<br>            <span class="hljs-built_in">add</span>(p1 * <span class="hljs-number">1ll</span> * k[i - <span class="hljs-number">2</span> + P][j + P][l] % Mod, p2 * <span class="hljs-number">1ll</span> * k[i - <span class="hljs-number">1</span> + P][j - <span class="hljs-number">1</span> + P][l] % Mod),<br>            p4 * <span class="hljs-number">1ll</span> * k[i - <span class="hljs-number">1</span> + P][j + <span class="hljs-number">1</span> + P][l] % Mod<br>          )) * <span class="hljs-number">1ll</span> * ip3 % Mod;<br>        &#125;<br>        C[i + P][j + P] = <span class="hljs-built_in">sub</span>(C[i - <span class="hljs-number">1</span> + P][j + P], <span class="hljs-built_in">add</span>(<br>          <span class="hljs-built_in">add</span>(p1 * <span class="hljs-number">1ll</span> * C[i - <span class="hljs-number">2</span> + P][j + P] % Mod, p2 * <span class="hljs-number">1ll</span> * C[i - <span class="hljs-number">1</span> + P][j - <span class="hljs-number">1</span> + P] % Mod),<br>          <span class="hljs-built_in">add</span>(p4 * <span class="hljs-number">1ll</span> * C[i - <span class="hljs-number">1</span> + P][j + <span class="hljs-number">1</span> + P] % Mod, <span class="hljs-number">1</span>)<br>        )) * <span class="hljs-number">1ll</span> * ip3 % Mod;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = -R; i &lt;= R; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>; l &lt;= <span class="hljs-number">2</span> * R; ++l) &#123;<br>      equ[i + R + <span class="hljs-number">1</span>][l + <span class="hljs-number">1</span>] = k[P + lim[i + P]][i + P][l];<br>    &#125;<br>    equ[i + R + <span class="hljs-number">1</span>][<span class="hljs-number">2</span> * R + <span class="hljs-number">2</span>] = <span class="hljs-built_in">sub</span>(<span class="hljs-number">0</span>, C[P + lim[i + P]][i + P]);<br>  &#125;<br>  <span class="hljs-built_in">work</span>(<span class="hljs-number">2</span> * R + <span class="hljs-number">1</span>);<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>; l &lt;= <span class="hljs-number">2</span> * R; ++l) &#123;<br>    ans = <span class="hljs-built_in">add</span>(ans, k[P][P][l] * <span class="hljs-number">1ll</span> * equ[l + <span class="hljs-number">1</span>][<span class="hljs-number">2</span> * R + <span class="hljs-number">2</span>] % Mod);<br>  &#125;<br>  ans = <span class="hljs-built_in">add</span>(ans, C[P][P]);<br>  <span class="hljs-built_in">write</span>(ans), EL;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pow</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> m)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>, now = a;<br>  <span class="hljs-keyword">while</span> (b) &#123;<br>    <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) &#123;<br>      ans = ans * <span class="hljs-number">1ll</span> * now % m;<br>    &#125;<br>    now = now * <span class="hljs-number">1ll</span> * now % m;<br>    b &gt;&gt;= <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">work</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    <span class="hljs-type">int</span> tmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= n; ++j) &#123;<br>      <span class="hljs-keyword">if</span> (equ[j][i]) &#123;<br>        tmp = j;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (tmp != i) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= n + <span class="hljs-number">1</span>; ++j) &#123;<br>        std::<span class="hljs-built_in">swap</span>(equ[i][j], equ[tmp][j]);<br>      &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> iv = <span class="hljs-built_in">pow</span>(equ[i][i], Mod - <span class="hljs-number">2</span>, Mod);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= n + <span class="hljs-number">1</span>; ++j) &#123;<br>      equ[i][j] = equ[i][j] * <span class="hljs-number">1ll</span> * iv % Mod;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = n + <span class="hljs-number">1</span>; k &gt;= i; --k) &#123;<br>        equ[j][k] = <span class="hljs-built_in">sub</span>(equ[j][k], equ[i][k] * <span class="hljs-number">1ll</span> * equ[j][i] % Mod);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; --i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123;<br>      equ[i][n + <span class="hljs-number">1</span>] = <span class="hljs-built_in">sub</span>(equ[i][n + <span class="hljs-number">1</span>], equ[i][j] * <span class="hljs-number">1ll</span> * equ[j][n + <span class="hljs-number">1</span>] % Mod);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> 概率与期望 </tag>
            
            <tag> 高斯消元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「学习笔记」浅谈离散微积分</title>
      <link href="/2020/Discrete-Calculus/"/>
      <url>/2020/Discrete-Calculus/</url>
      
        <content type="html"><![CDATA[<p>微积分是数学分析中的有力工具，其核心是微分和积分，类比微积分中的一整套系统，《具体数学》中引入了一套研究差分和求和的工具——离散微积分 (discrete calculus)</p><span id="more"></span><h2 id="回顾微积分">回顾微积分</h2><p>在微积分中，我们有微分算子 (differential operator) <span class="math inline">\(Df(x)=\lim\limits_{\Delta x\rightarrow0}\frac{f(x+\Delta x)-f(x)}{\Delta x}\)</span></p><p>若有 <span class="math inline">\(DF(x)=f(x)\)</span> 则称 <span class="math inline">\(F(x)\)</span> 是 <span class="math inline">\(f(x)\)</span> 的原函数</p><p>微积分的核心：牛顿 - 莱布尼茨公式 (Newton - Leibniz formula) <span class="math inline">\(\int_a^bf(x)dx=F(b)-F(a)\)</span></p><h2 id="定义与记号">定义与记号</h2><p>类比微分算子，定义差分算子 <span class="math inline">\(\Delta f(x)=f(x+1)-f(x)\)</span></p><p>类似地，若 <span class="math inline">\(\Delta F(x)=f(x)\)</span> 则称 <span class="math inline">\(F(x)\)</span> 是 <span class="math inline">\(f(x)\)</span> 的原函数，不难发现 <span class="math inline">\(\sum\limits_{x=a}^{b-1}f(x)=F(b)-F(a)\)</span></p><p>于是类比定积分，定义和式 <span class="math inline">\(\sum\limits_a^bf(x)\delta x=\sum\limits_{x=a}^{b-1}f(x)=F(b)-F(a)\)</span></p><p>类比不定积分，有不定和式 <span class="math inline">\(\sum f(x)\delta x=F(x)+C\)</span> 其中 <span class="math inline">\(C\)</span> 为常数</p><p>至此，我们类比定义了离散情况下的微分、积分和牛顿 - 莱布尼茨公式</p><h2 id="从定义开始完善系统">从定义开始完善系统</h2><p>仅靠定义和牛顿 - 莱布尼茨公式构建不起微积分的大厦，同样的，刚才定义的记号也无法帮助我们快速计算和式，我们需要进一步探究它的性质</p><p>首先，根据定义显然有差分算子对于加法、减法的分配率成立</p><h3 id="幂法则">幂法则</h3><p>先从微积分中最简单的幂法则说起，寻找它的替代品</p><p>在微积分中，有 <span class="math inline">\(Dx^n=nx^{n-1}\)</span> 但显然 <span class="math inline">\(\Delta x^n\neq nx^{n-1}\)</span>，但是我们有一种类似幂的数学工具：下降幂</p><p>定义下降幂 <span class="math inline">\(x^\underline{n}=\frac{x!}{(x-n)!}\)</span></p><p>发现 <span class="math inline">\(\Delta x^\underline{n}=\frac{(x+1)!}{(x-n+1)!}-\frac{x!}{(x-n)!}=nx^\underline{n-1}\)</span></p><p>同样的，在 <span class="math inline">\(n\neq-1\)</span> 时，有不定和式 <span class="math inline">\(\sum x^\underline{n}\delta x=\frac{x^\underline{n+1}}{n+1}+C\)</span></p><p>类似 <span class="math inline">\(\int\frac{1}{x}dx=\ln x+C\)</span>，<span class="math inline">\(n=1\)</span> 时，有 <span class="math inline">\(\sum x^{\underline{-1}}\delta x=H_x+C\)</span>，其中 <span class="math inline">\(H_x\)</span> 为调和级数前 <span class="math inline">\(x\)</span> 项和，不难发现 <span class="math inline">\(x\rightarrow\infty\)</span> 时 <span class="math inline">\(H_x=\ln x+\gamma\)</span> 其中 <span class="math inline">\(\gamma\)</span> 为 欧拉 - 马歇罗尼常数，这一点也印证了离散微积分和微积分密不可分的联系</p><p>例题：</p><p>求和 <span class="math inline">\(\sum\limits_{x=1}^nx^2\)</span></p><p>首先有 <span class="math inline">\(x^2=x^\underline{2}+x^\underline{1}\)</span></p><p>考虑求出原函数 <span class="math display">\[\begin{aligned}\sum x^2\delta x=&amp;\sum(x^\underline{2}+x^\underline{1})\delta x\\=&amp;\frac{x^{\underline{3}}}{3}+\frac{x^{\underline{2}}}{2}+C\\=&amp;\frac{x(x-1)(2x-1)}{6}+C\end{aligned}\]</span></p><p>于是有 <span class="math display">\[\begin{aligned}\sum\limits_{x=1}^nx^2&amp;=\sum\limits_1^{n+1}x^2\delta x\\&amp;=\frac{n(n+1)(2n+1)}{6}+C-(0+C)\\&amp;=\frac{n(n+1)(2n+1)}{6}\end{aligned}\]</span></p><p>在 OI 中，我们可以将多项式转换为下降幂多项式，从而在 <span class="math inline">\(\operatorname{O}(n\log^2n)\)</span> 时间内求出 <span class="math inline">\(n\)</span> 次多项式的值的前缀和</p><p>至此，我们探究出了多项式的差分、求和并探寻了离散微积分在处理求和上的初步应用</p><h3 id="指数函数">指数函数</h3><p>在微积分中，以 <span class="math inline">\(e\)</span> 为底的指数函数 <span class="math inline">\(e^x\)</span> 拥有良好的性质：<span class="math inline">\(De^x=e^x\)</span> 和 <span class="math inline">\(\int e^xdx=e^x+C\)</span> 那么在离散微积分中是否也有具备这种性质的函数呢？</p><p>答案是有的：<span class="math inline">\(2^x\)</span></p><p>不难发现 <span class="math inline">\(D2^x=2^{x+1}-2^x=2^x\)</span> 和 <span class="math inline">\(\sum2^x\delta x=2^x+C\)</span></p><p>在微积分中，对于任意底数的指数函数 <span class="math inline">\(a^x\)</span> 有 <span class="math inline">\(Da^x=a^x\ln a\)</span> 和 <span class="math inline">\(\int a^xdx=\frac{a^x}{\ln a}+C\)</span></p><p>首先 <span class="math inline">\(a^x\)</span> 的差分显然是 <span class="math inline">\(a^x(a-1)\)</span></p><p>考虑 <span class="math inline">\(a^x\)</span> 的不定和式，不妨设 <span class="math inline">\(\sum a^x\delta x=ka^x+C\)</span>，两边求差分得 <span class="math inline">\(k=\frac{1}{a-1}\)</span>，于是 <span class="math inline">\(\sum a^x\delta x=\frac{a^x}{a-1}+C\)</span></p><h3 id="积法则">积法则</h3><p>定义平移算子 <span class="math inline">\(Ef(x)=f(x+1)\)</span></p><p>不难发现</p><p><span class="math display">\[\begin{aligned}\Delta(u(x)v(x))&amp;=u(x+1)v(x+1)-u(x)v(x)\\&amp;=u(x+1)v(x+1)-u(x+1)v(x)+u(x+1)v(x)-u(x)v(x)\\&amp;=u(x+1)\Delta v(x)+v(x)\Delta u(x)\\&amp;=u(x)\Delta v(x)+v(x+1)\Delta u(x)\end{aligned}\]</span></p><p>更为简单的表示为：<span class="math inline">\(\Delta(uv)=u\Delta v+Ev\Delta u=Eu\Delta v+v\Delta u\)</span></p><h3 id="分部求和">分部求和</h3><p>在微积分中有分部积分公式：<span class="math inline">\(\int udv=uv-\int vdu\)</span></p><p>这一公式是对微分的积法则移项后左右积分得到的</p><p>同理也可以得到分部求和的公式：</p><p><span class="math display">\[\begin{aligned}\Delta(uv)&amp;=u\Delta v+Ev\Delta u \\\Rightarrow u\Delta v&amp;=\Delta(uv)-Ev\Delta u \\\Rightarrow\sum u\Delta v&amp;=uv-\sum Ev\Delta u\end{aligned}\]</span></p><h2 id="例题与应用">例题与应用</h2><p>求和 <span class="math inline">\(\sum\limits_{x=0}^nx2^x\)</span></p><p>先求原函数，考虑带入 <span class="math inline">\(u=x,\Delta v=2^x,\Delta u=1,v=2^x\)</span>: <span class="math display">\[\begin{aligned}&amp;\sum x2^x\delta x\\=&amp;x2^x-\sum2^{x+1}\delta x\\=&amp;x2^x-2^{x+1}+C\end{aligned}\]</span></p><p>于是有： <span class="math display">\[\begin{aligned}\sum\limits_{x=0}^nx2^x&amp;=\sum_0^{n+1}x2^x\delta x\\&amp;=(n+1)2^{n+1}-2^{n+2}+C-(0-2+C)\\&amp;=(n-1)2^{n+1}+2\end{aligned}\]</span></p><p>求和 <span class="math inline">\(\sum\limits_{x=1}^n(-1)^xx^2\)</span></p><p>先求原函数，考虑带入 <span class="math inline">\(u=x^2,\Delta v=(-1)^x,\Delta u=2x+1,v=-\frac{(-1)^x}{2}\)</span>: <span class="math display">\[\begin{aligned}&amp;\sum x^2(-1)^x\delta x\\=&amp;-\frac{x^2(-1)^x}{2}-\sum-\frac{(-1)^{x+1}(2x+1)}{2}\delta x\\=&amp;-\frac{x^2(-1)^x}{2}-\sum\frac{2x+1}{2}(-1)^x\delta x\end{aligned}\]</span></p><p>对于后一项继续分部求和，带入 <span class="math inline">\(u=\frac{2x+1}{2},\Delta v=(-1)^x,\Delta u=1,v=-\frac{(-1)^x}{2}\)</span>:</p><p><span class="math display">\[\begin{aligned}&amp;\sum\frac{2x+1}{2}(-1)^x\delta x\\=&amp;-\frac{(2x+1)(-1)^x}{4}-\sum-\frac{(-1)^{x+1}}{2}\delta x\\=&amp;-\frac{(2x+1)(-1)^x}{4}-\frac{1}{2}\sum(-1)^x\delta x\\=&amp;-\frac{(2x+1)(-1)^x}{4}+\frac{1}{4}(-1)^x+C\\=&amp;-\frac{(-1)^xx}{2}+C\end{aligned}\]</span></p><p>带回上式： <span class="math display">\[\begin{aligned}&amp;\sum(-1)^xx^2\delta x\\=&amp;-\frac{x^2(-1)^x}{2}+\frac{(-1)^xx}{2}+C\\=&amp;-\frac{(-1)^xx(x-1)}{2}+C\end{aligned}\]</span></p><p>求和： <span class="math display">\[\begin{aligned}&amp;\sum\limits_{i=1}^n(-1)^xx^2\\=&amp;-\frac{(-1)^{n+1}n(n+1)}{2}-\left(-\frac{-1\times1\times0}{2}\right)\\=&amp;\frac{(-1)^nn(n+1)}{2}\end{aligned}\]</span></p><p>HEOI/TJOI 2016 求和：<a href="https://www.luogu.com.cn/problem/P4091">洛谷</a> <a href="https://loj.ac/problem/2058">LOJ</a></p><p>求和 <span class="math inline">\(\sum\limits_{i=0}^n\sum\limits_{j=0}^i\left\{\begin{matrix}i\\j\end{matrix}\right\}\times2^j\times(j!)\)</span></p><p>首先进行变形： <span class="math display">\[\begin{aligned}&amp;\sum\limits_{i=0}^n\sum\limits_{j=0}^i\left\{\begin{matrix}i\\j\end{matrix}\right\}\times2^j\times(j!)\\=&amp;\sum\limits_{i=0}^n\sum\limits_{j=0}^n\left\{\begin{matrix}i\\j\end{matrix}\right\}\times2^j\times(j!)\\=&amp;\sum\limits_{i=0}^n\sum\limits_{j=0}^n2^j\sum\limits_{k=0}^j(-1)^{j-k}\binom{j}{k}k^i\\=&amp;\sum\limits_{k=0}^nf(k)(-1)^k\sum\limits_{j=0}^n(-2)^j\binom{j}{k}\end{aligned}\]</span></p><p>其中 <span class="math inline">\(f(k)=\sum_{i=0}^nk^i\)</span>，特别地 <span class="math inline">\(0^0=1\)</span></p><p>考虑用离散微积分简化后一个和式，于是求原函数，考虑带入<span class="math inline">\(u=\binom{j}{k},\Delta v=(-2)^j,\Delta u=\binom{j}{k-1},v=\frac{(-2)^j}{-3}\)</span>： <span class="math display">\[\sum(-2)^j\binom{j}{k}\delta j=\frac{(-2)^j}{-3}\binom{j}{k}-\frac{-2}{-3}\sum(-2)^j\binom{j}{k-1}\delta j\]</span></p><p>另外有： <span class="math display">\[\sum(-2)^j\binom{j}{0}\delta j=\sum\frac{(-2)^j}{-3}\]</span></p><p>于是对于每一个 <span class="math inline">\(k\)</span> 递推出它的原函数在 <span class="math inline">\(n+1\)</span> 和 <span class="math inline">\(0\)</span> 处的值，相减即可</p><p>用线性筛筛出 <span class="math inline">\(f(k)\)</span> 即可在 <span class="math inline">\(\operatorname{O}(n)\)</span> 时间内得到答案</p><p>完。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Codeforces 568B」Symmetric and Transitive 题解</title>
      <link href="/2020/CF-568B/"/>
      <url>/2020/CF-568B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/568/B">题目</a></p><span id="more"></span><h2 id="题意">题意</h2><p>计数<span class="math inline">\(n\)</span>个元素的满足对称性、传递性，但不满足自反性的二元关系种数，<span class="math inline">\(n\le4000\)</span></p><h2 id="思路">思路</h2><p>发现若<span class="math inline">\(a\sim b\)</span>则有<span class="math inline">\(b\sim a,a\sim a,b\sim b\)</span>，所以一定存在不和其他所有元素相连的，不妨设有<span class="math inline">\(n-k\)</span>个单独点，剩下的<span class="math inline">\(k\)</span>个点可以分为几个集合（注意大小为<span class="math inline">\(1\)</span>的集合不等于单独点，大小为<span class="math inline">\(1\)</span>的集合有自身连自身），此时对答案的贡献为<span class="math inline">\(\binom{n}{k}B_{k}\)</span>（<span class="math inline">\(n\)</span>个里选<span class="math inline">\(k\)</span>个分成若干集合，其他都是单独的），其中<span class="math inline">\(B_i\)</span>为第<span class="math inline">\(i\)</span>个贝尔数，等于<span class="math inline">\(\sum_{j=1}^i\left\{\begin{matrix}i\\j\end{matrix}\right\}\)</span>，于是答案就为<span class="math inline">\(\sum_{k=0}^{n-1}\binom{n}{k}B_k\)</span></p><p>由于<span class="math inline">\(n\)</span>很小，<span class="math inline">\(\operatorname{O}(n^2)\)</span>搞出第二类 Stirling 数即可</p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> fac[N], ifac[N];<br><span class="hljs-type">int</span> S[N][N];<br><span class="hljs-type">int</span> Bell[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(n);<br>  fac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    fac[i] = fac[i - <span class="hljs-number">1</span>] * <span class="hljs-number">1ll</span> * i % Mod;<br>  &#125;<br>  ifac[n] = <span class="hljs-built_in">pow</span>(fac[n], Mod - <span class="hljs-number">2</span>, Mod);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>    ifac[i] = ifac[i + <span class="hljs-number">1</span>] * <span class="hljs-number">1ll</span> * (i + <span class="hljs-number">1</span>) % Mod;<br>  &#125;<br>  S[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  Bell[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; ++j) &#123;<br>      S[i][j] = (S[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + S[i - <span class="hljs-number">1</span>][j] * <span class="hljs-number">1ll</span> * j % Mod) % Mod;<br>      Bell[i] = (Bell[i] + S[i][j]) % Mod;<br>    &#125;<br>  &#125;<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>    ans = (ans + <span class="hljs-built_in">C</span>(n, i) * <span class="hljs-number">1ll</span> * Bell[i] % Mod) % Mod;<br>  &#125;<br>  <span class="hljs-built_in">write</span>(ans), EL;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> 计数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「学习笔记」Bluestein&#39;s FFT Algorithm 任意长度卷积算法</title>
      <link href="/2020/Bluestein/"/>
      <url>/2020/Bluestein/</url>
      
        <content type="html"><![CDATA[<p>简略介绍Bluestein’s FFT Algorithm，一种用于计算任意长度卷积的算法。</p><span id="more"></span><h2 id="适用范围">适用范围</h2><p>简而言之，仅适用于存在<strong>单位根</strong>的情况</p><ol type="1"><li>显然FFT可以，<span class="math inline">\(\omega_n=e^{\frac{2\pi i}{n}}\)</span></li><li>NTT需满足<span class="math inline">\(n\mid (Mod - 1),\omega_n=g^\frac{Mod-1}{n}\)</span></li></ol><h2 id="推式子">推式子</h2><p>考虑DFT的实质：求单位根处的点值。</p><p>设<span class="math inline">\(f(x)=\sum\limits^n_{i=0}a_ix^i\)</span></p><p><span class="math inline">\(f(\omega_n^k)=\sum\limits^n_{i=0}a_i\omega_n^{ik}\)</span></p><p>考虑<span class="math inline">\(ik=\binom{i+k}{2}-\binom{i}{2}-\binom{k}{2}\)</span>（用组合意义或暴力拆开都易证明）</p><p><span class="math inline">\(\begin{aligned}f(\omega_n^k)&amp;=\sum\limits^n_{i=0}a_i\omega_n^{\binom{i+k}{2}-\binom{i}{2}-\binom{k}{2}}\\&amp;=\omega_n^{-\binom{k}{2}}\sum\limits^n_{i=0}a_i\omega_n^{-\binom{i}{2}}\omega_n^\binom{i+k}{2}\end{aligned}\)</span></p><p>考虑转为卷积的形式，不难发现<span class="math inline">\((n-i)+(i+k)=n+k\)</span></p><p>设<span class="math inline">\(g(x)=\sum\limits^n_{i=0}a_i\omega_n^{-\binom{i}{2}}x^{n-i}\)</span>和<span class="math inline">\(h(x)=\sum\limits^{2n}_{i=0}\omega^{\binom{i}{2}}x^i\)</span></p><p><span class="math inline">\(f(\omega_n^k)=\omega^{-\binom{k}{2}}\times([x^{n+k}]g(x)\times h(x))\)</span></p><p>考虑IDFT即为对所有单位根取到数后跑DFT，将上文中所有二项式系数取相反数即可。</p><p><del>代码较为简单，不放了</del></p><h2 id="应用">应用</h2><p>一般算卷积直接拓展到<span class="math inline">\(2\)</span>的次幂即可，需要用到的场景主要为任意长度循环卷积，即<span class="math inline">\(a_i\times b_j\rightarrow c_{(i+j)\operatorname{mod}n}\)</span></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 多项式 </tag>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OI记忆（一）：初中的OI生涯</title>
      <link href="/2020/OI-story-one/"/>
      <url>/2020/OI-story-one/</url>
      
        <content type="html"><![CDATA[<h1 id="初中oi学习的总结与回忆">初中OI学习的总结与回忆</h1><span id="more"></span><p>省选结束，初中的OI生涯算是基本结束了吧，尝试着去写一些没人看的东西，大抵是流水账，对学弟学妹可能没什么参考价值，算是写给自己看的吧。</p><h2 id="先讲讲初中以前">〇、先讲讲初中以前</h2><p>机缘巧合中，小学接触了算法竞赛，六年级写打暴力拿了个普及一等(NOIP2016 310)，混进了本市最好的初中。说是混，是因为小学我大部分时间用在了打游戏上，没花多少时间练习，现在想来实在是很傻，算是浪费了一点机会吧。</p><h2 id="一初一">一、初一</h2><p>刚上初一的我甚至有些骄傲，后来才发现比我强的神仙多的去了，NOIP2017继续打暴力，320没进步多少。继续混到了我省的初中组省赛（在省选之余单独出套给初中生的题目，难度介于普及和提高之间），出考场发现我T1没开<code>long long</code> 以为自己T3能过成绩却是一分不拿，看着低得令人发指的成绩，我才意识到自己的菜逼和狂妄，那些我曾经看不起的却有些天赋异禀，早就超过了我。省选后的日子是我整个初中最认真的时间之一，每天早上5点多起来，让自己清醒后就开始学习，还记得当时学习了网络流，写了两三道网络流24题里的题，之后便要准备期末考试，便没有继续了。</p><p>初一从洛谷知道了珂朵莉，看了末日三问，从此变成二刺猿（雾），初一的暑假便又是颓废，一天能花好几个小时上b站，当时补了很多老番，事实证明：看番害人不浅（笑）。</p><h2 id="二初二">二、初二</h2><p>NOIP2018原先准备同时报普及提高后来只报了普及。在考场上胃疼，没发挥好，拿了个强差人意的分数。NOIP之后是文化课和混日子，OI啥都没学会，就写了些基础数据结构。</p><p>暑假去ASDFZ集训，NOIP模拟赛次次垫底，感觉NOIP后就要退役了，高中好好搞文化课，结果NOIP就没了，没能成功NOIP后退役，不过后来又有了CSP-J/S。</p><p>集训期间学了不少东西，做了不少题，比在家颓废效率高（笑）。</p><h2 id="三初三">三、初三</h2><p>开学后一边搞文化课一边训练。每周末的CSP模拟赛又是次次垫底。CSP前又学了不少东西。</p><p>CSP是有史以来发挥最好的一次，S组D1T1、T2打满，T3暴力出了锅不过只少5分，D2T1有些脑抽只打了64的暴力少打20分的傻逼dp，D2T2猜结论拿了88，D2T3没看到等号（是满二叉树）少打25，J组成功在初中AK了一次。打的暴力都没挂还猜中了一个结论算是挺不错了。</p><p>成功没有退役，苟在ASDFZ训练。上学期期末炸了，文科成绩像个憨憨。</p><p>报名了WC，打铁预定，过年前听了不少学长讲课。jyb新年1号文件强基计划在意料之中，但还是给竞赛生不小的意外，天知道下一步该怎么走。放假前在机房还有春节联欢，打扫卫生+吃蛋糕。lzz和wyy还有zzt来了，lzz和wyy。。。（酸了），以及名场面：lzz：（指着zzt的成绩版上的“APIO2018 银牌”，惊讶地）对zzt：“你怎么还有银牌啊？”。</p><p>新冠疫情一天一天加重，趁着电影院没封，年前去看了京紫的外传，回家路上看到了WC延迟的消息。</p><p>之后是快乐的网课生活，就是去年的讲课录屏，许多听不懂的，以及家中的环境让人发困。</p><p>之后复课了，但由于疫情防控的原因，直到省选前一周才会ASDFZ训练。延迟的一模成绩还不错。</p><p>省选成功垫底，AH用的A卷，D2T1想写60结果数组开大了全mle一分没拿，D1T3的暴力也没拿到分。（rp守恒的有力证据）。</p><p>省选垫底被训了嘤嘤嘤，还没考过初二学弟，枯了。在弱市中考没啥压力，考前OI为主，NOI模拟赛一场比一场懵逼，有一套之前出的模拟赛竟然考到了保序回归（省选D1T3），不过就算赛前考了我估计也做不出来2333。</p><h2 id="四后记">四、后记</h2><p>马上要中考了，升学没什么压力，但是对于高中的路十分迷茫，ASDFZ是被卡1/3最严重的学校之一，如果不放开可能会学两年OI然后碌碌无为地去搞高考吧。</p><p>竞赛这条路越来越扑朔迷离，很喜欢Z新豪的《布衣》中的一句歌词：“路在脚下何必问路在何方”，OIer是个很温馨的群体，对于热爱着的OI也难以舍弃，既然路在脚下，就大胆地向前走吧，热爱让我们相遇，热爱让我们前行。</p><p>谨以此文献给我珍重的OI记忆。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>「洛谷P5395」第二类斯特林数·行 题解</title>
      <link href="/2020/luogu-5395/"/>
      <url>/2020/luogu-5395/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P5395">题目</a></p><span id="more"></span><h2 id="题意">题意</h2><p>求<span class="math inline">\(\left\{\begin{matrix}n\\i\end{matrix}\right\},i=0,1,\dots,n\)</span></p><p>其中<span class="math inline">\(\left\{\begin{matrix}n\\i\end{matrix}\right\}\)</span>为第二类斯特林数，组合意义为将<span class="math inline">\(n\)</span>个不同元素划入<span class="math inline">\(i\)</span>个相同集合（所有集合非空）的方案数，有递推式<span class="math inline">\(\left\{\begin{matrix}n\\m\end{matrix}\right\}=\left\{\begin{matrix}n-1\\m-1\end{matrix}\right\}+\left\{\begin{matrix}n-1\\m\end{matrix}\right\}\times m\)</span></p><h2 id="推导">推导</h2><p>先说结论：</p><p><span class="math display">\[\boxed{\left\{\begin{matrix}n\\m\end{matrix}\right\}=\sum\limits^n_{i=0}\frac{(-1)^i}{i!}\times\frac{(m-i)^n}{(m-i)!}}\]</span></p><p>证明如下：</p><p>先将<span class="math inline">\(m\)</span>个集合标号，钦定其中<span class="math inline">\(i\)</span>个集合为空，<span class="math inline">\(n\)</span>个元素任意安排到剩余的<span class="math inline">\(m-i\)</span>个集合（可以为空）的方案数为<span class="math inline">\(\binom{m}{i}\times(m-i)^n\)</span>，由于原先的集合是无标号的，所以还要除以<span class="math inline">\(m!\)</span></p><p>于是就有：<span class="math inline">\(m\)</span>个集合中<strong>至少</strong>有<span class="math inline">\(i\)</span>个为空的方案数为<span class="math inline">\(\frac{1}{m!}\times\binom{m}{i}\times(m-i)^n\)</span></p><p>考虑对其进行容斥，即可得所有集合非空的方案数：</p><p><span class="math display">\[\begin{aligned}\left\{\begin{matrix}n\\m\end{matrix}\right\}&amp;=\sum\limits^m_{i=0}(-1)^i\times\frac{1}{m!}\times\binom{m}{i}\times(m-i)^n\\&amp;=\sum\limits^m_{i=0}(-1)^i\times\frac{1}{m!}\times\frac{m!}{i!\times(m-i)!}\times(m-i)^n\\&amp;=\sum\limits^m_{i=0}\frac{(-1)^i}{i!}\times\frac{(m-i)^n}{(m-i)!}\end{aligned}\]</span></p><p>发现是一个卷积的形式，将<span class="math inline">\(\sum\limits^n_{i=0}\frac{(-1)^i}{i!}x^i\)</span>和<span class="math inline">\(\sum\limits^n_{i=0}\frac{i^n}{i!}x^i\)</span>做卷积，<span class="math inline">\(i\)</span>次项的系数即为<span class="math inline">\(\left\{\begin{matrix}n\\i\end{matrix}\right\}\)</span></p><p>时间复杂度<span class="math inline">\(O(n\log_2n)\)</span></p><h2 id="代码">代码</h2><p>大约就是一个NTT板子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Polynomial</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-type">int</span> *a;<br>  <span class="hljs-built_in">Polynomial</span>() &#123;<br>    a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[N];<br>    <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) * N);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">NTT</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">bool</span>)</span></span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pow</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> m)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>, now = a;<br>  <span class="hljs-keyword">while</span> (b) &#123;<br>    <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) &#123;<br>      ans = ans * <span class="hljs-number">1ll</span> * now % m;<br>    &#125;<br>    now = now * <span class="hljs-number">1ll</span> * now % m;<br>    b &gt;&gt;= <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Polynomial::NTT</span><span class="hljs-params">(<span class="hljs-type">int</span> lim, <span class="hljs-type">bool</span> opt)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (opt) &#123;<br>    std::<span class="hljs-built_in">reverse</span>(a + <span class="hljs-number">1</span>, a + lim);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (i &lt; r[i]) &#123;<br>      std::<span class="hljs-built_in">swap</span>(a[i], a[r[i]]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>; l &lt; lim; l &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-type">int</span> gw = <span class="hljs-built_in">pow</span>(g, (Mod - <span class="hljs-number">1</span>) / (l &lt;&lt; <span class="hljs-number">1</span>), Mod);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i += (l &lt;&lt; <span class="hljs-number">1</span>)) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>, gn = <span class="hljs-number">1</span>; j &lt; l; ++j, gn = gn * <span class="hljs-number">1ll</span> * gw % Mod) &#123;<br>        <span class="hljs-type">int</span> x = a[i | j], y = a[i | j | l] * <span class="hljs-number">1ll</span> * gn % Mod;<br>        a[i | j] = (x + y) % Mod;<br>        a[i | j | l] = (x - y + Mod) % Mod;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (opt) &#123;<br>    <span class="hljs-type">int</span> iv = <span class="hljs-built_in">pow</span>(lim, Mod - <span class="hljs-number">2</span>, Mod);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) &#123;<br>      a[i] = a[i] * <span class="hljs-number">1ll</span> * iv % Mod;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>  fac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    fac[i] = fac[i - <span class="hljs-number">1</span>] * <span class="hljs-number">1ll</span> * i % Mod;<br>  &#125;<br>  ifac[n] = <span class="hljs-built_in">pow</span>(fac[n], Mod - <span class="hljs-number">2</span>, Mod);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>    ifac[i] = ifac[i + <span class="hljs-number">1</span>] * <span class="hljs-number">1ll</span> * (i + <span class="hljs-number">1</span>) % Mod;<br>  &#125;<br>  Polynomial f, g;<br>  f.a[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, g.a[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    f.a[i] = (i &amp; <span class="hljs-number">1</span>) ? (Mod - ifac[i]) : ifac[i];<br>    g.a[i] = <span class="hljs-built_in">pow</span>(i, n, Mod) * <span class="hljs-number">1ll</span> * ifac[i] % Mod;<br>  &#125;<br>  <span class="hljs-type">int</span> lim = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (lim &lt;= (n &lt;&lt; <span class="hljs-number">1</span>)) &#123;<br>    lim &lt;&lt;= <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) &#123;<br>    r[i] = (r[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) * (lim &gt;&gt; <span class="hljs-number">1</span>));<br>  &#125;<br>  f.<span class="hljs-built_in">NTT</span>(lim, <span class="hljs-literal">false</span>), g.<span class="hljs-built_in">NTT</span>(lim, <span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) &#123;<br>    f.a[i] = f.a[i] * <span class="hljs-number">1ll</span> * g.a[i] % Mod;<br>  &#125;<br>  f.<span class="hljs-built_in">NTT</span>(lim, <span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i) &#123;<br>    <span class="hljs-built_in">write</span>(f.a[i]), SP;<br>  &#125;<br>  EL;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 第二类斯特林数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「洛谷P5408」第一类斯特林数·行 题解</title>
      <link href="/2020/luogu-5408/"/>
      <url>/2020/luogu-5408/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P5408">题目</a></p><span id="more"></span><h2 id="题意">题意</h2><p>求 <span class="math inline">\(\left[\begin{matrix}n\\i\end{matrix}\right],i=0,1,\dots,n\)</span></p><p>其中 <span class="math inline">\(\left[\begin{matrix}n\\i\end{matrix}\right]\)</span> 为第一类斯特林数，组合意义为将 <span class="math inline">\(n\)</span> 个不同元素放入<span class="math inline">\(i\)</span>个相同圆排列（非空）的方案数，有递推式 <span class="math inline">\(\left[\begin{matrix}n\\m\end{matrix}\right]=\left[\begin{matrix}n-1\\m-1\end{matrix}\right]+\left[\begin{matrix}n-1\\m\end{matrix}\right]\times(n-1)\)</span></p><h2 id="推导">推导</h2><p>一个结论：</p><p><span class="math display">\[\boxed{\sum\limits^n_{i=0}\left[\begin{matrix}n\\i\end{matrix}\right]x^i=x^{\overline{n}}}\]</span></p><p><span class="math inline">\(x^{\overline{n}}\)</span> 为 <span class="math inline">\(x\)</span> 的 <span class="math inline">\(n\)</span> 次上升幂，等于<span class="math inline">\(\prod\limits^{n-1}_{i=0}(x+i)\)</span></p><p>考虑用数学归纳法证明：</p><ol type="1"><li><p><span class="math inline">\(n=1\)</span> 时该结论显然成立</p></li><li><p>证明为 <span class="math inline">\(n\)</span> 时成立则为 <span class="math inline">\(n+1\)</span> 时也成立：</p><p><span class="math display">\[\begin{aligned}x^{\overline{n+1}}&amp;=x^{\overline{n}}\times(x+n)\\&amp;=(x+n)\times\sum\limits^n_{i=0}\left[\begin{matrix}n\\i\end{matrix}\right]x^i\\&amp;=\sum\limits^{n+1}_{i=1}\left[\begin{matrix}n\\i-1\end{matrix}\right]x^i+\sum\limits^n_{i=0}\left(n\times\left[\begin{matrix}n\\i\end{matrix}\right]x^i\right)\\&amp;=\sum\limits^{n+1}_{i=0}\left(\left[\begin{matrix}n\\i-1\end{matrix}\right]+n\times\left[\begin{matrix}n\\i\end{matrix}\right]\right)x^i\\&amp;=\sum\limits^{n+1}_{i=0}\left[\begin{matrix}n+1\\i\end{matrix}\right]x^i\end{aligned}\]</span></p></li></ol><p>于是原命题成立</p><p>直接求上升幂是 <span class="math inline">\(O(n^2)\)</span>，考虑如何优化：</p><p>假设 <span class="math inline">\(n\)</span> 是偶数：</p><p><span class="math display">\[x^{\overline{n}}=x^{\overline{\frac{n}{2}}}\times(x+\frac{n}{2})^{\overline{\frac{n}{2}}}\]</span></p><p>如果我们已经得到了前半部分对应的多项式 <span class="math inline">\(f(x)=x^{\overline{\frac{n}{2}}}=\sum\limits^{\frac{n}{2}}_{i=0}a_ix^i\)</span></p><p>考虑如何通过前半部分的结果求出后半部分：</p><p><span class="math display">\[\begin{aligned}(x+\frac{n}{2})^{\overline{\frac{n}{2}}}&amp;=f(x+\frac{n}{2})\\&amp;=\sum\limits^{\frac{n}{2}}_{i=0}a_i(x+\frac{n}{2})^i\\&amp;=\sum\limits^{\frac{n}{2}}_{i=0}\left(a_i\times\sum\limits^{i}_{j=0}\left(\binom{i}{j}\times x^j\times\left(\frac{n}{2}\right)^{i-j}\right)\right)\\&amp;=\sum\limits^{\frac{n}{2}}_{j=0}\frac{1}{j!}\times\left(\sum\limits^{\frac{n}{2}}_{i=j}\left(i!\cdot a_i\right)\left(\frac{\left(\frac{n}{2}\right)^{i-j}}{\left(i-j\right)!}\right)\right)\times x^j\end{aligned}\]</span></p><p>到这里可能还不能发现它是卷积的形式，但是注意到 <span class="math inline">\(i-(i-j)=j\)</span> 所以将后面一部分的 <span class="math inline">\(i\)</span> 次项改为 <span class="math inline">\(-i\)</span> 次项即可，但是负次数多项式不好实现，可以先将后半部分对应的多项式反过来（即将负次数多项式乘上 <span class="math inline">\(x^{\frac{n}{2}}\)</span>），即将<span class="math inline">\(\sum\limits^{\frac{n}{2}}_{i=0}a_ii!x^i\)</span> 和 <span class="math inline">\(\sum\limits^{\frac{n}{2}}_{i=0}\frac{\left(\frac{n}{2}\right)^i}{i!}x^{\frac{n}{2}-i}\)</span> 乘起来的多项式第 <span class="math inline">\(i\)</span> 项的系数为要求的多项式的第 <span class="math inline">\(i-\frac{n}{2}\)</span> 项的系数</p><p>于是就可以由 <span class="math inline">\(x^{\overline{\frac{n}{2}}}\)</span> 在 <span class="math inline">\(O(n\log_2n)\)</span> 时间内求出 <span class="math inline">\((x+\frac{n}{2})^{\overline{\frac{n}{2}}}\)</span></p><p>而 <span class="math inline">\(x^{\overline{\frac{n}{2}}}\)</span> 可以递归求解</p><p>若 <span class="math inline">\(n\)</span> 是奇数，则 <span class="math inline">\(x^{\overline{n}}=x^{\overline{n-1}}\times(x+n-1)\)</span></p><p>时间复杂度 <span class="math inline">\(T(n)=T(\frac{n}{2})+\Theta(nlog_2n)=\Theta(nlog_2n)\)</span></p><h2 id="代码">代码</h2><p>本题卡常，NTT的常数需要写得较小</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">530000</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> Mod = <span class="hljs-number">167772161</span>, g = <span class="hljs-number">3</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Polynomial</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-type">int</span> deg, *a;<br>  <span class="hljs-built_in">Polynomial</span>() &#123;<br>    a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[N];<br>    <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) * N);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">NTT</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">bool</span>)</span></span>;<br>&#125;;<br><span class="hljs-type">int</span> r[N];<br><span class="hljs-function">Polynomial <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><br><span class="hljs-type">int</span> fac[N], ifac[N];<br><span class="hljs-type">int</span> omega[<span class="hljs-number">26</span>];<br><span class="hljs-type">int</span> siz;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> n;<br>  <span class="hljs-built_in">read</span>(n);<br>  <span class="hljs-type">int</span> lim = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (lim &lt;= (n &lt;&lt; <span class="hljs-number">1</span>)) &#123;<br>    lim &lt;&lt;= <span class="hljs-number">1</span>;<br>  &#125;<br>  siz = __builtin_ctz(lim);<br>  omega[<span class="hljs-number">25</span>] = <span class="hljs-built_in">pow</span>(g, (Mod - <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">25</span>, Mod);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">24</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>    omega[i] = omega[i + <span class="hljs-number">1</span>] * <span class="hljs-number">1ll</span> * omega[i + <span class="hljs-number">1</span>] % Mod;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) &#123;<br>    r[i] = (r[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) * (lim &gt;&gt; <span class="hljs-number">1</span>));<br>  &#125;<br>  fac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= lim; ++i) &#123;<br>    fac[i] = fac[i - <span class="hljs-number">1</span>] * <span class="hljs-number">1ll</span> * i % Mod;<br>  &#125;<br>  ifac[lim] = <span class="hljs-built_in">pow</span>(fac[lim], Mod - <span class="hljs-number">2</span>, Mod);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = lim - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>    ifac[i] = ifac[i + <span class="hljs-number">1</span>] * <span class="hljs-number">1ll</span> * (i + <span class="hljs-number">1</span>) % Mod;<br>  &#125;<br>  Polynomial ans = <span class="hljs-built_in">solve</span>(n);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i) &#123;<br>    <span class="hljs-built_in">write</span>(ans.a[i]), SP;<br>  &#125;<br>  EL;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Polynomial::NTT</span><span class="hljs-params">(<span class="hljs-type">int</span> lim, <span class="hljs-type">bool</span> opt)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (opt) &#123;<br>    std::<span class="hljs-built_in">reverse</span>(a + <span class="hljs-number">1</span>, a + lim);<br>  &#125;<br>  <span class="hljs-type">int</span> tp = siz - __builtin_ctz(lim);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (i &lt; (r[i] &gt;&gt; tp)) &#123;<br>      std::<span class="hljs-built_in">swap</span>(a[i], a[r[i] &gt;&gt; tp]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, t = <span class="hljs-number">1</span>; l &lt; lim; l &lt;&lt;= <span class="hljs-number">1</span>, ++t) &#123;<br>    <span class="hljs-type">int</span> gw = omega[t];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i += (l &lt;&lt; <span class="hljs-number">1</span>)) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>, gn = <span class="hljs-number">1</span>; j &lt; l; ++j, gn = gn * <span class="hljs-number">1ll</span> * gw % Mod) &#123;<br>        <span class="hljs-type">int</span> x = a[i + j], y = a[i + j + l] * <span class="hljs-number">1ll</span> * gn % Mod;<br>        a[i + j] = (x + y) % Mod;<br>        a[i + j + l] = (x - y + Mod) % Mod;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (opt) &#123;<br>    <span class="hljs-type">int</span> iv = <span class="hljs-built_in">pow</span>(lim, Mod - <span class="hljs-number">2</span>, Mod);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) &#123;<br>      a[i] = a[i] * <span class="hljs-number">1ll</span> * iv % Mod;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">const</span> Polynomial &amp;f, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> lim, Polynomial &amp;g)</span> </span>&#123;<br>  Polynomial h;<br>  <span class="hljs-built_in">memset</span>(g.a + n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) * (lim - n));<br>  g.a[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, h.a[<span class="hljs-number">0</span>] = f.a[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    g.a[i] = g.a[i - <span class="hljs-number">1</span>] * <span class="hljs-number">1ll</span> * n % Mod;<br>    h.a[i] = f.a[i] * <span class="hljs-number">1ll</span> * fac[i] % Mod;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    g.a[i] = g.a[i] * <span class="hljs-number">1ll</span> * ifac[i] % Mod;<br>  &#125;<br>  std::<span class="hljs-built_in">reverse</span>(g.a, g.a + n + <span class="hljs-number">1</span>);<br>  g.<span class="hljs-built_in">NTT</span>(lim, <span class="hljs-literal">false</span>), h.<span class="hljs-built_in">NTT</span>(lim, <span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) &#123;<br>    g.a[i] = g.a[i] * <span class="hljs-number">1ll</span> * h.a[i] % Mod;<br>  &#125;<br>  g.<span class="hljs-built_in">NTT</span>(lim, <span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i) &#123;<br>    g.a[i] = g.a[i + n] * <span class="hljs-number">1ll</span> * ifac[i] % Mod;<br>  &#125;<br>  <span class="hljs-built_in">memset</span>(g.a + n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) * (lim - n));<br>&#125;<br><span class="hljs-function">Polynomial <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>  std::stack&lt;<span class="hljs-type">bool</span>&gt; S;<br>  <span class="hljs-keyword">while</span> (n) &#123;<br>    S.<span class="hljs-built_in">push</span>(n &amp; <span class="hljs-number">1</span>);<br>    n &gt;&gt;= <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-type">int</span> lim = <span class="hljs-number">1</span>;<br>  Polynomial A, B;<br>  n = A.a[<span class="hljs-number">1</span>] = S.<span class="hljs-built_in">top</span>();<br>  S.<span class="hljs-built_in">pop</span>();<br>  <span class="hljs-keyword">while</span> (!S.<span class="hljs-built_in">empty</span>()) &#123;<br>    <span class="hljs-keyword">while</span> (lim &lt;= (n &lt;&lt; <span class="hljs-number">1</span>)) &#123;<br>      lim &lt;&lt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">calc</span>(A, n, lim, B);<br>    A.<span class="hljs-built_in">NTT</span>(lim, <span class="hljs-literal">false</span>), B.<span class="hljs-built_in">NTT</span>(lim, <span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) &#123;<br>      A.a[i] = A.a[i] * <span class="hljs-number">1ll</span> * B.a[i] % Mod;<br>    &#125;<br>    A.<span class="hljs-built_in">NTT</span>(lim, <span class="hljs-literal">true</span>);<br>    n &lt;&lt;= <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (!S.<span class="hljs-built_in">top</span>()) &#123;<br>      S.<span class="hljs-built_in">pop</span>();<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    S.<span class="hljs-built_in">pop</span>();<br>    A.a[n + <span class="hljs-number">1</span>] = A.a[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt; <span class="hljs-number">0</span>; --i) &#123;<br>      A.a[i] = (A.a[i - <span class="hljs-number">1</span>] + A.a[i] * <span class="hljs-number">1ll</span> * n % Mod) % Mod;<br>    &#125;<br>    A.a[<span class="hljs-number">0</span>] = A.a[<span class="hljs-number">0</span>] * <span class="hljs-number">1ll</span> * n % Mod;<br>    ++n;<br>  &#125;<br>  A.deg = n;<br>  <span class="hljs-keyword">return</span> A;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 第一类斯特林数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「学习笔记」O(1)求最大公约数</title>
      <link href="/2020/quick-gcd/"/>
      <url>/2020/quick-gcd/</url>
      
        <content type="html"><![CDATA[<p>一种<span class="math inline">\(O(\)</span>值域<span class="math inline">\()\)</span>时间预处理<span class="math inline">\(O(1)\)</span>时间求最大公约数(<span class="math inline">\(\gcd\)</span>)的算法</p><span id="more"></span><h2 id="一些约定">一些约定</h2><ol type="1"><li><span class="math inline">\(N\)</span>为询问的值域</li><li><span class="math inline">\(Prime\)</span>为全体素数集合</li><li>集合<span class="math inline">\(\{a_1,a_2,\cdots,a_m\}\)</span>是<span class="math inline">\(n\)</span>的分解，当且仅当<span class="math inline">\(a_1\times a_2\times\cdots\times a_m=n\)</span></li></ol><h2 id="原理">原理</h2><h3 id="定理一">定理一</h3><h4 id="内容">内容</h4><p>可以将值域中的每个<span class="math inline">\(x\)</span>分解成<span class="math inline">\(\{a,b,c\}\)</span>，满足<span class="math inline">\(a,b,c\leq\sqrt{x}\)</span>或<span class="math inline">\(\in Prime\)</span>（定义这种分解为合法分解） #### 证明 不妨设<span class="math inline">\(a\leq b\leq c\)</span>若<span class="math inline">\(c\notin Prime\)</span>且<span class="math inline">\(c&gt;\sqrt{x}\)</span>,则<span class="math inline">\(c\)</span>可分解为<span class="math inline">\(\{d,e\}\)</span>且<span class="math inline">\(d\leq e\)</span>有<span class="math inline">\(d\leq\sqrt{x}\)</span>，而<span class="math inline">\(a\times b=\frac{x}{c}&lt;\sqrt{x}\)</span>则有<span class="math inline">\(n\)</span>的分解<span class="math inline">\(\{d,a\times b,e\}\)</span>，若<span class="math inline">\(e&gt;\sqrt{x}\)</span>则可按该规律一直分解直到<span class="math inline">\(e\in Prime\)</span>或<span class="math inline">\(\leq\sqrt{x}\)</span> ### 定理二 #### 内容 对于询问<span class="math inline">\(\gcd(x,y)\)</span>,分别考虑<span class="math inline">\(a,b,c\)</span>对答案的贡献,<span class="math inline">\(a\)</span>对答案的贡献为<span class="math inline">\(\gcd(a,y)\)</span>，再将<span class="math inline">\(y\)</span>除以<span class="math inline">\(\gcd(a,y)\)</span>（这个因子已经被算过，不能重复计算），再对<span class="math inline">\(b,c\)</span>干同样的事，三个贡献相乘即为<span class="math inline">\(\gcd(x,y)\)</span></p><h4 id="证明">证明</h4><blockquote><p>易得引理若<span class="math inline">\(r\mid p, r\mid q\)</span>则<span class="math inline">\(\gcd(p,q)=r\times\gcd(\frac{p}{r},\frac{q}{r})\)</span></p></blockquote>分别代入$<span class="math display">\[\begin{cases}&amp;p_1=a\times b\times c,q_1=y,r_1=\gcd(a,q_1) \\&amp;p_2=b\times c,q_2=\frac{q_1}{r_1},r_2=\gcd(b,q_2) \\&amp;p_3=c,q_3=\frac{q_2}{r_2},r_3=\gcd(c,q_3)\end{cases}\]</span><p>$即可</p><h2 id="实现">实现</h2><p>我们发现实现的难点在于如何在<span class="math inline">\(O(N)\)</span>时间内进行分解，询问部分较为容易</p><h3 id="分解">分解</h3><p>对于<span class="math inline">\(x\geq2\)</span>，找到<span class="math inline">\(x\)</span>的最小质因子<span class="math inline">\(p\)</span>以及<span class="math inline">\(\frac{x}{p}\)</span>的合法分解<span class="math inline">\(\{a_0,b_0,c_0\}\)</span>且<span class="math inline">\(a_0\leq b_0\leq c_0\)</span>，<span class="math inline">\(x\)</span>的一种合法分解即为<span class="math inline">\(\{a_0\times p,b_0,c_0\}\)</span>的升序排序</p><p>考虑证明： 1. <span class="math inline">\(x\in Prime\)</span>时显然成立,分解为<span class="math inline">\(\{1,1,x\}\)</span> 2. 当<span class="math inline">\(p\le\sqrt[4]{x}\)</span>时将<span class="math inline">\(a_0\leq\sqrt[3]{\frac{x}{p}}\)</span>带入有<span class="math inline">\(a_0\times p\le\sqrt{x}\)</span> 3. 考虑<span class="math inline">\(p&gt;\sqrt[4]{x}\)</span>的情况，<span class="math inline">\(\left(1.\right)\)</span> <span class="math inline">\(a_0=1\)</span>，显然有<span class="math inline">\(a_0\times p=p\le\sqrt{x}\)</span>；<span class="math inline">\(\left(2.\right)\)</span> <span class="math inline">\(a\neq1\)</span>，由于<span class="math inline">\(x\)</span>不是素数，<span class="math inline">\(\frac{x}{p}\)</span>的最小质因子<span class="math inline">\(q\)</span>即为<span class="math inline">\(x\)</span>的第二小质因子，一定<span class="math inline">\(\geq p\)</span>，而<span class="math inline">\(a_0,b_0,c_0\)</span>都为<span class="math inline">\(\frac{x}{p}\)</span>的非<span class="math inline">\(1\)</span>因子，有<span class="math inline">\(p\leq q\leq a_0\leq b_0\leq c_0\)</span>,<span class="math inline">\(p\times a_0\times b_0\times c_0&gt;(\sqrt[4]{x})^4=x\)</span>与<span class="math inline">\(p\times a_0\times b_0\times c_0=x\)</span>相矛盾，故不存在此情况</p><p>所以只用跑一次线性筛，用最小质因子更新即可，然后预处理出<span class="math inline">\(\sqrt{n}\times\sqrt{n}\)</span>的<span class="math inline">\(\gcd\)</span>数组</p><p>代码如下 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// fac为合法分解，isp表示是否非质数，pri为质数数组，tot为pri的大小，pre为预处理的gcd数组，M为值域，T为sqrt(M)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>  fac[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = fac[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = fac[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= M; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (!isp[i]) &#123;<br>      fac[i][<span class="hljs-number">0</span>] = fac[i][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>      fac[i][<span class="hljs-number">2</span>] = i;<br>      pri[++tot] = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; pri[j] * i &lt;= M; ++j) &#123;<br>      <span class="hljs-type">int</span> tmp = pri[j] * i;<br>      isp[tmp] = <span class="hljs-literal">true</span>;<br>      fac[tmp][<span class="hljs-number">0</span>] = fac[i][<span class="hljs-number">0</span>] * pri[j];<br>      fac[tmp][<span class="hljs-number">1</span>] = fac[i][<span class="hljs-number">1</span>];<br>      fac[tmp][<span class="hljs-number">2</span>] = fac[i][<span class="hljs-number">2</span>];<br>      <span class="hljs-keyword">if</span> (fac[tmp][<span class="hljs-number">0</span>] &gt; fac[tmp][<span class="hljs-number">1</span>]) &#123;<br>        fac[tmp][<span class="hljs-number">0</span>] ^= fac[tmp][<span class="hljs-number">1</span>] ^= fac[tmp][<span class="hljs-number">0</span>] ^= fac[tmp][<span class="hljs-number">1</span>];<br>      &#125;<br>      <span class="hljs-keyword">if</span> (fac[tmp][<span class="hljs-number">1</span>] &gt; fac[tmp][<span class="hljs-number">2</span>]) &#123;<br>        fac[tmp][<span class="hljs-number">1</span>] ^= fac[tmp][<span class="hljs-number">2</span>] ^= fac[tmp][<span class="hljs-number">1</span>] ^= fac[tmp][<span class="hljs-number">2</span>];<br>      &#125;<br><span class="hljs-comment">// 对于整数运算a ^= b ^= a ^= b等价于swap(a, b)这里就是手动进行length = 3的排序</span><br>      <span class="hljs-keyword">if</span> (i % pri[j] == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= T; ++i) &#123;<br>    pre[<span class="hljs-number">0</span>][i] = pre[i][<span class="hljs-number">0</span>] = i;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= T; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; ++j) &#123;<br>      pre[i][j] = pre[j][i] = pre[j][i % j];<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="查询">查询</h3><p>若当前枚举的为<span class="math inline">\(a\)</span>，只需注意<span class="math inline">\(a&gt;\sqrt{N}\)</span>时分<span class="math inline">\(a\mid y\)</span>和<span class="math inline">\(a\nmid y\)</span>两种情况即可</p><p>以下为代码 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-comment">// 不想写if-else所以用三目运算符代替并缩进了一下</span><br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) &#123;<br>    <span class="hljs-type">int</span> tmp = (fac[a][i] &gt; T) ?<br>                (b % fac[a][i] ?<br>                   <span class="hljs-number">1</span><br>                 : fac[a][i]<br>                )<br>              : pre[fac[a][i]][b % fac[a][i]];<br>    b /= tmp;<br>    ans *= tmp;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSP-2019 游记</title>
      <link href="/2019/CSP-2019/"/>
      <url>/2019/CSP-2019/</url>
      
        <content type="html"><![CDATA[<h1 id="csp-2019退役记">CSP-2019退役记</h1><span id="more"></span><h2 id="day--27">Day -27</h2><p>初赛，被吊着打。</p><p>上午S组，全程自闭，毒瘤状压5题全靠蒙（蒙对4题）</p><p>下午J组，感觉AK，改出来就<span class="math inline">\(96\)</span></p><p>弱省复赛随便进，没怎么管</p><h2 id="day--7">Day -7</h2><p>得知在本市一中考，不用去合肥，惊了</p><h2 id="day-0">Day 0</h2><p>试机看了看gedit vim g++ gdb就玩贪吃蛇了</p><h2 id="day-1">Day 1</h2><h3 id="s组">S组</h3><p>三题都看了看题面，感觉T3部分分很足，暴力+链+菊花图应该能拿到（</p><p>T1题面好长，仔细看了看，注意到<span class="math inline">\(k\le 64\)</span>, 要开<code>unsigned long long</code>, 秒了</p><p>T2看了一会，手玩一下样例，随便递推了一下</p><p>开始了2.5h的T3自闭之旅，先看菊花图，综合了各种情况……不会，后来看链，又自闭了，最后打了个<span class="math inline">\(O(n!)\)</span>暴力交上去（结果还打炸了）</p><p>考场上估计人均<span class="math inline">\(260\)</span>, 结果出考场人均<span class="math inline">\(210\)</span></p><ul><li>估分<span class="math inline">\(100+100+10=210\)</span></li><li>实际<span class="math inline">\(100+100+5=205\)</span></li></ul><h3 id="j组">J组</h3><p>四题水题，<span class="math inline">\(1h\space\)</span>AK, <span class="math inline">\(2.5h\)</span>贪吃蛇</p><ul><li>估分<span class="math inline">\(100+100+100+100=400\)</span></li><li>实际<span class="math inline">\(100+100+100+100=400\)</span></li></ul><h2 id="day-2">Day 2</h2><p>看完题面，感觉三道神仙题，自闭了</p><p>T1简单容斥都不会，写个<span class="math inline">\(m\le3\)</span>的<span class="math inline">\(64\)</span>分暴力就跑了</p><p>T2瞎猜结论，根本不证，写了个<span class="math inline">\(88\)</span>分的<span class="math inline">\(O(nlog_2n)\)</span></p><p>T3写了<span class="math inline">\(O(n^2)\)</span>和链，没注意到<span class="math inline">\(262143=2^{18}-1\)</span>，错失<span class="math inline">\(20\)</span>分</p><ul><li>估分<span class="math inline">\(64+88+55=207\)</span></li><li>实际<span class="math inline">\(64+88+55=207\)</span></li></ul><h2 id="day-16">Day 16</h2><p>出分了，还是有很多不足，考乱猜结论苟了个<span class="math inline">\(412\)</span>，水平还是太菜</p><p>成功苟进<del>面基大会</del>WC，打铁预定</p>]]></content>
      
      
      <categories>
          
          <category> 游记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>「洛谷P3401」洛谷树 题解</title>
      <link href="/2019/luogu-3401/"/>
      <url>/2019/luogu-3401/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3401">题目</a></p><span id="more"></span><h2 id="分析">分析</h2><p>令<span class="math inline">\(s_u\)</span>为<span class="math inline">\(u\)</span>到根的路径上的边权异或和, <span class="math inline">\(s_{u,v}\)</span>为<span class="math inline">\(u\)</span>到<span class="math inline">\(v\)</span>的简单路径上的边权异或和</p><p>由树上差分的知识可得<span class="math inline">\(s_{u,v}=s_u\otimes s_v\otimes s_{lca}\otimes s_{lca}=s_u\otimes s_v\)</span></p><p>原问题可化为求<span class="math inline">\(\sum_{i,j\in\left\langle u,v\right\rangle}s_i\otimes s_j\)</span></p><h2 id="做法">做法</h2><p>考虑维护每一位,若路径<span class="math inline">\(\left\langle u,v\right\rangle\)</span>经过<span class="math inline">\(siz\)</span>个结点,其中<span class="math inline">\(s\)</span>的第<span class="math inline">\(i\)</span>位为<span class="math inline">\(1\)</span>的有<span class="math inline">\(cnt\)</span>个,则为<span class="math inline">\(0\)</span>的有<span class="math inline">\((siz-cnt)\)</span>个第<span class="math inline">\(i\)</span>位对答案的贡献为<span class="math inline">\(cnt\cdot(siz-cnt)\cdot 2^i\)</span>(一个<span class="math inline">\(0\)</span>一个<span class="math inline">\(1\)</span>才对答案有贡献)</p><p>路径上维护<span class="math inline">\(1\)</span>的个数,容易想到树链剖分加线段树</p><p>修改操作中,将边<span class="math inline">\((u,v)(dep_u&lt;dep_v)\)</span>的权值修改为<span class="math inline">\(w\)</span>,原权值为<span class="math inline">\(w_b\)</span>,若<span class="math inline">\(w\)</span>的第<span class="math inline">\(i\)</span>位与<span class="math inline">\(w_b\)</span>的第<span class="math inline">\(i\)</span>位不同,则将<span class="math inline">\(v\)</span>所在子树的<span class="math inline">\(s\)</span>的第<span class="math inline">\(i\)</span>位翻转即可,具体在线段树上,对于原本有<span class="math inline">\(cnt\)</span>个<span class="math inline">\(1\)</span>的区间<span class="math inline">\(\left[l,r\right]\)</span>,将<span class="math inline">\(1\)</span>的个数改为<span class="math inline">\((r-l+1-cnt)\)</span></p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">30005</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">60005</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lc(x) (x &lt;&lt; 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rc(x) (x &lt;&lt; 1 | 1)</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><br><span class="hljs-type">int</span> hed[N], nxt[M], to[M], val[M], id;<br><span class="hljs-type">int</span> dep[N], fa[N], siz[N], son[N], top[N], ttl[N], ltt[N], tot;<br><span class="hljs-type">int</span> vf[N];<br><span class="hljs-type">int</span> xs[N];<br><span class="hljs-type">int</span> sum[N &lt;&lt; <span class="hljs-number">2</span>][<span class="hljs-number">10</span>];<br><span class="hljs-type">bool</span> tag[N &lt;&lt; <span class="hljs-number">2</span>][<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> n, q;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(q);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>    <span class="hljs-type">int</span> u, v, w;<br>    <span class="hljs-built_in">read</span>(u), <span class="hljs-built_in">read</span>(v), <span class="hljs-built_in">read</span>(w);<br>    <span class="hljs-built_in">add</span>(u, v, w), <span class="hljs-built_in">add</span>(v, u, w);<br>  &#125;<br>  <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>);<br>  top[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i) &#123;<br>    <span class="hljs-type">int</span> type;<br>    <span class="hljs-built_in">read</span>(type);<br>    <span class="hljs-type">int</span> u, v;<br>    <span class="hljs-built_in">read</span>(u), <span class="hljs-built_in">read</span>(v);<br>    <span class="hljs-keyword">switch</span> (type) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      <span class="hljs-built_in">write</span>(<span class="hljs-built_in">query</span>(u, v)), EL;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      <span class="hljs-type">int</span> w;<br>      <span class="hljs-built_in">read</span>(w);<br>      <span class="hljs-built_in">update</span>(u, v, w);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v, <span class="hljs-type">int</span> w)</span> </span>&#123;<br>  nxt[++id] = hed[u];<br>  hed[u] = id;<br>  to[id] = v;<br>  val[id] = w;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>  siz[u] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = hed[u]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> v = to[i];<br>    <span class="hljs-keyword">if</span> (v != fa[u]) &#123;<br>      dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>      fa[v] = u;<br>      xs[v] = xs[u] ^ val[i];<br>      vf[v] = val[i];<br>      <span class="hljs-built_in">dfs1</span>(v);<br>      siz[u] += siz[v];<br>      <span class="hljs-keyword">if</span> (siz[v] &gt; siz[son[u]]) &#123;<br>        son[u] = v;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>  ltt[ttl[u] = ++tot] = u;<br>  <span class="hljs-keyword">if</span> (son[u]) &#123;<br>    top[son[u]] = top[u];<br>    <span class="hljs-built_in">dfs2</span>(son[u]);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = hed[u]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> v = to[i];<br>    <span class="hljs-keyword">if</span> (v != fa[u] &amp;&amp; v != son[u]) &#123;<br>      top[v] = v;<br>      <span class="hljs-built_in">dfs2</span>(v);<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> xl, <span class="hljs-type">int</span> xr, <span class="hljs-type">int</span> bit)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (tag[x][bit]) &#123;<br>    <span class="hljs-type">int</span> xm = (xl + xr) &gt;&gt; <span class="hljs-number">1</span>;<br>    sum[<span class="hljs-built_in">lc</span>(x)][bit] = (xm - xl + <span class="hljs-number">1</span>) - sum[<span class="hljs-built_in">lc</span>(x)][bit];<br>    sum[<span class="hljs-built_in">rc</span>(x)][bit] = (xr - xm) - sum[<span class="hljs-built_in">rc</span>(x)][bit];<br>    tag[<span class="hljs-built_in">lc</span>(x)][bit] ^= <span class="hljs-number">1</span>;<br>    tag[<span class="hljs-built_in">rc</span>(x)][bit] ^= <span class="hljs-number">1</span>;<br>    tag[x][bit] = <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> bit)</span> </span>&#123;<br>  sum[x][bit] = sum[<span class="hljs-built_in">lc</span>(x)][bit] + sum[<span class="hljs-built_in">rc</span>(x)][bit];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> xl, <span class="hljs-type">int</span> xr, <span class="hljs-type">int</span> bit, <span class="hljs-type">int</span> ul, <span class="hljs-type">int</span> ur)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (xl &gt;= ul &amp;&amp; xr &lt;= ur) &#123;<br>    sum[x][bit] = (xr - xl + <span class="hljs-number">1</span>) - sum[x][bit];<br>    tag[x][bit] ^= <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-built_in">pushdown</span>(x, xl, xr, bit);<br>  <span class="hljs-type">int</span> xm = (xl + xr) &gt;&gt; <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (xm &gt;= ul) &#123;<br>    <span class="hljs-built_in">update</span>(<span class="hljs-built_in">lc</span>(x), xl, xm, bit, ul, ur);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (xm &lt; ur) &#123;<br>    <span class="hljs-built_in">update</span>(<span class="hljs-built_in">rc</span>(x), xm + <span class="hljs-number">1</span>, xr, bit, ul, ur);<br>  &#125;<br>  <span class="hljs-built_in">pushup</span>(x, bit);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> xl, <span class="hljs-type">int</span> xr, <span class="hljs-type">int</span> bit, <span class="hljs-type">int</span> ql, <span class="hljs-type">int</span> qr)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (xl &gt;= ql &amp;&amp; xr &lt;= qr) &#123;<br>    <span class="hljs-keyword">return</span> sum[x][bit];<br>  &#125;<br>  <span class="hljs-built_in">pushdown</span>(x, xl, xr, bit);<br>  <span class="hljs-type">int</span> xm = (xl + xr) &gt;&gt; <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (xm &gt;= ql) &#123;<br>    ans += <span class="hljs-built_in">query</span>(<span class="hljs-built_in">lc</span>(x), xl, xm, bit, ql, qr);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (xm &lt; qr) &#123;<br>    ans += <span class="hljs-built_in">query</span>(<span class="hljs-built_in">rc</span>(x), xm + <span class="hljs-number">1</span>, xr, bit, ql, qr);<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> xl, <span class="hljs-type">int</span> xr)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (xl == xr) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>      sum[x][i] = (xs[ltt[xl]] &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-type">int</span> xm = (xl + xr) &gt;&gt; <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">build</span>(<span class="hljs-built_in">lc</span>(x), xl, xm);<br>  <span class="hljs-built_in">build</span>(<span class="hljs-built_in">rc</span>(x), xm + <span class="hljs-number">1</span>, xr);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-built_in">pushup</span>(x, i);<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v, <span class="hljs-type">int</span> w)</span> </span>&#123;<br>  <span class="hljs-type">int</span> x = dep[u] &lt; dep[v] ? v : u;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (((vf[x] ^ w) &gt;&gt; i) &amp; <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-built_in">update</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, i, ttl[x], ttl[x] + siz[x] - <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>  vf[x] = w;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>  <span class="hljs-type">int</span> cnt[<span class="hljs-number">10</span>];<br>  <span class="hljs-type">int</span> siz = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    cnt[i] = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">while</span> (top[u] ^ top[v]) &#123;<br>    <span class="hljs-keyword">if</span> (dep[top[u]] &lt; dep[top[v]]) &#123;<br>      u ^= v ^= u ^= v;<br>    &#125;<br>    siz += ttl[u] - ttl[top[u]] + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>      cnt[i] += <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, i, ttl[top[u]], ttl[u]);<br>    &#125;<br>    u = fa[top[u]];<br>  &#125;<br>  <span class="hljs-keyword">if</span> (dep[u] &lt; dep[v]) &#123;<br>    u ^= v ^= u ^= v;<br>  &#125;<br>  siz += ttl[u] - ttl[v] + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    cnt[i] += <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, i, ttl[v], ttl[u]);<br>  &#125;<br>  ll ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    ans += cnt[i] * (siz - cnt[i]) * <span class="hljs-number">1ll</span> * (<span class="hljs-number">1</span> &lt;&lt; i);<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「HDU1850&amp;POJ2975」题解</title>
      <link href="/2019/hdu-1850-poj-2975/"/>
      <url>/2019/hdu-1850-poj-2975/</url>
      
        <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1850">题目1</a></p><p><a href="http://poj.org/problem?id=2975">题目2</a> <span id="more"></span> ## 题意 Nim游戏的第一步有几种必胜走法</p><h2 id="思路">思路</h2><p>考虑Nim游戏的模型 1. 结束状态是全为<span class="math inline">\(0\)</span>, 此时<span class="math inline">\(a_1\otimes a_2\otimes\dots\otimes a_n=0\)</span> 2. <span class="math inline">\(a_1\otimes a_2\otimes\dots\otimes a_n=k\)</span>时, 考虑<span class="math inline">\(k\)</span>最高的二进制为<span class="math inline">\(1\)</span>的一位, 一定有奇数个<span class="math inline">\(a_i\)</span>满足该位为<span class="math inline">\(1\)</span>, 取其中的任意一个<span class="math inline">\(a_i\otimes k\)</span>, 该位会变成<span class="math inline">\(0\)</span>, 由于<span class="math inline">\(k\)</span>的更高位为<span class="math inline">\(0\)</span>, 所以<span class="math inline">\(k\)</span>的更高位不会改变, 因此<span class="math inline">\(a_i\otimes k&lt;a_i\)</span>, 所以必定存在<span class="math inline">\(a_i\)</span>使得<span class="math inline">\(a_1\otimes a_2\otimes\dots\otimes (a_i\otimes k)\otimes\dots\otimes a_n=0\)</span>转移到必负状态 3. <span class="math inline">\(a_1\otimes a_2\otimes\dots\otimes a_n=0\)</span>时, 对于任意<span class="math inline">\(a_i\)</span>和<span class="math inline">\(k\in N^\*\)</span>都有<span class="math inline">\(a_1\otimes a_2\otimes\dots\otimes (a_i\otimes k)\otimes\dots\otimes a_n=k\neq0\)</span>转移到必胜状态</p><p>所以在初始状态, 只要把<span class="math inline">\(a_i\)</span>变为<span class="math inline">\(a_i\otimes k(k=\bigotimes_{i=1}^n a_i)\)</span>即可, 而初始状态可行方案的总数就是<span class="math inline">\(\sum_{i=1}^n[(a_i\otimes k) &lt; a_i]\)</span></p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1005</span>;<br><br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">read</span>(n);<br>    <span class="hljs-keyword">if</span> (!n) &#123;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>      <span class="hljs-built_in">read</span>(a[i]);<br>      num ^= a[i];<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>      <span class="hljs-keyword">if</span> ((num ^ a[i]) &lt; a[i]) &#123;<br>        ++ans;<br>      &#125;<br>    &#125;<br>    <span class="hljs-built_in">write</span>(ans), EL;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博弈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「FZOJ3827」题解</title>
      <link href="/2019/fzoj-3827/"/>
      <url>/2019/fzoj-3827/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f7e5492391dfa4de1ffaecb93dc67869c6de5725dcab4e8590fdf0db71bd97d2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-up">      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-up">密码是我的 FZOJ 注册日期</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FZOJ </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「洛谷P5497」[LnOI2019SP]龟速单项式变换(SMT) 题解</title>
      <link href="/2019/luogu-5497/"/>
      <url>/2019/luogu-5497/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P5497">题目</a></p><span id="more"></span><h2 id="思路">思路</h2><p><span class="math display">\[令s_i=a_1+a_2+\dots+a_i\]</span> <span class="math display">\[m|(a_l+\dots+a_r)\iff s_r\equiv s_{l-1}\pmod{m}\]</span> <span class="math display">\[根据鸽巢原理可得:\]</span> <span class="math display">\[\begin{aligned}&amp;\exists x,y\in[0,n]\cap Z:s_x\equiv s_y\pmod{m}\\\iff &amp;n+1个数分成m类,至少有一类至少有两个\\\iff &amp;n+1&gt;m\\\iff &amp;n\ge m\end{aligned}\]</span></p><h2 id="代码">代码</h2><p>这么简单的代码有看的必要吗 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>  ll n, m;<br>  <span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(m);<br>  <span class="hljs-built_in">puts</span>(n &gt;= m ? <span class="hljs-string">&quot;YES&quot;</span> : <span class="hljs-string">&quot;NO&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 结论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年高考全国卷I理科数学21题的推广</title>
      <link href="/2019/math-medicine/"/>
      <url>/2019/math-medicine/</url>
      
        <content type="html"><![CDATA[<p>其实只要概率和等比数列的基础知识就能做出这道压轴题QwQ</p><span id="more"></span><p>试卷随便在哪都能找到,就不放链接了QwQ</p><h2 id="题意">题意</h2><p><span class="math display">\[P(A有用)=\alpha\]</span> <span class="math display">\[P(A无用)=1-\alpha\]</span> <span class="math display">\[P(B有用)=\beta\]</span> <span class="math display">\[P(B无用)=1-\beta\]</span> <span class="math display">\[a=P(X=-1)=P(A无用\cap B有用)=(1-\alpha)\cdot\beta\]</span> <span class="math display">\[b=P(X=0)=P((A无用\cap B无用)\cup(A有用\cap B有用))=\alpha\cdot\beta+(1-\alpha)\cdot(1-\beta)\]</span> <span class="math display">\[c=P(X=1)=P(A有用\cap B无用)=\alpha\cdot(1-\beta)\]</span> <span class="math display">\[进行n次试验,第i次获胜的概率p_i满足p_i=a\cdot p_{i-1}+b\cdot p_i+c\cdot p_{i+1}\]</span> <span class="math display">\[已知p_0=0,p_{2n}=1求p_n\]</span></p><h2 id="推导">推导</h2><p><span class="math display">\[\because p_i=a\cdot p_{i-1}+b\cdot p_i+c\cdot p_{i+1}\]</span> <span class="math display">\[\therefore (1-b)\cdot p_i=a\cdot p_{i-1}+c\cdot p_{i+1}\]</span> <span class="math display">\[\because a+b+c=1\]</span> <span class="math display">\[\therefore 1-b=a+c\]</span> <span class="math display">\[\therefore (a+c)\cdot p_i=a\cdot p_{i-1}+c\cdot p_{i+1}\]</span> <span class="math display">\[变形得c\cdot(p_{i+1}-p_i)=a\cdot(p_i-p_{i-1})\]</span> <span class="math display">\[令x_i=p_i-p_{i-1}\]</span> <span class="math display">\[x数列等比,公比为k=\frac{a}{c}\]</span> <span class="math display">\[\begin{aligned}x_1+x_2+\dots+x_{2n}&amp;=p_{2n}-p_0\\&amp;=x_1\cdot(1+k+k^2+\dots+k^{2n-1})\\&amp;=x_1\cdot\frac{k^{2n}-1}{k-1}=1\end{aligned}\]</span> <span class="math display">\[\therefore x_1=\frac{k-1}{k^{2n}-1}\]</span> <span class="math display">\[\begin{aligned}p_n&amp;=p_n-p_0\\&amp;=x_1+x_2+\dots+x_n\\&amp;=x_1\cdot(1+k+k^2+\dots+k^{n-1})\\&amp;=\frac{k-1}{k^{2n}-1}\cdot\frac{k^n-1}{k-1}\\&amp;=\frac{k^n-1}{k^{2n}-1}\end{aligned}\]</span></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 概率 </tag>
            
            <tag> 数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「洛谷P1198」[JSOI2008]最大数 题解</title>
      <link href="/2019/luogu-1198/"/>
      <url>/2019/luogu-1198/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2948">题目</a></p><span id="more"></span><h2 id="思路">思路</h2><p>显而易见，后入队的结点如果比前面的大，那么前面的一定对答案没有贡献(如果查询的区间包括前面的，则一定包括后面的)</p><p>可以考虑维护单调性</p><h3 id="算法1">算法1</h3><p>维护一个递增的单调栈，每次询问二分查找第一个在询问范围内的</p><h4 id="复杂度分析">复杂度分析</h4><ol type="1"><li>每个元素只会入栈一次</li><li>每次查询的复杂度是<span class="math inline">\(O(\log_2n)\)</span>的</li><li>总复杂度<span class="math inline">\(O(n+q\log_2n)\)</span></li></ol><p>期望得分100分</p><h3 id="算法2">算法2</h3><p>考虑对算法1进行优化</p><p>我们发现算法1的查询较慢，考虑是否能<span class="math inline">\(O(1)\)</span>查询，考虑不将对答案无贡献的点删去，而是维护比他大的点中最新插入进序列的</p><p>发现可以用并查集维护，每次插入将和它相邻并比它小的合并</p><p>每个集合的集合代表设为最左边的，集合权值为最右边的值，这样下次维护时对于一个集合可以直接跳到它的左边，而查询末尾<span class="math inline">\(k\)</span>个数的值就是从右往左第<span class="math inline">\(k\)</span>个数所属集合代表的权值</p><h4 id="复杂度分析-1">复杂度分析</h4><ol type="1"><li>每个元素作为右端点只会被合并一次，所以一次插入的复杂度均摊为<span class="math inline">\(O(\alpha(n))\)</span></li><li>查询操作只需查询它所对应的集合的权值，所以一次查询的复杂度为<span class="math inline">\(O(\alpha(n))\)</span></li><li>总复杂度<span class="math inline">\(O(\alpha(n)\cdot(n+q))\)</span></li></ol><p>期望得分100分</p><h2 id="参考代码">参考代码</h2><p>此处只提供算法2的代码(省略预处理和快读快输) <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">200005</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">uni</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><br><span class="hljs-type">int</span> fa[N], maxi[N]; <span class="hljs-comment">// 集合代表和权值</span><br><span class="hljs-type">int</span> id; <span class="hljs-comment">// 数列的大小</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(m);<br>  <span class="hljs-type">int</span> lastans = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span> (ch != <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; ch != <span class="hljs-string">&#x27;Q&#x27;</span>) &#123;<br>      ch = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    ll a;<br>    <span class="hljs-built_in">read</span>(a);<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;A&#x27;</span>) &#123;<br>      ++id;<br>      fa[id] = id;<br>      maxi[id] = (a + lastans) % m;<br>      <span class="hljs-type">int</span> fi = id; <span class="hljs-comment">// 目前集合的最左端，fi - 1就是下次考虑是否合并的集合的最右端</span><br>      <span class="hljs-keyword">while</span> (fi &gt; <span class="hljs-number">1</span> &amp;&amp; maxi[fi] &gt; maxi[<span class="hljs-built_in">find</span>(fi - <span class="hljs-number">1</span>)]) &#123;<br>        <span class="hljs-built_in">uni</span>(fi - <span class="hljs-number">1</span>, fi);<br>        fi = <span class="hljs-built_in">find</span>(id);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      lastans = maxi[<span class="hljs-built_in">find</span>(id - a + <span class="hljs-number">1</span>)];<br>      <span class="hljs-built_in">write</span>(lastans), EL;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> fa[x] == x ? x : fa[x] = <span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">uni</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-type">int</span> fx = <span class="hljs-built_in">find</span>(x), fy = <span class="hljs-built_in">find</span>(y);<br>    fa[fy] = fx; <span class="hljs-comment">// 将集合代表设为左边的</span><br>    maxi[fx] = maxi[fy]; <span class="hljs-comment">// 将集合权值设为右边的值</span><br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> 单调性 </tag>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不暴露QQ号码的前提下得到QQ头像</title>
      <link href="/2019/get-qq-avatar/"/>
      <url>/2019/get-qq-avatar/</url>
      
        <content type="html"><![CDATA[<p>用QQ号码找到对应的QQ头像地址(且不暴露用户的QQ号码) <span id="more"></span> # 两个地址 通过一番F12-Network的奇技淫巧，可以找到如下两种获取我的QQ头像的方法</p><p><a href="https://q.qlogo.cn/g?b=qq&amp;nk=2775632269&amp;s=100">https://q.qlogo.cn/g?b=qq&amp;nk=2775632269&amp;s=100</a></p><p><a href="https://q.qlogo.cn/g?b=qq&amp;k=H2TQU1t17HiapSplCIBmkog&amp;s=100">https://q.qlogo.cn/g?b=qq&amp;k=H2TQU1t17HiapSplCIBmkog&amp;s=100</a></p><p>可以发现，前者用nk会暴露QQ号码，而后者用k应该是一个加密后的值，不会暴露QQ号码</p><p>如何得到QQ号码对应的k值呢，Bing了一下，找到了一种解决方案 # 转换 通过以下网址，我们能得到一堆东西(貌似是jsp)</p><p><a href="https://ptlogin2.qq.com/getface?&amp;imgtype=1&amp;uin=2775632269">https://ptlogin2.qq.com/getface?&amp;imgtype=1&amp;uin=2775632269</a></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">pt.setHeader(&#123;<span class="hljs-string">&quot;2775632269&quot;</span>:<span class="hljs-string">&quot;https://thirdqq.qlogo.cn/g?b=sdk&amp;k=H2TQU1t17HiapSplCIBmkog&amp;s=40&amp;t=1555595532&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p>我们可以惊喜的看到我们要的k就在这里，于是我们就知道肿么处理了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">先通过<br>https://ptlogin2.qq.com/getface?&amp;imgtype=1&amp;uin=QQ号<br>得到k值，然后可以访问<br>https://q.qlogo.cn/g?b=qq&amp;k=对应的k值&amp;s=100<br>得到QQ头像<br></code></pre></td></tr></table></figure><h1 id="头像的大小">头像的大小</h1><p>我们会发现刚才那个网址得到的头像是100px*100px的头像，如果我们想得到更大或更小的头像，该肿么办呢？</p><p>我们会发现网址中的s值对应的就是size(大小)，一番摸索尝试后，得到了s和大小的关系，如下表:</p><table><thead><tr class="header"><th>s值</th><th>大小</th></tr></thead><tbody><tr class="odd"><td>1</td><td>40*40</td></tr><tr class="even"><td>2</td><td>40*40</td></tr><tr class="odd"><td>3</td><td>100*100</td></tr><tr class="even"><td>4</td><td>140*140</td></tr><tr class="odd"><td>5</td><td>640*640</td></tr><tr class="even"><td>40</td><td>40*40</td></tr><tr class="odd"><td>100</td><td>100*100</td></tr><tr class="even"><td>140</td><td>140*140</td></tr><tr class="odd"><td>640</td><td>640*640</td></tr></tbody></table><p>不过，如果头像的大小比s对应值的大小还小,就会返回原始头像(如某人的头像,是579px的,s=5或640时会返回一个579px的头像)</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>「学习笔记」数论基础（一）：一些基础定义和定理</title>
      <link href="/2019/bnt-1/"/>
      <url>/2019/bnt-1/</url>
      
        <content type="html"><![CDATA[<p>笔者能力有限，如有误，请在评论区指正~ <span id="more"></span> 注：以下定理证明较为简单，证明过程可以略过</p><h1 id="定义">定义</h1><h2 id="整除">整除</h2><p><span class="math display">\[a,b\in\mathbb{Z},a\mathbb{N}eq0\]</span> <span class="math display">\[若\exists c\in\mathbb{Z}:a \times c=b\]</span> <span class="math display">\[则称a整除b,记为a\mid b\]</span></p><h2 id="最大公约数">最大公约数</h2><p><span class="math display">\[a,b\in\mathbb{Z}且a,b不同时为0\]</span> <span class="math display">\[将a,b的公约数中最大的称为最大公约数,记作(a,b)或\gcd(a,b)\]</span> <span class="math display">\[以下是最大公约数的基本性质\]</span> <span class="math display">\[\begin{aligned}(a,b) &amp;=(b,a)\\(a,b) &amp;=(-a,b)\\(a,b) &amp;=(|a|,|b|)\\(a,0) &amp;=|a|\\(a,ka) &amp;=|a|(k\in \mathbb{Z})\end{aligned}\]</span></p><h2 id="线性组合">线性组合</h2><p><span class="math display">\[a,b,m,n\in\mathbb{Z}\]</span> <span class="math display">\[称形如ma+nb的整数为a,b的线性组合\]</span></p><h2 id="带余除法">带余除法</h2><p><span class="math display">\[a\in\mathbb{Z},n\in\mathbb{N^+}\]</span> <span class="math display">\[\exists!q,r\in\mathbb{Z}:0\le r&lt;n且a=qn+r\]</span> <span class="math display">\[称q=\lfloor \frac{a}{n}\rfloor为除法的商,r=a\mod{n}为除法的余数\]</span></p><h2 id="同余">同余</h2><p><span class="math display">\[m\in\mathbb{N^+},a,b\in\mathbb{Z}且m\mid a-b\]</span> <span class="math display">\[则称a和b模m同余,记为a\equiv b\pmod{m}\]</span></p><h2 id="完全剩余系">完全剩余系</h2><p><span class="math display">\[若一个整数集合A使得\forall a\in\mathbb{Z},\exists! b\in A:b\equiv a\pmod{m}\space(m\in\mathbb{N^+})\]</span> <span class="math display">\[则称A是一个模m的完全剩余系\]</span></p><h1 id="定理">定理</h1><h2 id="定理1">定理1</h2><h3 id="内容">内容</h3><p><span class="math display">\[若a,b,m,n\in\mathbb{Z}, 且c\mid a, c\mid b\]</span> <span class="math display">\[则c\mid ma+nb\]</span></p><h3 id="证明">证明</h3><p><span class="math display">\[令cp=a, cq=b\]</span> <span class="math display">\[ma+nb=cmp+cnq=c(mp+nq)\]</span> <span class="math display">\[\therefore c\mid ma+nb\]</span></p><h2 id="定理2">定理2</h2><h3 id="内容-1">内容</h3><p><span class="math display">\[若a,b,c\in  \\mathbb{Z}\]</span> <span class="math display">\[则(a,b)=(a+cb,b)\]</span> ### 证明 <span class="math display">\[令集合A为a与b的所有公因子,集合B为a+cb与b的所有公因子\]</span> <span class="math display">\[\forall m\in A\]</span> <span class="math display">\[\because m\mid a,m\mid b\]</span> <span class="math display">\[\therefore m|1\times a+c\times b(定理1)\]</span> <span class="math display">\[\therefore m\in B\]</span> <span class="math display">\[\therefore A\subseteq B\]</span> <span class="math display">\[\forall n\in B\]</span> <span class="math display">\[\because n\mid a+cb,m\mid b\]</span> <span class="math display">\[\therefore n|1\times(a+cb)+(-c)\times b(定理1)\]</span> <span class="math display">\[\therefore n\in A\]</span> <span class="math display">\[\therefore B\subseteq A\]</span> <span class="math display">\[\therefore A=B\]</span> <span class="math display">\[\therefore (a,b)=(a+cb,b)\]</span></p><h2 id="定理3">定理3</h2><h3 id="内容-2">内容</h3><p><span class="math display">\[a,b\in  \mathbb{Z}且a\mathbb{Z}不全为0\]</span> <span class="math display">\[(a,b)是a,b的线性组合中最小的正整数\]</span> ### 证明 <span class="math display">\[令d=ma+nb为a,b的线性组合中最小的正整数(m,n\in  \mathbb{Z})\]</span> <span class="math display">\[将a表示为带余除法的形式a=dq+r(q,r\in  \mathbb{Z},0\le r&lt;d)\]</span> <span class="math display">\[r=a-dq=a-(ma+nb)q=(a-mq)a-nqb\]</span> <span class="math display">\[\therefore r是a,b的线性组合\]</span> <span class="math display">\[又\because 0\le r&lt;d且d是a,b的线性组合中最小的正整数\]</span> <span class="math display">\[\therefore r=0\]</span> <span class="math display">\[\therefore a=dq\]</span> <span class="math display">\[\therefore d\mid a\]</span> <span class="math display">\[同理可得d\mid b\]</span> <span class="math display">\[\forall c\in\mathbb{N^+}:c\mid a,c\mid b\]</span> <span class="math display">\[c\mid d(定理1)\]</span> <span class="math display">\[若d\mathbb{N}eq(a,b),则存在e=(a,b)&gt;d\]</span> <span class="math display">\[\because e\mid a,e\mid b\]</span> <span class="math display">\[\therefore e\mid d\]</span> <span class="math display">\[而e&gt;d且e,d\in\mathbb{N^+}\]</span> <span class="math display">\[\therefore e\mathbb{N}mid d,自相矛盾\]</span> <span class="math display">\[\therefore d=(a,b)\]</span></p><h3 id="推论">推论</h3><p><span class="math display">\[a,b\in  \mathbb{Z}且a,b不全为0\]</span> <span class="math display">\[\forall c\in\mathbb{N^+}:c\mid a, c\mid b有c\mid (a,b)\]</span></p><h2 id="定理4">定理4</h2><h3 id="内容-3">内容</h3><p><span class="math display">\[a,b,e\in \mathbb{Z}且(a,b)=d\]</span> <span class="math display">\[那么(ae,be)=de\]</span> ### 证明 <span class="math display">\[\begin{aligned}(ae,be)&amp;=\min\{mae+nbe:m,n\in \mathbb{Z}\}(定理3)\\&amp;=\min\{e(ma+nb):m,n\in \mathbb{Z}\}\\&amp;=e\cdot \min\{ma+nb:m,n\in \mathbb{Z}\}\\&amp;=e\cdot (a,b)(定理3)\end{aligned}\]</span></p><h2 id="定理5">定理5</h2><h3 id="内容-4">内容</h3><p><span class="math display">\[a,b\in \mathbb{Z}且(a,b)=d\]</span> <span class="math display">\[那么(\frac{a}{d},\frac{b}{d})=1\]</span></p><h3 id="证明-1">证明</h3><p><span class="math display">\[令(\frac{a}{d},\frac{b}{d})=e\]</span> <span class="math display">\[(a,b)=de(定理4)\]</span> <span class="math display">\[\because (a,b)=d\]</span> <span class="math display">\[\therefore e=1\]</span> <span class="math display">\[\therefore (\frac{a}{d},\frac{b}{d})=1\]</span></p><h2 id="定理6">定理6</h2><h3 id="内容-5">内容</h3><p><span class="math display">\[a,b,c\in\mathbb{N^+}\]</span> <span class="math display">\[(a,b)=1,a\mid bc\]</span> <span class="math display">\[则a\mid c\]</span></p><h3 id="证明-2">证明</h3><p><span class="math display">\[\because (a,b)=1\]</span> <span class="math display">\[\therefore \exists d,e\in \mathbb{Z}:da+eb=1\]</span> <span class="math display">\[\therefore dac+eac=c\]</span> <span class="math display">\[\because a\mid a,a\mid bc\]</span> <span class="math display">\[\therefore a\mid ec\times a+f\times bc\]</span> <span class="math display">\[\therefore a\mid c\]</span></p><h2 id="定理7裴蜀定理">定理7(裴蜀定理)</h2><h3 id="内容-6">内容</h3><p><span class="math display">\[a,b,c\in \mathbb{Z},(a,b)=d\]</span> <span class="math display">\[\begin{cases}若d\mathbb{N}mid c,那么方程ax+by=c无整数解\\若d\mid c,那么方程ax+by=c有无穷个整数解\\若方程有解,所有的解可以表示为\begin{cases}x=x_0+\frac{b}{d}\cdot n\\y=y_0-\frac{a}{d}\cdot n\end{cases}(n\in \mathbb{Z},x_0,y_0是方程的一组特解)\end{cases}\]</span> ### 证明 1. <span class="math inline">\(d\mathbb{N}mid c\)</span>的情况</p><p><span class="math display">\[\because d\mid a,d\mid b\]</span> <span class="math display">\[\therefore d\mid ax+by\]</span> <span class="math display">\[而d\mathbb{N}mid c\]</span> <span class="math display">\[\therefore 原方程无解\]</span> 2. <span class="math inline">\(d\mid c的情况\)</span></p><p><span class="math display">\[由定理3得\exists s,t\in \mathbb{Z}:as+bt=d\]</span> <span class="math display">\[\frac{asc}{d}+\frac{btc}{d}=c\]</span> <span class="math display">\[\because d|c\]</span> <span class="math display">\[\therefore \frac{c}{d}\in \mathbb{Z}\]</span> <span class="math display">\[可得特解\begin{cases}x_0=\frac{sc}{d}\\y_0=\frac{tc}{d}\end{cases}\]</span> <span class="math display">\[设x&#39;,y&#39;是任意一组整数解\]</span> <span class="math display">\[\begin{cases}ax&#39;+by&#39;&amp;=&amp;c\\ax_0+by_0&amp;=&amp;c\end{cases}\]</span> <span class="math display">\[两式相减得a(x&#39;-x_0)+b(y&#39;-y_0)=0\]</span> <span class="math display">\[a(x&#39;-x_0)=b(y_0-y&#39;)\]</span> <span class="math display">\[\frac{a}{d}(x&#39;-x_0)=\frac{b}{d}(y_0-y&#39;)\]</span> <span class="math display">\[\therefore \frac{b}{d}\mid\frac{a}{d}(x&#39;-x_0)\]</span> <span class="math display">\[又\because (\frac{a}{d},\frac{b}{d})=1(定理5)\]</span> <span class="math display">\[\therefore \frac{b}{d}\mid(x&#39;-x_0)(定理6)\]</span> <span class="math display">\[\therefore\exists n\in \mathbb{Z}:\frac{b}{d}\cdot n=x&#39;-x_0\]</span> <span class="math display">\[\begin{aligned}\therefore x&#39;&amp;=x_0+\frac{b}{d}\cdot n\\同理y&#39;&amp;=y_0-\frac{a}{d}\cdot n\end{aligned}\]</span> <span class="math display">\[\therefore原方程的解满足\begin{cases}x=x_0+\frac{b}{d}\cdot n\\y=y_0-\frac{a}{d}\cdot n\end{cases}\]</span> ### 说明 原方程(即形如<span class="math inline">\(ax+by=c(a,b,c\in \mathbb{Z})\)</span>)叫做二元线性丢番图方程</p><h2 id="定理8">定理8</h2><h3 id="内容-7">内容</h3><p><span class="math display">\[a,b\in \mathbb{Z}\]</span> <span class="math display">\[a\equiv b\pmod{m}当且仅当\exists m\in \mathbb{Z}:a=b+km\]</span> ### 证明 1. 充分性</p><p><span class="math display">\[\because a\equiv b\pmod{m}\]</span> <span class="math display">\[\therefore m\mid a-b\]</span> <span class="math display">\[\therefore\exists k\in \mathbb{Z}:a-b=km\]</span> <span class="math display">\[\therefore a=b+km\]</span> 2. 必要性</p><p><span class="math display">\[\because a=b+km(k\in \mathbb{Z})\]</span> <span class="math display">\[\therefore a-b=km\]</span> <span class="math display">\[\therefore m\mid a-b\]</span> <span class="math display">\[\therefore a\equiv b\pmod{m}\]</span></p><h2 id="定理9">定理9</h2><h3 id="内容-8">内容</h3><p><span class="math display">\[m\in\mathbb{N^+},模m的同余满足以下性质:\]</span> <span class="math display">\[1.自反性:若a\in \mathbb{Z},则a\equiv a\pmod{m}\]</span> <span class="math display">\[2.对称性:若a,b\in \mathbb{Z}且a\equiv b\pmod{m},则b\equiv a\pmod{m}\]</span> <span class="math display">\[3.传递性:若a,b,c\in \mathbb{Z}且a\equiv b\pmod{m}, b\equiv c\pmod{m},则a\equiv c\pmod{m}\]</span></p><h3 id="证明-3">证明</h3><ol type="1"><li>自反性</li></ol><p><span class="math display">\[\because m\mid0\]</span> <span class="math display">\[\therefore m\mid a-a\]</span> <span class="math display">\[\therefore a\equiv a\pmod{m}\]</span> 2. 对称性</p><p><span class="math display">\[\because a\equiv b\pmod{m}\]</span> <span class="math display">\[\therefore \exists k\in \mathbb{Z}:a=b+km\]</span> <span class="math display">\[\therefore a-b=km\]</span> <span class="math display">\[\therefore b-a=-km\]</span> <span class="math display">\[\therefore m\mid b-a\]</span> <span class="math display">\[b\equiv a\pmod{m}\]</span> 3. 传递性</p><p><span class="math display">\[\because a\equiv b\pmod{m}\]</span> <span class="math display">\[\therefore m\mid a-b\]</span> <span class="math display">\[\therefore \exists p\in \mathbb{Z}:a-b=pm\]</span> <span class="math display">\[同理\exists q\in \mathbb{Z}:b-c=qm\]</span> <span class="math display">\[两式相加得a-c=(p+q)m\]</span> <span class="math display">\[\therefore m|a-c\]</span> <span class="math display">\[\therefore a\equiv c\pmod{m}\]</span></p><h2 id="定理10">定理10</h2><h3 id="内容-9">内容</h3><p><span class="math display">\[若a,b,c\in \mathbb{Z},m&gt;0,a\equiv b\pmod{m}\]</span> <span class="math display">\[则\begin{cases}a+c\equiv b+c\pmod{m}\\a-c\equiv b-c\pmod{m}\\ac\equiv bc\pmod{m}\end{cases}\]</span> ### 证明 1. <span class="math inline">\(a+c\equiv b+c\pmod{m}\)</span></p><p><span class="math display">\[\because a\equiv b\pmod{m}\]</span> <span class="math display">\[\therefore m\mid a-b\]</span> <span class="math display">\[\therefore m\mid (a+c)-(b+c)\]</span> <span class="math display">\[\therefore a+c\equiv b+c\pmod{m}\]</span> 2. <span class="math inline">\(a-c\equiv b-c\pmod{m}\)</span></p><p><span class="math display">\[\because a\equiv b\pmod{m}\]</span> <span class="math display">\[\therefore m\mid a-b\]</span> <span class="math display">\[\therefore m\mid (a-c)-(b-c)\]</span> <span class="math display">\[\therefore a-c\equiv b-c\pmod{m}\]</span> 3. <span class="math inline">\(ac\equiv bc\pmod{m}\)</span></p><p><span class="math display">\[\because a\equiv b\pmod{m}\]</span> <span class="math display">\[\therefore m\mid a-b\]</span> <span class="math display">\[\therefore m\mid c(a-b)\]</span> <span class="math display">\[\therefore m\mid ac-bc\]</span> <span class="math display">\[\therefore ac\equiv bc\pmod{m}\]</span></p><h2 id="定理11">定理11</h2><h3 id="内容-10">内容</h3><p><span class="math display">\[a,b,c,d,m\in \mathbb{Z},m&gt;0\]</span> <span class="math display">\[若a\equiv b\pmod{m},c\equiv d\pmod{m}\]</span> <span class="math display">\[则\begin{cases}a+c\equiv b+d\pmod{m}\\a-c\equiv b-d\pmod{m}\\ac\equiv bd\pmod{m}\end{cases}\]</span> ### 证明 1. <span class="math inline">\(a+c\equiv b+d\pmod{m}\)</span></p><p><span class="math display">\[\because a\equiv b\pmod{m}\]</span> <span class="math display">\[\therefore\exists p\in \mathbb{Z}:a-b=pm\]</span> <span class="math display">\[同理\exists q\in \mathbb{Z}:c-d=qm\]</span> <span class="math display">\[两式相加得(a+c)-(b+d)=(p+q)m\]</span> <span class="math display">\[\therefore a+c\equiv b+d\pmod{m}\]</span> 2. <span class="math inline">\(a-c\equiv b-d\pmod{m}\)</span></p><p><span class="math display">\[\because a\equiv b\pmod{m}\]</span> <span class="math display">\[\therefore\exists p\in \mathbb{Z}:a-b=pm\]</span> <span class="math display">\[同理\exists q\in \mathbb{Z}:c-d=qm\]</span> <span class="math display">\[两式相减得(a-c)-(b-d)=(p-q)m\]</span> <span class="math display">\[\therefore a-c\equiv b-d\pmod{m}\]</span> 3. <span class="math inline">\(ac\equiv bd\pmod{m}\)</span></p><p><span class="math display">\[\because a\equiv b\pmod{m}\]</span> <span class="math display">\[\therefore\exists p\in \mathbb{Z}:a-b=pm\]</span> <span class="math display">\[同理\exists q\in \mathbb{Z}:c-d=qm\]</span> <span class="math display">\[\begin{aligned}ac-bd&amp;=ac-bc-bd+bc\\&amp;=(a-b)c-(b-d)c\\&amp;=pmc-qmc\\&amp;=(pc-qc)m\end{aligned}\]</span> <span class="math display">\[\therefore m\mid ac-bd\]</span> <span class="math display">\[\therefore ac\equiv bd\pmod{m}\]</span></p><h2 id="定理12">定理12</h2><h3 id="内容-11">内容</h3><p><span class="math display">\[a,b,c,d\in \mathbb{Z},m&gt;0,d=(c,m)\]</span> <span class="math display">\[若ac\equiv bc\pmod{m}\]</span> <span class="math display">\[则a\equiv b\pmod{\frac{m}{d}}\]</span></p><h3 id="证明-4">证明</h3><p><span class="math display">\[\because ac\equiv bc\pmod{m}\]</span> <span class="math display">\[\therefore m\mid(a-b)c\]</span> <span class="math display">\[\therefore\exists k\in \mathbb{Z}:c(a-b)=km\]</span> <span class="math display">\[\therefore\frac{c}{d}(a-b)=k\frac{m}{d}\]</span> <span class="math display">\[\therefore(\frac{c}{d},\frac{m}{d})=1(定理5),\frac{m}{d}\mid\frac{c}{d}(a-b)\]</span> <span class="math display">\[\therefore\frac{m}{d}\mid(a-b)(定理6)\]</span> <span class="math display">\[\therefore a\equiv b\pmod{\frac{m}{d}}\]</span></p><h3 id="推论-1">推论</h3><p><span class="math display">\[a,b,c,m\in \mathbb{Z},(c,m)=1\]</span> <span class="math display">\[若ac\equiv bc\pmod{m}\]</span> <span class="math display">\[则a\equiv b\pmod{m}\]</span></p><h2 id="定理13">定理13</h2><h3 id="内容-12">内容</h3><p><span class="math display">\[若\{r_1,r_2,\dots,r_m\}是一个模m的完全剩余系,且正整数a使得(a,m)=1\]</span> <span class="math display">\[则\forall b\in \mathbb{Z}有\{a\cdot r_1+b,a\cdot r_2+b\dots,a\cdot r_m+b\}是一个模m完全剩余系\]</span></p><h3 id="证明-5">证明</h3><p><span class="math display">\[设i,j\in([1,m]\cup\mathbb{N})且a\cdot r_i+b\equiv a\cdot r_j+b\pmod{m}\]</span> <span class="math display">\[\therefore a\cdot r_i\equiv a\cdot r_j\pmod{m}\space(定理10.2)\]</span> <span class="math display">\[\because (a,m)=1\]</span> <span class="math display">\[\therefore r_i\equiv r_j\pmod{m}\space(定理12.推论)\]</span> <span class="math display">\[又\because一个完全剩余系中的数两两不同余(完全剩余系的定义)\]</span> <span class="math display">\[\therefore i=j\]</span> <span class="math display">\[\therefore\{a\cdot r_1+b,a\cdot r_2+b\dots,a\cdot r_m+b\}中的数模m两两不同余\]</span> <span class="math display">\[\therefore\{a\cdot r_1+b,a\cdot r_2+b\dots,a\cdot r_m+b\}是一个模m完全剩余系\]</span></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Codeforces 1100C」NN and the Optical Illusion 题解</title>
      <link href="/2019/CF-1100C/"/>
      <url>/2019/CF-1100C/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1100/problem/C">题目</a></p><span id="more"></span><h2 id="题意">题意</h2><ul><li>一个半径为<span class="math inline">\(r\)</span>的圆，与<span class="math inline">\(n\)</span>个半径为<span class="math inline">\(R\)</span>的圆相切且这<span class="math inline">\(n\)</span>个圆分别和左右的两个圆相切</li><li>已知<span class="math inline">\(n, r\)</span>,求<span class="math inline">\(R\)</span></li></ul><h2 id="思路">思路</h2><p>将外圈圆的圆心相连, 围成一个正<span class="math inline">\(n\)</span>边形 <img src="/2019/CF-1100C/1.png"> - 从多边形截出一个<span class="math inline">\(\triangle BGA\)</span> <img src="/2019/CF-1100C/2.png"> - <span class="math inline">\(\angle BGA=\frac{\angle BGF}{2}=\frac{180^{\circ}-\frac{360^{\circ}}{n}}{2}\)</span> - 做<span class="math inline">\(\triangle BGA \space BG\)</span>边上的高<span class="math inline">\(AH\)</span> - 得到<span class="math inline">\(Rt\triangle GHA,GH=R,GA=R+r\)</span> - <span class="math inline">\(\frac{GA}{GH}=\frac{R+r}{R}=\sec\angle BGA\)</span> - <span class="math inline">\(R\cdot \sec\angle BGA=R+r\)</span> - <span class="math inline">\(R\cdot(\sec\angle BGA-1)=r\)</span> - <span class="math inline">\(R=\frac{r}{\sec\angle BGA-1}=\frac{r}{\sec(\frac{180^{\circ}-\frac{360^{\circ}}{n}}{2})-1}\)</span></p><h2 id="注意事项">注意事项</h2><ol type="1"><li>cmath里没有<span class="math inline">\(\sec\)</span>，可以用<span class="math inline">\(\cos\)</span>的倒数嘛</li><li>cmath里面的所有三角函数都是弧度制，要将角度<span class="math inline">\(\times\pi\div180\)</span></li></ol><h2 id="备注">备注</h2><p>绘图工具:GeoGebra Geometry ## 代码(C++) <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n;<br><span class="hljs-type">double</span> r;<br><span class="hljs-built_in">read</span>(n);<br>std::cin &gt;&gt; r;<br><span class="hljs-type">double</span> degree = <span class="hljs-number">180</span> - (<span class="hljs-number">360.0</span> / n);<br>degree /= <span class="hljs-number">2</span>;<br>degree = degree / <span class="hljs-number">180</span> * PI;<br><span class="hljs-type">double</span> ans=r / (<span class="hljs-number">1</span> / <span class="hljs-built_in">cos</span>(degree) - <span class="hljs-number">1</span>);<br>std::cout.<span class="hljs-built_in">precision</span>(<span class="hljs-number">7</span>);<br>std::cout &lt;&lt; std::fixed &lt;&lt; ans &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> 几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「洛谷P2948」滑雪课 题解</title>
      <link href="/2019/luogu-2948/"/>
      <url>/2019/luogu-2948/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2948">题目</a></p><span id="more"></span><h2 id="思路">思路</h2><ol type="1"><li>首先将所有课程按结束时间排序</li><li>将相同滑坡能力值的分为一类, 对于能力为<span class="math inline">\(i\)</span>的取其中所需时间最短的<span class="math inline">\(lastmin_i\)</span></li><li><span class="math inline">\(f(i, j)\)</span>表示对于第<span class="math inline">\(i\)</span>个时刻, 能力值为<span class="math inline">\(j\)</span>或<span class="math inline">\(j\)</span>以上时最大的滑雪次数</li><li>若第<span class="math inline">\(j\)</span>个课程开始于<span class="math inline">\(begin\)</span>结束于<span class="math inline">\(i\)</span>, 若参加这个课程, 枚举开始时的能力值<span class="math inline">\(k, f(i, abi_j)=max\{f(begin, k) | k&lt;=100\}\)</span> (<span class="math inline">\(abi_j\)</span>是第<span class="math inline">\(j\)</span>次获得的滑雪能力), 再枚举<span class="math inline">\(abi_j\)</span>以下的能力<span class="math inline">\(k, f(i, k)=max\{f(i, k), f(i, j)\}\)</span></li><li>对于每一个时刻<span class="math inline">\(i\)</span>, 若滑雪, 枚举滑雪时的能力值<span class="math inline">\(k, f(i, k)=max\{f(i-lastmin_k, k)|k&lt;=100, i-lastmin_k&gt;=0\}\)</span></li></ol><h2 id="代码">代码</h2><p>注: 以下代码已省略头文件、read和write <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Class</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-type">int</span> begin, end, abi;<br>&#125;c[M];<br><span class="hljs-comment">// 课程类型, 可以视作struct</span><br><span class="hljs-type">int</span> dp[N][M];<br><span class="hljs-type">int</span> lastmin[M];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> n, m, t;<br>  <span class="hljs-built_in">read</span>(t);<br>  <span class="hljs-built_in">read</span>(n);<br>  <span class="hljs-built_in">read</span>(m);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-type">int</span> begin, last, abi;<br>    <span class="hljs-built_in">read</span>(begin);<br>    <span class="hljs-built_in">read</span>(last);<br>    <span class="hljs-built_in">read</span>(abi);<br>    c[i].begin = begin;<br>    c[i].end = begin + last;<br>    c[i].abi = abi;<br>  &#125;<br>  std::<span class="hljs-built_in">sort</span>(c + <span class="hljs-number">1</span>, c + n + <span class="hljs-number">1</span>, [](Class i, Class j) &#123;<br>    <span class="hljs-keyword">return</span> i.end &lt; j.end;<br>  &#125;);<span class="hljs-comment">// 给课程按结束时间排序, 用到了匿名(lambda)函数, 需要开C++11</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>    lastmin[i] = inf;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>    <span class="hljs-type">int</span> need, last;<br>    <span class="hljs-built_in">read</span>(need);<br>    <span class="hljs-built_in">read</span>(last);<br>    lastmin[need] = std::<span class="hljs-built_in">min</span>(lastmin[need], last);<br>  &#125;<br>  <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(dp));<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= t; i++) &#123;<br>    dp[i][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>; i &lt;= t; i++) &#123;<span class="hljs-comment">// j表示下一个课程的编号</span><br>    <span class="hljs-keyword">if</span> (c[j].end == i) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">100</span>; k++) &#123;<br>        dp[i][c[j].abi] = std::<span class="hljs-built_in">max</span>(dp[i][c[j].abi], dp[c[j].begin][k]);<br>      &#125;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt; c[j].abi; k++) &#123;<br>        dp[i][k] = std::<span class="hljs-built_in">max</span>(dp[i][k], dp[i][c[j].abi]);<br>      &#125;<br>      j++;<br>    &#125;<span class="hljs-comment">// 上课</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">100</span>; k++) &#123;<br>      <span class="hljs-keyword">if</span> (i - lastmin[k] &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (dp[i - lastmin[k]][k] != <span class="hljs-number">-1</span>) &#123;<br>          dp[i][k] = std::<span class="hljs-built_in">max</span>(dp[i][k], dp[i - lastmin[k]][k] + <span class="hljs-number">1</span>);<br>          ans = std::<span class="hljs-built_in">max</span>(ans, dp[i][k]);<br>        &#125;<br>      &#125;<br>    &#125;<span class="hljs-comment">// 滑雪</span><br>  &#125;<br>  <span class="hljs-built_in">write</span>(ans), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> USACO </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>来自 AH 的菜鸡退役OIer / 可爱的<del>女</del>男孩子</p><p><a href="https://codeforces.com/profile/ChthollyNotaSeniorious">Codeforces</a> / <a href="https://atcoder.jp/users/Seniorious">Atcoder</a> / <a href="https://www.luogu.com.cn/user/25251">洛谷</a> / <a href="https://loj.ac/u/Seniorious">LOJ</a> / <a href="http://uoj.ac/user/profile/Seniorious">UOJ</a></p><p>QQ: 2775632269</p><p>博客上 FZOJ 的题目密码都是我 FZOJ 注册日期（8 位数字）。</p><p>现就读于安徽师范大学附属中学。</p>]]></content>
      
    </entry>
    
    
  
</search>
